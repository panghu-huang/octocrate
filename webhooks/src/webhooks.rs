#[allow(unused_imports)]
use super::*;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use typed_builder::TypedBuilder;

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionConfigurationDisabledAction {
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
impl std::fmt::Display for WebhookBranchProtectionConfigurationDisabledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionConfigurationDisabledAction::Disabled => write!(f, "disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionConfigurationEnabledAction {
  #[serde(rename = "enabled")]
  Enabled,
}

#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
impl std::fmt::Display for WebhookBranchProtectionConfigurationEnabledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionConfigurationEnabledAction::Enabled => write!(f, "enabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionRuleCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for WebhookBranchProtectionRuleCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionRuleCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleAllowDeletionsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleAllowDeletionsEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleAllowDeletionsEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleAllowDeletionsEnforcementLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRuleAllowDeletionsEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleAllowForcePushesEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleAllowForcePushesEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleAllowForcePushesEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleAllowForcePushesEnforcementLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRuleAllowForcePushesEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::NonAdmins => {
        write!(f, "non_admins")
      }
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Everyone => {
        write!(f, "everyone")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleMergeQueueEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleMergeQueueEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleMergeQueueEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleMergeQueueEnforcementLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRuleMergeQueueEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRulePullRequestReviewsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRulePullRequestReviewsEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRulePullRequestReviewsEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRulePullRequestReviewsEnforcementLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRulePullRequestReviewsEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleRequiredConversationResolutionLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleRequiredConversationResolutionLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleRequiredConversationResolutionLevel::Off => write!(f, "off"),
      BranchProtectionRuleRequiredConversationResolutionLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRuleRequiredConversationResolutionLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::NonAdmins => write!(f, "non_admins"),
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::NonAdmins => {
        write!(f, "non_admins")
      }
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum BranchProtectionRuleSignatureRequirementEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for BranchProtectionRuleSignatureRequirementEnforcementLevel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      BranchProtectionRuleSignatureRequirementEnforcementLevel::Off => write!(f, "off"),
      BranchProtectionRuleSignatureRequirementEnforcementLevel::NonAdmins => {
        write!(f, "non_admins")
      }
      BranchProtectionRuleSignatureRequirementEnforcementLevel::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionRuleDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for WebhookBranchProtectionRuleDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionRuleDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionRuleEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display for WebhookBranchProtectionRuleEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionRuleEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display
  for WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom
{
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom::Off => write!(f, "off"),
      WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom::NonAdmins => write!(f, "non_admins"),
      WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
impl std::fmt::Display
  for WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom
{
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom::Off => write!(f, "off"),
      WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom::NonAdmins => write!(f, "non_admins"),
      WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom::Everyone => write!(f, "everyone"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckRunCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for WebhookCheckRunCompletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckRunCompletedAction::Completed => write!(f, "completed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SimpleCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "startup_failure")]
  StartupFailure,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for SimpleCheckSuiteConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SimpleCheckSuiteConclusion::Success => write!(f, "success"),
      SimpleCheckSuiteConclusion::Failure => write!(f, "failure"),
      SimpleCheckSuiteConclusion::Neutral => write!(f, "neutral"),
      SimpleCheckSuiteConclusion::Cancelled => write!(f, "cancelled"),
      SimpleCheckSuiteConclusion::Skipped => write!(f, "skipped"),
      SimpleCheckSuiteConclusion::TimedOut => write!(f, "timed_out"),
      SimpleCheckSuiteConclusion::ActionRequired => write!(f, "action_required"),
      SimpleCheckSuiteConclusion::Stale => write!(f, "stale"),
      SimpleCheckSuiteConclusion::StartupFailure => write!(f, "startup_failure"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAndAnalysisAdvancedSecurityStatus {
  #[serde(rename = "enabled")]
  Enabled,
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
impl std::fmt::Display for SecurityAndAnalysisAdvancedSecurityStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAndAnalysisAdvancedSecurityStatus::Enabled => write!(f, "enabled"),
      SecurityAndAnalysisAdvancedSecurityStatus::Disabled => write!(f, "disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
/// The enablement status of Dependabot security updates for the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAndAnalysisDependabotSecurityUpdatesStatus {
  #[serde(rename = "enabled")]
  Enabled,
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
impl std::fmt::Display for SecurityAndAnalysisDependabotSecurityUpdatesStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAndAnalysisDependabotSecurityUpdatesStatus::Enabled => write!(f, "enabled"),
      SecurityAndAnalysisDependabotSecurityUpdatesStatus::Disabled => write!(f, "disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAndAnalysisSecretScanningStatus {
  #[serde(rename = "enabled")]
  Enabled,
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
impl std::fmt::Display for SecurityAndAnalysisSecretScanningStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAndAnalysisSecretScanningStatus::Enabled => write!(f, "enabled"),
      SecurityAndAnalysisSecretScanningStatus::Disabled => write!(f, "disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAndAnalysisSecretScanningPushProtectionStatus {
  #[serde(rename = "enabled")]
  Enabled,
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
impl std::fmt::Display for SecurityAndAnalysisSecretScanningPushProtectionStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAndAnalysisSecretScanningPushProtectionStatus::Enabled => write!(f, "enabled"),
      SecurityAndAnalysisSecretScanningPushProtectionStatus::Disabled => write!(f, "disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SimpleCheckSuiteStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for SimpleCheckSuiteStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SimpleCheckSuiteStatus::Queued => write!(f, "queued"),
      SimpleCheckSuiteStatus::InProgress => write!(f, "in_progress"),
      SimpleCheckSuiteStatus::Completed => write!(f, "completed"),
      SimpleCheckSuiteStatus::Pending => write!(f, "pending"),
      SimpleCheckSuiteStatus::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum CheckRunWithSimpleCheckSuiteConclusion {
  #[serde(rename = "waiting")]
  Waiting,
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "startup_failure")]
  StartupFailure,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for CheckRunWithSimpleCheckSuiteConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      CheckRunWithSimpleCheckSuiteConclusion::Waiting => write!(f, "waiting"),
      CheckRunWithSimpleCheckSuiteConclusion::Pending => write!(f, "pending"),
      CheckRunWithSimpleCheckSuiteConclusion::StartupFailure => write!(f, "startup_failure"),
      CheckRunWithSimpleCheckSuiteConclusion::Stale => write!(f, "stale"),
      CheckRunWithSimpleCheckSuiteConclusion::Success => write!(f, "success"),
      CheckRunWithSimpleCheckSuiteConclusion::Failure => write!(f, "failure"),
      CheckRunWithSimpleCheckSuiteConclusion::Neutral => write!(f, "neutral"),
      CheckRunWithSimpleCheckSuiteConclusion::Cancelled => write!(f, "cancelled"),
      CheckRunWithSimpleCheckSuiteConclusion::Skipped => write!(f, "skipped"),
      CheckRunWithSimpleCheckSuiteConclusion::TimedOut => write!(f, "timed_out"),
      CheckRunWithSimpleCheckSuiteConclusion::ActionRequired => write!(f, "action_required"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
/// The phase of the lifecycle that the check is currently in.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum CheckRunWithSimpleCheckSuiteStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for CheckRunWithSimpleCheckSuiteStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      CheckRunWithSimpleCheckSuiteStatus::Queued => write!(f, "queued"),
      CheckRunWithSimpleCheckSuiteStatus::InProgress => write!(f, "in_progress"),
      CheckRunWithSimpleCheckSuiteStatus::Completed => write!(f, "completed"),
      CheckRunWithSimpleCheckSuiteStatus::Pending => write!(f, "pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckRunCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for WebhookCheckRunCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckRunCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckRunRequestedActionAction {
  #[serde(rename = "requested_action")]
  RequestedAction,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for WebhookCheckRunRequestedActionAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckRunRequestedActionAction::RequestedAction => write!(f, "requested_action"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckRunRerequestedAction {
  #[serde(rename = "rerequested")]
  Rerequested,
}

#[cfg(any(feature = "full", feature = "check_run"))]
impl std::fmt::Display for WebhookCheckRunRerequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckRunRerequestedAction::Rerequested => write!(f, "rerequested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteCompletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteCompletedAction::Completed => write!(f, "completed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_status",
  feature = "issue_comment",
  feature = "issues",
  feature = "workflow_job"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum AppEvents {
  #[serde(rename = "branch_protection_rule")]
  BranchProtectionRule,
  #[serde(rename = "check_run")]
  CheckRun,
  #[serde(rename = "check_suite")]
  CheckSuite,
  #[serde(rename = "code_scanning_alert")]
  CodeScanningAlert,
  #[serde(rename = "commit_comment")]
  CommitComment,
  #[serde(rename = "content_reference")]
  ContentReference,
  #[serde(rename = "create")]
  Create,
  #[serde(rename = "delete")]
  Delete,
  #[serde(rename = "deployment")]
  Deployment,
  #[serde(rename = "deployment_review")]
  DeploymentReview,
  #[serde(rename = "deployment_status")]
  DeploymentStatus,
  #[serde(rename = "deploy_key")]
  DeployKey,
  #[serde(rename = "discussion")]
  Discussion,
  #[serde(rename = "discussion_comment")]
  DiscussionComment,
  #[serde(rename = "fork")]
  Fork,
  #[serde(rename = "gollum")]
  Gollum,
  #[serde(rename = "issues")]
  Issues,
  #[serde(rename = "issue_comment")]
  IssueComment,
  #[serde(rename = "label")]
  Label,
  #[serde(rename = "member")]
  Member,
  #[serde(rename = "membership")]
  Membership,
  #[serde(rename = "milestone")]
  Milestone,
  #[serde(rename = "organization")]
  Organization,
  #[serde(rename = "org_block")]
  OrgBlock,
  #[serde(rename = "page_build")]
  PageBuild,
  #[serde(rename = "project")]
  Project,
  #[serde(rename = "project_card")]
  ProjectCard,
  #[serde(rename = "project_column")]
  ProjectColumn,
  #[serde(rename = "public")]
  Public,
  #[serde(rename = "pull_request")]
  PullRequest,
  #[serde(rename = "pull_request_review")]
  PullRequestReview,
  #[serde(rename = "pull_request_review_comment")]
  PullRequestReviewComment,
  #[serde(rename = "push")]
  Push,
  #[serde(rename = "registry_package")]
  RegistryPackage,
  #[serde(rename = "release")]
  Release,
  #[serde(rename = "repository")]
  Repository,
  #[serde(rename = "repository_dispatch")]
  RepositoryDispatch,
  #[serde(rename = "secret_scanning_alert")]
  SecretScanningAlert,
  #[serde(rename = "star")]
  Star,
  #[serde(rename = "status")]
  Status,
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "team_add")]
  TeamAdd,
  #[serde(rename = "watch")]
  Watch,
  #[serde(rename = "workflow_dispatch")]
  WorkflowDispatch,
  #[serde(rename = "workflow_run")]
  WorkflowRun,
  #[serde(rename = "merge_group")]
  MergeGroup,
  #[serde(rename = "pull_request_review_thread")]
  PullRequestReviewThread,
  #[serde(rename = "workflow_job")]
  WorkflowJob,
  #[serde(rename = "merge_queue_entry")]
  MergeQueueEntry,
  #[serde(rename = "security_and_analysis")]
  SecurityAndAnalysis,
  #[serde(rename = "projects_v2_item")]
  ProjectsV2Item,
  #[serde(rename = "secret_scanning_alert_location")]
  SecretScanningAlertLocation,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_status",
  feature = "issue_comment",
  feature = "issues",
  feature = "workflow_job"
))]
impl std::fmt::Display for AppEvents {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      AppEvents::BranchProtectionRule => write!(f, "branch_protection_rule"),
      AppEvents::CheckRun => write!(f, "check_run"),
      AppEvents::CheckSuite => write!(f, "check_suite"),
      AppEvents::CodeScanningAlert => write!(f, "code_scanning_alert"),
      AppEvents::CommitComment => write!(f, "commit_comment"),
      AppEvents::ContentReference => write!(f, "content_reference"),
      AppEvents::Create => write!(f, "create"),
      AppEvents::Delete => write!(f, "delete"),
      AppEvents::Deployment => write!(f, "deployment"),
      AppEvents::DeploymentReview => write!(f, "deployment_review"),
      AppEvents::DeploymentStatus => write!(f, "deployment_status"),
      AppEvents::DeployKey => write!(f, "deploy_key"),
      AppEvents::Discussion => write!(f, "discussion"),
      AppEvents::DiscussionComment => write!(f, "discussion_comment"),
      AppEvents::Fork => write!(f, "fork"),
      AppEvents::Gollum => write!(f, "gollum"),
      AppEvents::Issues => write!(f, "issues"),
      AppEvents::IssueComment => write!(f, "issue_comment"),
      AppEvents::Label => write!(f, "label"),
      AppEvents::Member => write!(f, "member"),
      AppEvents::Membership => write!(f, "membership"),
      AppEvents::Milestone => write!(f, "milestone"),
      AppEvents::Organization => write!(f, "organization"),
      AppEvents::OrgBlock => write!(f, "org_block"),
      AppEvents::PageBuild => write!(f, "page_build"),
      AppEvents::Project => write!(f, "project"),
      AppEvents::ProjectCard => write!(f, "project_card"),
      AppEvents::ProjectColumn => write!(f, "project_column"),
      AppEvents::Public => write!(f, "public"),
      AppEvents::PullRequest => write!(f, "pull_request"),
      AppEvents::PullRequestReview => write!(f, "pull_request_review"),
      AppEvents::PullRequestReviewComment => write!(f, "pull_request_review_comment"),
      AppEvents::Push => write!(f, "push"),
      AppEvents::RegistryPackage => write!(f, "registry_package"),
      AppEvents::Release => write!(f, "release"),
      AppEvents::Repository => write!(f, "repository"),
      AppEvents::RepositoryDispatch => write!(f, "repository_dispatch"),
      AppEvents::SecretScanningAlert => write!(f, "secret_scanning_alert"),
      AppEvents::Star => write!(f, "star"),
      AppEvents::Status => write!(f, "status"),
      AppEvents::Team => write!(f, "team"),
      AppEvents::TeamAdd => write!(f, "team_add"),
      AppEvents::Watch => write!(f, "watch"),
      AppEvents::WorkflowDispatch => write!(f, "workflow_dispatch"),
      AppEvents::WorkflowRun => write!(f, "workflow_run"),
      AppEvents::MergeGroup => write!(f, "merge_group"),
      AppEvents::PullRequestReviewThread => write!(f, "pull_request_review_thread"),
      AppEvents::WorkflowJob => write!(f, "workflow_job"),
      AppEvents::MergeQueueEntry => write!(f, "merge_queue_entry"),
      AppEvents::SecurityAndAnalysis => write!(f, "security_and_analysis"),
      AppEvents::ProjectsV2Item => write!(f, "projects_v2_item"),
      AppEvents::SecretScanningAlertLocation => write!(f, "secret_scanning_alert_location"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "installation",
  feature = "installation_repositories",
  feature = "issue_comment",
  feature = "issues",
  feature = "member",
  feature = "membership",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "project_card",
  feature = "project",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "release",
  feature = "repository",
  feature = "repository_vulnerability_alert",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "status",
  feature = "team",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum UserType {
  Bot,
  User,
  Organization,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "installation",
  feature = "installation_repositories",
  feature = "issue_comment",
  feature = "issues",
  feature = "member",
  feature = "membership",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "project_card",
  feature = "project",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "release",
  feature = "repository",
  feature = "repository_vulnerability_alert",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "status",
  feature = "team",
  feature = "workflow_job",
  feature = "workflow_run"
))]
impl std::fmt::Display for UserType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      UserType::Bot => write!(f, "Bot"),
      UserType::User => write!(f, "User"),
      UserType::Organization => write!(f, "Organization"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteCompletedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "startup_failure")]
  StartupFailure,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteCompletedCheckSuiteConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Success => write!(f, "success"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Failure => write!(f, "failure"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Neutral => write!(f, "neutral"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Cancelled => write!(f, "cancelled"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::TimedOut => write!(f, "timed_out"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Stale => write!(f, "stale"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Skipped => write!(f, "skipped"),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::StartupFailure => {
        write!(f, "startup_failure")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteCompletedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteCompletedCheckSuiteStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteCompletedCheckSuiteStatus::Requested => write!(f, "requested"),
      WebhookCheckSuiteCompletedCheckSuiteStatus::InProgress => write!(f, "in_progress"),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Completed => write!(f, "completed"),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Queued => write!(f, "queued"),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Pending => write!(f, "pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRequestedAction::Requested => write!(f, "requested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRequestedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRequestedCheckSuiteConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Success => write!(f, "success"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Failure => write!(f, "failure"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Neutral => write!(f, "neutral"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Cancelled => write!(f, "cancelled"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::TimedOut => write!(f, "timed_out"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Stale => write!(f, "stale"),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Skipped => write!(f, "skipped"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRequestedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRequestedCheckSuiteStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRequestedCheckSuiteStatus::Requested => write!(f, "requested"),
      WebhookCheckSuiteRequestedCheckSuiteStatus::InProgress => write!(f, "in_progress"),
      WebhookCheckSuiteRequestedCheckSuiteStatus::Completed => write!(f, "completed"),
      WebhookCheckSuiteRequestedCheckSuiteStatus::Queued => write!(f, "queued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRerequestedAction {
  #[serde(rename = "rerequested")]
  Rerequested,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRerequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRerequestedAction::Rerequested => write!(f, "rerequested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRerequestedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRerequestedCheckSuiteConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Success => write!(f, "success"),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Failure => write!(f, "failure"),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Neutral => write!(f, "neutral"),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Cancelled => write!(f, "cancelled"),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::TimedOut => write!(f, "timed_out"),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Stale => write!(f, "stale"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "check_suite"))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCheckSuiteRerequestedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
impl std::fmt::Display for WebhookCheckSuiteRerequestedCheckSuiteStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Requested => write!(f, "requested"),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::InProgress => write!(f, "in_progress"),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Completed => write!(f, "completed"),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Queued => write!(f, "queued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertAppearedInBranchAction {
  #[serde(rename = "appeared_in_branch")]
  AppearedInBranch,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertAppearedInBranchAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAction::AppearedInBranch => {
        write!(f, "appeared_in_branch")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::FalsePositive => {
        write!(f, "false positive")
      }
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::WonTFix => {
        write!(f, "won't fix")
      }
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::UsedInTests => {
        write!(f, "used in tests")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum AlertInstanceState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for AlertInstanceState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      AlertInstanceState::Open => write!(f, "open"),
      AlertInstanceState::Dismissed => write!(f, "dismissed"),
      AlertInstanceState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertAppearedInBranchAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertState::Open => write!(f, "open"),
      WebhookCodeScanningAlertAppearedInBranchAlertState::Dismissed => write!(f, "dismissed"),
      WebhookCodeScanningAlertAppearedInBranchAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertClosedByUserAction {
  #[serde(rename = "closed_by_user")]
  ClosedByUser,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertClosedByUserAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertClosedByUserAction::ClosedByUser => write!(f, "closed_by_user"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertClosedByUserAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertClosedByUserAlertDismissedReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::FalsePositive => {
        write!(f, "false positive")
      }
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::WonTFix => write!(f, "won't fix"),
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::UsedInTests => {
        write!(f, "used in tests")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertClosedByUserAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertClosedByUserAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertClosedByUserAlertState {
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertClosedByUserAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertState::Dismissed => write!(f, "dismissed"),
      WebhookCodeScanningAlertClosedByUserAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertCreatedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertCreatedAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertCreatedAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertCreatedAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertCreatedAlertState::Open => write!(f, "open"),
      WebhookCodeScanningAlertCreatedAlertState::Dismissed => write!(f, "dismissed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertFixedAction {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertFixedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertFixedAction::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertFixedAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertFixedAlertDismissedReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertFixedAlertDismissedReason::FalsePositive => {
        write!(f, "false positive")
      }
      WebhookCodeScanningAlertFixedAlertDismissedReason::WonTFix => write!(f, "won't fix"),
      WebhookCodeScanningAlertFixedAlertDismissedReason::UsedInTests => write!(f, "used in tests"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertFixedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertFixedAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertFixedAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertFixedAlertState {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertFixedAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertFixedAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedAlertState::Open => write!(f, "open"),
      WebhookCodeScanningAlertReopenedAlertState::Dismissed => write!(f, "dismissed"),
      WebhookCodeScanningAlertReopenedAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedByUserAction {
  #[serde(rename = "reopened_by_user")]
  ReopenedByUser,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedByUserAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedByUserAction::ReopenedByUser => write!(f, "reopened_by_user"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::None => write!(f, "none"),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Note => write!(f, "note"),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Warning => write!(f, "warning"),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCodeScanningAlertReopenedByUserAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
impl std::fmt::Display for WebhookCodeScanningAlertReopenedByUserAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCodeScanningAlertReopenedByUserAlertState::Open => write!(f, "open"),
      WebhookCodeScanningAlertReopenedByUserAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "commit_comment"))]
/// The action performed. Can be `created`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCommitCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "commit_comment"))]
impl std::fmt::Display for WebhookCommitCommentCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCommitCommentCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "commit_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCommitCommentCreatedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "commit_comment"))]
impl std::fmt::Display for WebhookCommitCommentCreatedCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCommitCommentCreatedCommentAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookCommitCommentCreatedCommentAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      WebhookCommitCommentCreatedCommentAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      WebhookCommitCommentCreatedCommentAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookCommitCommentCreatedCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookCommitCommentCreatedCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookCommitCommentCreatedCommentAuthorAssociation::None => write!(f, "NONE"),
      WebhookCommitCommentCreatedCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "create"))]
/// The type of Git ref object created in the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCreateRefType {
  #[serde(rename = "tag")]
  Tag,
  #[serde(rename = "branch")]
  Branch,
}

#[cfg(any(feature = "full", feature = "create"))]
impl std::fmt::Display for WebhookCreateRefType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCreateRefType::Tag => write!(f, "tag"),
      WebhookCreateRefType::Branch => write!(f, "branch"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCustomPropertyCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
impl std::fmt::Display for WebhookCustomPropertyCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCustomPropertyCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property"))]
/// The type of the value for the property
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum OrgCustomPropertyValueType {
  #[serde(rename = "string")]
  String,
  #[serde(rename = "single_select")]
  SingleSelect,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
impl std::fmt::Display for OrgCustomPropertyValueType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      OrgCustomPropertyValueType::String => write!(f, "string"),
      OrgCustomPropertyValueType::SingleSelect => write!(f, "single_select"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property"))]
/// Who can edit the values of the property
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum OrgCustomPropertyValuesEditableBy {
  #[serde(rename = "org_actors")]
  OrgActors,
  #[serde(rename = "org_and_repo_actors")]
  OrgAndRepoActors,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
impl std::fmt::Display for OrgCustomPropertyValuesEditableBy {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      OrgCustomPropertyValuesEditableBy::OrgActors => write!(f, "org_actors"),
      OrgCustomPropertyValuesEditableBy::OrgAndRepoActors => write!(f, "org_and_repo_actors"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCustomPropertyDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
impl std::fmt::Display for WebhookCustomPropertyDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCustomPropertyDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCustomPropertyUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
impl std::fmt::Display for WebhookCustomPropertyUpdatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCustomPropertyUpdatedAction::Updated => write!(f, "updated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "custom_property_values"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookCustomPropertyValuesUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "custom_property_values"))]
impl std::fmt::Display for WebhookCustomPropertyValuesUpdatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookCustomPropertyValuesUpdatedAction::Updated => write!(f, "updated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "delete"))]
/// The type of Git ref object deleted in the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeleteRefType {
  #[serde(rename = "tag")]
  Tag,
  #[serde(rename = "branch")]
  Branch,
}

#[cfg(any(feature = "full", feature = "delete"))]
impl std::fmt::Display for WebhookDeleteRefType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeleteRefType::Tag => write!(f, "tag"),
      WebhookDeleteRefType::Branch => write!(f, "branch"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertAutoDismissedAction {
  #[serde(rename = "auto_dismissed")]
  AutoDismissed,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertAutoDismissedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertAutoDismissedAction::AutoDismissed => write!(f, "auto_dismissed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// The execution scope of the vulnerable dependency.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DependabotAlertDependencyScope {
  #[serde(rename = "development")]
  Development,
  #[serde(rename = "runtime")]
  Runtime,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for DependabotAlertDependencyScope {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DependabotAlertDependencyScope::Development => write!(f, "development"),
      DependabotAlertDependencyScope::Runtime => write!(f, "runtime"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertAutoReopenedAction {
  #[serde(rename = "auto_reopened")]
  AutoReopened,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertAutoReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertAutoReopenedAction::AutoReopened => write!(f, "auto_reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertDismissedAction {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertDismissedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertDismissedAction::Dismissed => write!(f, "dismissed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertFixedAction {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertFixedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertFixedAction::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertReintroducedAction {
  #[serde(rename = "reintroduced")]
  Reintroduced,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertReintroducedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertReintroducedAction::Reintroduced => write!(f, "reintroduced"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDependabotAlertReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
impl std::fmt::Display for WebhookDependabotAlertReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDependabotAlertReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deploy_key"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeployKeyCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
impl std::fmt::Display for WebhookDeployKeyCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeployKeyCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deploy_key"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeployKeyDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
impl std::fmt::Display for WebhookDeployKeyDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeployKeyDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "deployment"))]
impl std::fmt::Display for WebhookDeploymentCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DeploymentWorkflowRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
impl std::fmt::Display for DeploymentWorkflowRunConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DeploymentWorkflowRunConclusion::Success => write!(f, "success"),
      DeploymentWorkflowRunConclusion::Failure => write!(f, "failure"),
      DeploymentWorkflowRunConclusion::Neutral => write!(f, "neutral"),
      DeploymentWorkflowRunConclusion::Cancelled => write!(f, "cancelled"),
      DeploymentWorkflowRunConclusion::TimedOut => write!(f, "timed_out"),
      DeploymentWorkflowRunConclusion::ActionRequired => write!(f, "action_required"),
      DeploymentWorkflowRunConclusion::Stale => write!(f, "stale"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DeploymentWorkflowRunStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "waiting")]
  Waiting,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
impl std::fmt::Display for DeploymentWorkflowRunStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DeploymentWorkflowRunStatus::Requested => write!(f, "requested"),
      DeploymentWorkflowRunStatus::InProgress => write!(f, "in_progress"),
      DeploymentWorkflowRunStatus::Completed => write!(f, "completed"),
      DeploymentWorkflowRunStatus::Queued => write!(f, "queued"),
      DeploymentWorkflowRunStatus::Waiting => write!(f, "waiting"),
      DeploymentWorkflowRunStatus::Pending => write!(f, "pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentProtectionRuleRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "deployment_protection_rule"))]
impl std::fmt::Display for WebhookDeploymentProtectionRuleRequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentProtectionRuleRequestedAction::Requested => write!(f, "requested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum AuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
impl std::fmt::Display for AuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      AuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      AuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      AuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      AuthorAssociation::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
      AuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      AuthorAssociation::Member => write!(f, "MEMBER"),
      AuthorAssociation::None => write!(f, "NONE"),
      AuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// The merge method to use.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum AutoMergeMergeMethod {
  #[serde(rename = "merge")]
  Merge,
  #[serde(rename = "squash")]
  Squash,
  #[serde(rename = "rebase")]
  Rebase,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
impl std::fmt::Display for AutoMergeMergeMethod {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      AutoMergeMergeMethod::Merge => write!(f, "merge"),
      AutoMergeMergeMethod::Squash => write!(f, "squash"),
      AutoMergeMergeMethod::Rebase => write!(f, "rebase"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "issue_comment",
  feature = "issues",
  feature = "milestone",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// The state of the milestone.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum MilestoneState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "issue_comment",
  feature = "issues",
  feature = "milestone",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for MilestoneState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      MilestoneState::Open => write!(f, "open"),
      MilestoneState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// State of this Pull Request. Either `open` or `closed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
impl std::fmt::Display for PullRequestState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestState::Open => write!(f, "open"),
      PullRequestState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewApprovedAction {
  #[serde(rename = "approved")]
  Approved,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewApprovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewApprovedAction::Approved => write!(f, "approved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewApprovedReviewersType {
  User,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewApprovedReviewersType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewApprovedReviewersType::User => write!(f, "User"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewRejectedAction {
  #[serde(rename = "rejected")]
  Rejected,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewRejectedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewRejectedAction::Rejected => write!(f, "rejected"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewRejectedReviewersType {
  User,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewRejectedReviewersType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewRejectedReviewersType::User => write!(f, "User"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewRequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewRequestedAction::Requested => write!(f, "requested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentReviewRequestedReviewersType {
  User,
  Team,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
impl std::fmt::Display for WebhookDeploymentReviewRequestedReviewersType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentReviewRequestedReviewersType::User => write!(f, "User"),
      WebhookDeploymentReviewRequestedReviewersType::Team => write!(f, "Team"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_status"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentStatusCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
impl std::fmt::Display for WebhookDeploymentStatusCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentStatusCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_status"))]
/// The result of the completed check run. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentStatusCreatedCheckRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
impl std::fmt::Display for WebhookDeploymentStatusCreatedCheckRunConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentStatusCreatedCheckRunConclusion::Success => write!(f, "success"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Failure => write!(f, "failure"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Neutral => write!(f, "neutral"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Cancelled => write!(f, "cancelled"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::TimedOut => write!(f, "timed_out"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookDeploymentStatusCreatedCheckRunConclusion::Stale => write!(f, "stale"),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Skipped => write!(f, "skipped"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "deployment_status"))]
/// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDeploymentStatusCreatedCheckRunStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
impl std::fmt::Display for WebhookDeploymentStatusCreatedCheckRunStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDeploymentStatusCreatedCheckRunStatus::Queued => write!(f, "queued"),
      WebhookDeploymentStatusCreatedCheckRunStatus::InProgress => write!(f, "in_progress"),
      WebhookDeploymentStatusCreatedCheckRunStatus::Completed => write!(f, "completed"),
      WebhookDeploymentStatusCreatedCheckRunStatus::Waiting => write!(f, "waiting"),
      WebhookDeploymentStatusCreatedCheckRunStatus::Pending => write!(f, "pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionAnsweredAction {
  #[serde(rename = "answered")]
  Answered,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionAnsweredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionAnsweredAction::Answered => write!(f, "answered"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionAnsweredAnswerAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionAnsweredAnswerAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionAnsweredAnswerAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookDiscussionAnsweredAnswerAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::None => write!(f, "NONE"),
      WebhookDiscussionAnsweredAnswerAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DiscussionAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
impl std::fmt::Display for DiscussionAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DiscussionAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      DiscussionAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      DiscussionAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      DiscussionAuthorAssociation::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
      DiscussionAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      DiscussionAuthorAssociation::Member => write!(f, "MEMBER"),
      DiscussionAuthorAssociation::None => write!(f, "NONE"),
      DiscussionAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
/// The current state of the discussion.
/// `converting` means that the discussion is being converted from an issue.
/// `transferring` means that the discussion is being transferred from another repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DiscussionState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "locked")]
  Locked,
  #[serde(rename = "converting")]
  Converting,
  #[serde(rename = "transferring")]
  Transferring,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
impl std::fmt::Display for DiscussionState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DiscussionState::Open => write!(f, "open"),
      DiscussionState::Closed => write!(f, "closed"),
      DiscussionState::Locked => write!(f, "locked"),
      DiscussionState::Converting => write!(f, "converting"),
      DiscussionState::Transferring => write!(f, "transferring"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
/// The reason for the current state
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum DiscussionStateReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "outdated")]
  Outdated,
  #[serde(rename = "duplicate")]
  Duplicate,
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
impl std::fmt::Display for DiscussionStateReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      DiscussionStateReason::Resolved => write!(f, "resolved"),
      DiscussionStateReason::Outdated => write!(f, "outdated"),
      DiscussionStateReason::Duplicate => write!(f, "duplicate"),
      DiscussionStateReason::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCategoryChangedAction {
  #[serde(rename = "category_changed")]
  CategoryChanged,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionCategoryChangedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCategoryChangedAction::CategoryChanged => write!(f, "category_changed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentCreatedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentCreatedCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::None => write!(f, "NONE"),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentDeletedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentDeletedCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::None => write!(f, "NONE"),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCommentEditedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
impl std::fmt::Display for WebhookDiscussionCommentEditedCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::None => write!(f, "NONE"),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WebhookDiscussionCreatedDiscussionItem2Locked {
  Boolean(bool),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionCreatedDiscussionItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "converting")]
  Converting,
  #[serde(rename = "transferring")]
  Transferring,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionCreatedDiscussionItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionCreatedDiscussionItem2State::Open => write!(f, "open"),
      WebhookDiscussionCreatedDiscussionItem2State::Converting => write!(f, "converting"),
      WebhookDiscussionCreatedDiscussionItem2State::Transferring => write!(f, "transferring"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDiscussionCreatedDiscussion {
  /// A Discussion in a repository.
  Discussion(Discussion),
  WebhookDiscussionCreatedDiscussionItem2(WebhookDiscussionCreatedDiscussionItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionLabeledAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionLabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionLabeledAction::Labeled => write!(f, "labeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionLockedAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionLockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionLockedAction::Locked => write!(f, "locked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionPinnedAction {
  #[serde(rename = "pinned")]
  Pinned,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionPinnedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionPinnedAction::Pinned => write!(f, "pinned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionTransferredAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionTransferredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionTransferredAction::Transferred => write!(f, "transferred"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionUnansweredAction {
  #[serde(rename = "unanswered")]
  Unanswered,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionUnansweredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionUnansweredAction::Unanswered => write!(f, "unanswered"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionUnansweredOldAnswerAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionUnansweredOldAnswerAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::None => write!(f, "NONE"),
      WebhookDiscussionUnansweredOldAnswerAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionUnlabeledAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionUnlabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionUnlabeledAction::Unlabeled => write!(f, "unlabeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionUnlockedAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionUnlockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionUnlockedAction::Unlocked => write!(f, "unlocked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookDiscussionUnpinnedAction {
  #[serde(rename = "unpinned")]
  Unpinned,
}

#[cfg(any(feature = "full", feature = "discussion"))]
impl std::fmt::Display for WebhookDiscussionUnpinnedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookDiscussionUnpinnedAction::Unpinned => write!(f, "unpinned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "fork",
  feature = "issues",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "security_and_analysis",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryVisibility {
  #[serde(rename = "public")]
  Public,
  #[serde(rename = "private")]
  Private,
  #[serde(rename = "internal")]
  Internal,
}

#[cfg(any(
  feature = "full",
  feature = "fork",
  feature = "issues",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "security_and_analysis",
  feature = "team"
))]
impl std::fmt::Display for RepositoryVisibility {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryVisibility::Public => write!(f, "public"),
      RepositoryVisibility::Private => write!(f, "private"),
      RepositoryVisibility::Internal => write!(f, "internal"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "fork"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WebhookForkForkeeItem2Fork {
  Boolean(bool),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "fork"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookForkForkee {
  /// A git repository
  Repository(Repository),
  WebhookForkForkeeItem2(WebhookForkForkeeItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "github_app_authorization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookGithubAppAuthorizationRevokedAction {
  #[serde(rename = "revoked")]
  Revoked,
}

#[cfg(any(feature = "full", feature = "github_app_authorization"))]
impl std::fmt::Display for WebhookGithubAppAuthorizationRevokedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookGithubAppAuthorizationRevokedAction::Revoked => write!(f, "revoked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "gollum"))]
/// The action that was performed on the page. Can be `created` or `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookGollumPagesAction {
  #[serde(rename = "created")]
  Created,
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "gollum"))]
impl std::fmt::Display for WebhookGollumPagesAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookGollumPagesAction::Created => write!(f, "created"),
      WebhookGollumPagesAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "installation"))]
impl std::fmt::Display for WebhookInstallationCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "installation",
  feature = "installation_repositories"
))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InstallationAccount {
  /// A GitHub user.
  SimpleUser(SimpleUser),
  /// An enterprise on GitHub.
  Enterprise(Enterprise),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "installation"))]
impl std::fmt::Display for WebhookInstallationDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationNewPermissionsAcceptedAction {
  #[serde(rename = "new_permissions_accepted")]
  NewPermissionsAccepted,
}

#[cfg(any(feature = "full", feature = "installation"))]
impl std::fmt::Display for WebhookInstallationNewPermissionsAcceptedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationNewPermissionsAcceptedAction::NewPermissionsAccepted => {
        write!(f, "new_permissions_accepted")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationRepositoriesAddedAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
impl std::fmt::Display for WebhookInstallationRepositoriesAddedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationRepositoriesAddedAction::Added => write!(f, "added"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationRepositoriesRemovedAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
impl std::fmt::Display for WebhookInstallationRepositoriesRemovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationRepositoriesRemovedAction::Removed => write!(f, "removed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationSuspendAction {
  #[serde(rename = "suspend")]
  Suspend,
}

#[cfg(any(feature = "full", feature = "installation"))]
impl std::fmt::Display for WebhookInstallationSuspendAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationSuspendAction::Suspend => write!(f, "suspend"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationTargetRenamedAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
impl std::fmt::Display for WebhookInstallationTargetRenamedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationTargetRenamedAction::Renamed => write!(f, "renamed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookInstallationUnsuspendAction {
  #[serde(rename = "unsuspend")]
  Unsuspend,
}

#[cfg(any(feature = "full", feature = "installation"))]
impl std::fmt::Display for WebhookInstallationUnsuspendAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookInstallationUnsuspendAction::Unsuspend => write!(f, "unsuspend"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum IssueCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for IssueCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      IssueCommentAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      IssueCommentAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      IssueCommentAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      IssueCommentAuthorAssociation::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
      IssueCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      IssueCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      IssueCommentAuthorAssociation::None => write!(f, "NONE"),
      IssueCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum IssueActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
impl std::fmt::Display for IssueActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      IssueActiveLockReason::Resolved => write!(f, "resolved"),
      IssueActiveLockReason::OffTopic => write!(f, "off-topic"),
      IssueActiveLockReason::TooHeated => write!(f, "too heated"),
      IssueActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum IssueAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
impl std::fmt::Display for IssueAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      IssueAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      IssueAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      IssueAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      IssueAuthorAssociation::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
      IssueAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      IssueAuthorAssociation::Member => write!(f, "MEMBER"),
      IssueAuthorAssociation::None => write!(f, "NONE"),
      IssueAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum IssueState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
impl std::fmt::Display for IssueState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      IssueState::Open => write!(f, "open"),
      IssueState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentCreatedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentCreatedIssueItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentCreatedIssueItem2State::Open => write!(f, "open"),
      WebhookIssueCommentCreatedIssueItem2State::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentCreatedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssueCommentCreatedIssueItem2(WebhookIssueCommentCreatedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentDeletedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentDeletedIssueItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentDeletedIssueItem2State::Open => write!(f, "open"),
      WebhookIssueCommentDeletedIssueItem2State::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentDeletedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssueCommentDeletedIssueItem2(WebhookIssueCommentDeletedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssueCommentEditedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
impl std::fmt::Display for WebhookIssueCommentEditedIssueItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssueCommentEditedIssueItem2State::Open => write!(f, "open"),
      WebhookIssueCommentEditedIssueItem2State::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentEditedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssueCommentEditedIssueItem2(WebhookIssueCommentEditedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesAssignedAction {
  #[serde(rename = "assigned")]
  Assigned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesAssignedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesAssignedAction::Assigned => write!(f, "assigned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesClosedIssueItem2State {
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesClosedIssueItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesClosedIssueItem2State::Closed => write!(f, "closed"),
      WebhookIssuesClosedIssueItem2State::Open => write!(f, "open"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesClosedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesClosedIssueItem2(WebhookIssuesClosedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesDemilestonedAction {
  #[serde(rename = "demilestoned")]
  Demilestoned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesDemilestonedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesDemilestonedAction::Demilestoned => write!(f, "demilestoned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesDemilestonedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesDemilestonedIssueItem2(WebhookIssuesDemilestonedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesLabeledAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesLabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesLabeledAction::Labeled => write!(f, "labeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesLockedAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesLockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesLockedAction::Locked => write!(f, "locked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesLockedIssueItem2ActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesLockedIssueItem2ActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesLockedIssueItem2ActiveLockReason::Resolved => write!(f, "resolved"),
      WebhookIssuesLockedIssueItem2ActiveLockReason::OffTopic => write!(f, "off-topic"),
      WebhookIssuesLockedIssueItem2ActiveLockReason::TooHeated => write!(f, "too heated"),
      WebhookIssuesLockedIssueItem2ActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WebhookIssuesLockedIssueItem2Locked {
  Boolean(bool),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesLockedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesLockedIssueItem2(WebhookIssuesLockedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesMilestonedAction {
  #[serde(rename = "milestoned")]
  Milestoned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesMilestonedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesMilestonedAction::Milestoned => write!(f, "milestoned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesMilestonedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesMilestonedIssueItem2(WebhookIssuesMilestonedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesOpenedAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesOpenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesOpenedAction::Opened => write!(f, "opened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesPinnedAction {
  #[serde(rename = "pinned")]
  Pinned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesPinnedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesPinnedAction::Pinned => write!(f, "pinned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesReopenedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesReopenedIssueItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesReopenedIssueItem2State::Open => write!(f, "open"),
      WebhookIssuesReopenedIssueItem2State::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesReopenedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesReopenedIssueItem2(WebhookIssuesReopenedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesTransferredAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesTransferredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesTransferredAction::Transferred => write!(f, "transferred"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesUnassignedAction {
  #[serde(rename = "unassigned")]
  Unassigned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesUnassignedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesUnassignedAction::Unassigned => write!(f, "unassigned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesUnlabeledAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesUnlabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesUnlabeledAction::Unlabeled => write!(f, "unlabeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesUnlockedAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesUnlockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesUnlockedAction::Unlocked => write!(f, "unlocked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WebhookIssuesUnlockedIssueItem2Locked {
  Boolean(bool),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesUnlockedIssue {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  Issue(Issue),
  WebhookIssuesUnlockedIssueItem2(WebhookIssuesUnlockedIssueItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookIssuesUnpinnedAction {
  #[serde(rename = "unpinned")]
  Unpinned,
}

#[cfg(any(feature = "full", feature = "issues"))]
impl std::fmt::Display for WebhookIssuesUnpinnedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookIssuesUnpinnedAction::Unpinned => write!(f, "unpinned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookLabelCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "label"))]
impl std::fmt::Display for WebhookLabelCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookLabelCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookLabelDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "label"))]
impl std::fmt::Display for WebhookLabelDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookLabelDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookLabelEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "label"))]
impl std::fmt::Display for WebhookLabelEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookLabelEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchaseCancelledAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchaseCancelledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchaseCancelledAction::Cancelled => write!(f, "cancelled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum MarketplacePurchasePlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for MarketplacePurchasePlanPriceModel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      MarketplacePurchasePlanPriceModel::Free => write!(f, "FREE"),
      MarketplacePurchasePlanPriceModel::FlatRate => write!(f, "FLAT_RATE"),
      MarketplacePurchasePlanPriceModel::PerUnit => write!(f, "PER_UNIT"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display
  for WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel
{
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::Free => {
        write!(f, "FREE")
      }
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        write!(f, "FLAT_RATE")
      }
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        write!(f, "PER_UNIT")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchaseCancelledMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2(
    WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchaseChangedAction {
  #[serde(rename = "changed")]
  Changed,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchaseChangedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchaseChangedAction::Changed => write!(f, "changed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::Free => {
        write!(f, "FREE")
      }
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        write!(f, "FLAT_RATE")
      }
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        write!(f, "PER_UNIT")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchaseChangedMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2(
    WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchasePendingChangeAction {
  #[serde(rename = "pending_change")]
  PendingChange,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchasePendingChangeAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchasePendingChangeAction::PendingChange => write!(f, "pending_change"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display
  for WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel
{
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::Free => {
        write!(f, "FREE")
      }
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        write!(f, "FLAT_RATE")
      }
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        write!(f, "PER_UNIT")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePendingChangeMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchasePendingChangeCancelledAction {
  #[serde(rename = "pending_change_cancelled")]
  PendingChangeCancelled,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchasePendingChangeCancelledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchasePendingChangeCancelledAction::PendingChangeCancelled => {
        write!(f, "pending_change_cancelled")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchasePurchasedAction {
  #[serde(rename = "purchased")]
  Purchased,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display for WebhookMarketplacePurchasePurchasedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchasePurchasedAction::Purchased => write!(f, "purchased"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
impl std::fmt::Display
  for WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel
{
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::Free => {
        write!(f, "FREE")
      }
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        write!(f, "FLAT_RATE")
      }
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        write!(f, "PER_UNIT")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePurchasedMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMemberAddedAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "member"))]
impl std::fmt::Display for WebhookMemberAddedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMemberAddedAction::Added => write!(f, "added"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMemberAddedChangesPermissionTo {
  #[serde(rename = "write")]
  Write,
  #[serde(rename = "admin")]
  Admin,
  #[serde(rename = "read")]
  Read,
}

#[cfg(any(feature = "full", feature = "member"))]
impl std::fmt::Display for WebhookMemberAddedChangesPermissionTo {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMemberAddedChangesPermissionTo::Write => write!(f, "write"),
      WebhookMemberAddedChangesPermissionTo::Admin => write!(f, "admin"),
      WebhookMemberAddedChangesPermissionTo::Read => write!(f, "read"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMemberEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "member"))]
impl std::fmt::Display for WebhookMemberEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMemberEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMemberRemovedAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "member"))]
impl std::fmt::Display for WebhookMemberRemovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMemberRemovedAction::Removed => write!(f, "removed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "membership"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMembershipAddedAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "membership"))]
impl std::fmt::Display for WebhookMembershipAddedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMembershipAddedAction::Added => write!(f, "added"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "membership"))]
/// The scope of the membership. Currently, can only be `team`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMembershipAddedScope {
  #[serde(rename = "team")]
  Team,
}

#[cfg(any(feature = "full", feature = "membership"))]
impl std::fmt::Display for WebhookMembershipAddedScope {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMembershipAddedScope::Team => write!(f, "team"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum TeamNotificationSetting {
  #[serde(rename = "notifications_enabled")]
  NotificationsEnabled,
  #[serde(rename = "notifications_disabled")]
  NotificationsDisabled,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
impl std::fmt::Display for TeamNotificationSetting {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      TeamNotificationSetting::NotificationsEnabled => write!(f, "notifications_enabled"),
      TeamNotificationSetting::NotificationsDisabled => write!(f, "notifications_disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
/// Whether team members will receive notifications when their team is @mentioned
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum TeamParentNotificationSetting {
  #[serde(rename = "notifications_enabled")]
  NotificationsEnabled,
  #[serde(rename = "notifications_disabled")]
  NotificationsDisabled,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
impl std::fmt::Display for TeamParentNotificationSetting {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      TeamParentNotificationSetting::NotificationsEnabled => write!(f, "notifications_enabled"),
      TeamParentNotificationSetting::NotificationsDisabled => write!(f, "notifications_disabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum TeamParentPrivacy {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "secret")]
  Secret,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
impl std::fmt::Display for TeamParentPrivacy {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      TeamParentPrivacy::Open => write!(f, "open"),
      TeamParentPrivacy::Closed => write!(f, "closed"),
      TeamParentPrivacy::Secret => write!(f, "secret"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum TeamPrivacy {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "secret")]
  Secret,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
impl std::fmt::Display for TeamPrivacy {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      TeamPrivacy::Open => write!(f, "open"),
      TeamPrivacy::Closed => write!(f, "closed"),
      TeamPrivacy::Secret => write!(f, "secret"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "membership"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMembershipRemovedAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "membership"))]
impl std::fmt::Display for WebhookMembershipRemovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMembershipRemovedAction::Removed => write!(f, "removed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "membership"))]
/// The scope of the membership. Currently, can only be `team`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMembershipRemovedScope {
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "organization")]
  Organization,
}

#[cfg(any(feature = "full", feature = "membership"))]
impl std::fmt::Display for WebhookMembershipRemovedScope {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMembershipRemovedScope::Team => write!(f, "team"),
      WebhookMembershipRemovedScope::Organization => write!(f, "organization"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "merge_group"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMergeGroupChecksRequestedAction {
  #[serde(rename = "checks_requested")]
  ChecksRequested,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
impl std::fmt::Display for WebhookMergeGroupChecksRequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMergeGroupChecksRequestedAction::ChecksRequested => write!(f, "checks_requested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "merge_group"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMergeGroupDestroyedAction {
  #[serde(rename = "destroyed")]
  Destroyed,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
impl std::fmt::Display for WebhookMergeGroupDestroyedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMergeGroupDestroyedAction::Destroyed => write!(f, "destroyed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "merge_group"))]
/// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMergeGroupDestroyedReason {
  #[serde(rename = "merged")]
  Merged,
  #[serde(rename = "invalidated")]
  Invalidated,
  #[serde(rename = "dequeued")]
  Dequeued,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
impl std::fmt::Display for WebhookMergeGroupDestroyedReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMergeGroupDestroyedReason::Merged => write!(f, "merged"),
      WebhookMergeGroupDestroyedReason::Invalidated => write!(f, "invalidated"),
      WebhookMergeGroupDestroyedReason::Dequeued => write!(f, "dequeued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "meta"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMetaDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "meta"))]
impl std::fmt::Display for WebhookMetaDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMetaDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "meta"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMetaDeletedHookConfigContentType {
  #[serde(rename = "json")]
  Json,
  #[serde(rename = "form")]
  Form,
}

#[cfg(any(feature = "full", feature = "meta"))]
impl std::fmt::Display for WebhookMetaDeletedHookConfigContentType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMetaDeletedHookConfigContentType::Json => write!(f, "json"),
      WebhookMetaDeletedHookConfigContentType::Form => write!(f, "form"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "meta"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMetaDeletedHookEvents {
  #[serde(rename = "*")]
  Asterisk,
  #[serde(rename = "branch_protection_rule")]
  BranchProtectionRule,
  #[serde(rename = "check_run")]
  CheckRun,
  #[serde(rename = "check_suite")]
  CheckSuite,
  #[serde(rename = "code_scanning_alert")]
  CodeScanningAlert,
  #[serde(rename = "commit_comment")]
  CommitComment,
  #[serde(rename = "create")]
  Create,
  #[serde(rename = "delete")]
  Delete,
  #[serde(rename = "deployment")]
  Deployment,
  #[serde(rename = "deployment_status")]
  DeploymentStatus,
  #[serde(rename = "deploy_key")]
  DeployKey,
  #[serde(rename = "discussion")]
  Discussion,
  #[serde(rename = "discussion_comment")]
  DiscussionComment,
  #[serde(rename = "fork")]
  Fork,
  #[serde(rename = "gollum")]
  Gollum,
  #[serde(rename = "issues")]
  Issues,
  #[serde(rename = "issue_comment")]
  IssueComment,
  #[serde(rename = "label")]
  Label,
  #[serde(rename = "member")]
  Member,
  #[serde(rename = "membership")]
  Membership,
  #[serde(rename = "meta")]
  Meta,
  #[serde(rename = "milestone")]
  Milestone,
  #[serde(rename = "organization")]
  Organization,
  #[serde(rename = "org_block")]
  OrgBlock,
  #[serde(rename = "package")]
  Package,
  #[serde(rename = "page_build")]
  PageBuild,
  #[serde(rename = "project")]
  Project,
  #[serde(rename = "project_card")]
  ProjectCard,
  #[serde(rename = "project_column")]
  ProjectColumn,
  #[serde(rename = "public")]
  Public,
  #[serde(rename = "pull_request")]
  PullRequest,
  #[serde(rename = "pull_request_review")]
  PullRequestReview,
  #[serde(rename = "pull_request_review_comment")]
  PullRequestReviewComment,
  #[serde(rename = "pull_request_review_thread")]
  PullRequestReviewThread,
  #[serde(rename = "push")]
  Push,
  #[serde(rename = "registry_package")]
  RegistryPackage,
  #[serde(rename = "release")]
  Release,
  #[serde(rename = "repository")]
  Repository,
  #[serde(rename = "repository_import")]
  RepositoryImport,
  #[serde(rename = "repository_vulnerability_alert")]
  RepositoryVulnerabilityAlert,
  #[serde(rename = "secret_scanning_alert")]
  SecretScanningAlert,
  #[serde(rename = "secret_scanning_alert_location")]
  SecretScanningAlertLocation,
  #[serde(rename = "security_and_analysis")]
  SecurityAndAnalysis,
  #[serde(rename = "star")]
  Star,
  #[serde(rename = "status")]
  Status,
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "team_add")]
  TeamAdd,
  #[serde(rename = "watch")]
  Watch,
  #[serde(rename = "workflow_job")]
  WorkflowJob,
  #[serde(rename = "workflow_run")]
  WorkflowRun,
  #[serde(rename = "repository_dispatch")]
  RepositoryDispatch,
  #[serde(rename = "projects_v2_item")]
  ProjectsV2Item,
}

#[cfg(any(feature = "full", feature = "meta"))]
impl std::fmt::Display for WebhookMetaDeletedHookEvents {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMetaDeletedHookEvents::Asterisk => write!(f, "*"),
      WebhookMetaDeletedHookEvents::BranchProtectionRule => write!(f, "branch_protection_rule"),
      WebhookMetaDeletedHookEvents::CheckRun => write!(f, "check_run"),
      WebhookMetaDeletedHookEvents::CheckSuite => write!(f, "check_suite"),
      WebhookMetaDeletedHookEvents::CodeScanningAlert => write!(f, "code_scanning_alert"),
      WebhookMetaDeletedHookEvents::CommitComment => write!(f, "commit_comment"),
      WebhookMetaDeletedHookEvents::Create => write!(f, "create"),
      WebhookMetaDeletedHookEvents::Delete => write!(f, "delete"),
      WebhookMetaDeletedHookEvents::Deployment => write!(f, "deployment"),
      WebhookMetaDeletedHookEvents::DeploymentStatus => write!(f, "deployment_status"),
      WebhookMetaDeletedHookEvents::DeployKey => write!(f, "deploy_key"),
      WebhookMetaDeletedHookEvents::Discussion => write!(f, "discussion"),
      WebhookMetaDeletedHookEvents::DiscussionComment => write!(f, "discussion_comment"),
      WebhookMetaDeletedHookEvents::Fork => write!(f, "fork"),
      WebhookMetaDeletedHookEvents::Gollum => write!(f, "gollum"),
      WebhookMetaDeletedHookEvents::Issues => write!(f, "issues"),
      WebhookMetaDeletedHookEvents::IssueComment => write!(f, "issue_comment"),
      WebhookMetaDeletedHookEvents::Label => write!(f, "label"),
      WebhookMetaDeletedHookEvents::Member => write!(f, "member"),
      WebhookMetaDeletedHookEvents::Membership => write!(f, "membership"),
      WebhookMetaDeletedHookEvents::Meta => write!(f, "meta"),
      WebhookMetaDeletedHookEvents::Milestone => write!(f, "milestone"),
      WebhookMetaDeletedHookEvents::Organization => write!(f, "organization"),
      WebhookMetaDeletedHookEvents::OrgBlock => write!(f, "org_block"),
      WebhookMetaDeletedHookEvents::Package => write!(f, "package"),
      WebhookMetaDeletedHookEvents::PageBuild => write!(f, "page_build"),
      WebhookMetaDeletedHookEvents::Project => write!(f, "project"),
      WebhookMetaDeletedHookEvents::ProjectCard => write!(f, "project_card"),
      WebhookMetaDeletedHookEvents::ProjectColumn => write!(f, "project_column"),
      WebhookMetaDeletedHookEvents::Public => write!(f, "public"),
      WebhookMetaDeletedHookEvents::PullRequest => write!(f, "pull_request"),
      WebhookMetaDeletedHookEvents::PullRequestReview => write!(f, "pull_request_review"),
      WebhookMetaDeletedHookEvents::PullRequestReviewComment => {
        write!(f, "pull_request_review_comment")
      }
      WebhookMetaDeletedHookEvents::PullRequestReviewThread => {
        write!(f, "pull_request_review_thread")
      }
      WebhookMetaDeletedHookEvents::Push => write!(f, "push"),
      WebhookMetaDeletedHookEvents::RegistryPackage => write!(f, "registry_package"),
      WebhookMetaDeletedHookEvents::Release => write!(f, "release"),
      WebhookMetaDeletedHookEvents::Repository => write!(f, "repository"),
      WebhookMetaDeletedHookEvents::RepositoryImport => write!(f, "repository_import"),
      WebhookMetaDeletedHookEvents::RepositoryVulnerabilityAlert => {
        write!(f, "repository_vulnerability_alert")
      }
      WebhookMetaDeletedHookEvents::SecretScanningAlert => write!(f, "secret_scanning_alert"),
      WebhookMetaDeletedHookEvents::SecretScanningAlertLocation => {
        write!(f, "secret_scanning_alert_location")
      }
      WebhookMetaDeletedHookEvents::SecurityAndAnalysis => write!(f, "security_and_analysis"),
      WebhookMetaDeletedHookEvents::Star => write!(f, "star"),
      WebhookMetaDeletedHookEvents::Status => write!(f, "status"),
      WebhookMetaDeletedHookEvents::Team => write!(f, "team"),
      WebhookMetaDeletedHookEvents::TeamAdd => write!(f, "team_add"),
      WebhookMetaDeletedHookEvents::Watch => write!(f, "watch"),
      WebhookMetaDeletedHookEvents::WorkflowJob => write!(f, "workflow_job"),
      WebhookMetaDeletedHookEvents::WorkflowRun => write!(f, "workflow_run"),
      WebhookMetaDeletedHookEvents::RepositoryDispatch => write!(f, "repository_dispatch"),
      WebhookMetaDeletedHookEvents::ProjectsV2Item => write!(f, "projects_v2_item"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMilestoneClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "milestone"))]
impl std::fmt::Display for WebhookMilestoneClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMilestoneClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMilestoneCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "milestone"))]
impl std::fmt::Display for WebhookMilestoneCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMilestoneCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMilestoneDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "milestone"))]
impl std::fmt::Display for WebhookMilestoneDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMilestoneDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMilestoneEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "milestone"))]
impl std::fmt::Display for WebhookMilestoneEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMilestoneEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookMilestoneOpenedAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "milestone"))]
impl std::fmt::Display for WebhookMilestoneOpenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookMilestoneOpenedAction::Opened => write!(f, "opened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "org_block"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrgBlockBlockedAction {
  #[serde(rename = "blocked")]
  Blocked,
}

#[cfg(any(feature = "full", feature = "org_block"))]
impl std::fmt::Display for WebhookOrgBlockBlockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrgBlockBlockedAction::Blocked => write!(f, "blocked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "org_block"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrgBlockUnblockedAction {
  #[serde(rename = "unblocked")]
  Unblocked,
}

#[cfg(any(feature = "full", feature = "org_block"))]
impl std::fmt::Display for WebhookOrgBlockUnblockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrgBlockUnblockedAction::Unblocked => write!(f, "unblocked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrganizationDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "organization"))]
impl std::fmt::Display for WebhookOrganizationDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrganizationDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrganizationMemberAddedAction {
  #[serde(rename = "member_added")]
  MemberAdded,
}

#[cfg(any(feature = "full", feature = "organization"))]
impl std::fmt::Display for WebhookOrganizationMemberAddedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrganizationMemberAddedAction::MemberAdded => write!(f, "member_added"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrganizationMemberInvitedAction {
  #[serde(rename = "member_invited")]
  MemberInvited,
}

#[cfg(any(feature = "full", feature = "organization"))]
impl std::fmt::Display for WebhookOrganizationMemberInvitedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrganizationMemberInvitedAction::MemberInvited => write!(f, "member_invited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrganizationMemberRemovedAction {
  #[serde(rename = "member_removed")]
  MemberRemoved,
}

#[cfg(any(feature = "full", feature = "organization"))]
impl std::fmt::Display for WebhookOrganizationMemberRemovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrganizationMemberRemovedAction::MemberRemoved => write!(f, "member_removed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookOrganizationRenamedAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "organization"))]
impl std::fmt::Display for WebhookOrganizationRenamedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookOrganizationRenamedAction::Renamed => write!(f, "renamed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPackagePublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "package"))]
impl std::fmt::Display for WebhookPackagePublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPackagePublishedAction::Published => write!(f, "published"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPackageUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "package"))]
impl std::fmt::Display for WebhookPackageUpdatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPackageUpdatedAction::Updated => write!(f, "updated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPersonalAccessTokenRequestApprovedAction {
  #[serde(rename = "approved")]
  Approved,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
impl std::fmt::Display for WebhookPersonalAccessTokenRequestApprovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPersonalAccessTokenRequestApprovedAction::Approved => write!(f, "approved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPersonalAccessTokenRequestCancelledAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
impl std::fmt::Display for WebhookPersonalAccessTokenRequestCancelledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPersonalAccessTokenRequestCancelledAction::Cancelled => write!(f, "cancelled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPersonalAccessTokenRequestCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
impl std::fmt::Display for WebhookPersonalAccessTokenRequestCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPersonalAccessTokenRequestCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPersonalAccessTokenRequestDeniedAction {
  #[serde(rename = "denied")]
  Denied,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
impl std::fmt::Display for WebhookPersonalAccessTokenRequestDeniedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPersonalAccessTokenRequestDeniedAction::Denied => write!(f, "denied"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "ping"))]
/// The type of webhook. The only valid value is 'web'.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookName {
  #[serde(rename = "web")]
  Web,
}

#[cfg(any(feature = "full", feature = "ping"))]
impl std::fmt::Display for WebhookName {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookName::Web => write!(f, "web"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCardConvertedAction {
  #[serde(rename = "converted")]
  Converted,
}

#[cfg(any(feature = "full", feature = "project_card"))]
impl std::fmt::Display for WebhookProjectCardConvertedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCardConvertedAction::Converted => write!(f, "converted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCardCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "project_card"))]
impl std::fmt::Display for WebhookProjectCardCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCardCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCardDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "project_card"))]
impl std::fmt::Display for WebhookProjectCardDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCardDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCardEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "project_card"))]
impl std::fmt::Display for WebhookProjectCardEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCardEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCardMovedAction {
  #[serde(rename = "moved")]
  Moved,
}

#[cfg(any(feature = "full", feature = "project_card"))]
impl std::fmt::Display for WebhookProjectCardMovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCardMovedAction::Moved => write!(f, "moved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectCardMovedProjectCard {
  ProjectCard(ProjectCard),
  WebhookProjectCardMovedProjectCardItem2(WebhookProjectCardMovedProjectCardItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for WebhookProjectClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
/// State of the project; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum ProjectState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for ProjectState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      ProjectState::Open => write!(f, "open"),
      ProjectState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectColumnCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "project_column"))]
impl std::fmt::Display for WebhookProjectColumnCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectColumnCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectColumnDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "project_column"))]
impl std::fmt::Display for WebhookProjectColumnDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectColumnDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectColumnEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "project_column"))]
impl std::fmt::Display for WebhookProjectColumnEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectColumnEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectColumnMovedAction {
  #[serde(rename = "moved")]
  Moved,
}

#[cfg(any(feature = "full", feature = "project_column"))]
impl std::fmt::Display for WebhookProjectColumnMovedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectColumnMovedAction::Moved => write!(f, "moved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for WebhookProjectCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for WebhookProjectDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for WebhookProjectEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "project"))]
impl std::fmt::Display for WebhookProjectReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ProjectClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
impl std::fmt::Display for WebhookProjectsV2ProjectClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ProjectClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ProjectCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
impl std::fmt::Display for WebhookProjectsV2ProjectCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ProjectCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ProjectDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
impl std::fmt::Display for WebhookProjectsV2ProjectDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ProjectDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ProjectEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
impl std::fmt::Display for WebhookProjectsV2ProjectEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ProjectEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemArchivedAction {
  #[serde(rename = "archived")]
  Archived,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemArchivedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemArchivedAction::Archived => write!(f, "archived"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
/// The type of content tracked in a project item
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum ProjectsV2ItemContentType {
  Issue,
  PullRequest,
  DraftIssue,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for ProjectsV2ItemContentType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      ProjectsV2ItemContentType::Issue => write!(f, "Issue"),
      ProjectsV2ItemContentType::PullRequest => write!(f, "PullRequest"),
      ProjectsV2ItemContentType::DraftIssue => write!(f, "DraftIssue"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemConvertedAction {
  #[serde(rename = "converted")]
  Converted,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemConvertedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemConvertedAction::Converted => write!(f, "converted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectsV2ItemEditedChanges {
  WebhookProjectsV2ItemEditedChangesItem1(WebhookProjectsV2ItemEditedChangesItem1),
  WebhookProjectsV2ItemEditedChangesItem2(WebhookProjectsV2ItemEditedChangesItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemReorderedAction {
  #[serde(rename = "reordered")]
  Reordered,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemReorderedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemReorderedAction::Reordered => write!(f, "reordered"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ItemRestoredAction {
  #[serde(rename = "restored")]
  Restored,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
impl std::fmt::Display for WebhookProjectsV2ItemRestoredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ItemRestoredAction::Restored => write!(f, "restored"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookProjectsV2ProjectReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
impl std::fmt::Display for WebhookProjectsV2ProjectReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookProjectsV2ProjectReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestAssignedAction {
  #[serde(rename = "assigned")]
  Assigned,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestAssignedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestAssignedAction::Assigned => write!(f, "assigned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for PullRequestActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestActiveLockReason::Resolved => write!(f, "resolved"),
      PullRequestActiveLockReason::OffTopic => write!(f, "off-topic"),
      PullRequestActiveLockReason::TooHeated => write!(f, "too heated"),
      PullRequestActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for PullRequestAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      PullRequestAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      PullRequestAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      PullRequestAuthorAssociation::FirstTimeContributor => write!(f, "FIRST_TIME_CONTRIBUTOR"),
      PullRequestAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      PullRequestAuthorAssociation::Member => write!(f, "MEMBER"),
      PullRequestAuthorAssociation::None => write!(f, "NONE"),
      PullRequestAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// The merge method to use.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestAutoMergeMergeMethod {
  #[serde(rename = "merge")]
  Merge,
  #[serde(rename = "squash")]
  Squash,
  #[serde(rename = "rebase")]
  Rebase,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for PullRequestAutoMergeMergeMethod {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestAutoMergeMergeMethod::Merge => write!(f, "merge"),
      PullRequestAutoMergeMergeMethod::Squash => write!(f, "squash"),
      PullRequestAutoMergeMergeMethod::Rebase => write!(f, "rebase"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestAutoMergeDisabledAction {
  #[serde(rename = "auto_merge_disabled")]
  AutoMergeDisabled,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestAutoMergeDisabledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestAutoMergeDisabledAction::AutoMergeDisabled => {
        write!(f, "auto_merge_disabled")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestAutoMergeEnabledAction {
  #[serde(rename = "auto_merge_enabled")]
  AutoMergeEnabled,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestAutoMergeEnabledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestAutoMergeEnabledAction::AutoMergeEnabled => write!(f, "auto_merge_enabled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestClosedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestClosedAction::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestClosedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestClosedPullRequestItem2(WebhookPullRequestClosedPullRequestItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestConvertedToDraftAction {
  #[serde(rename = "converted_to_draft")]
  ConvertedToDraft,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestConvertedToDraftAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestConvertedToDraftAction::ConvertedToDraft => write!(f, "converted_to_draft"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestConvertedToDraftPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestConvertedToDraftPullRequestItem2(
    WebhookPullRequestConvertedToDraftPullRequestItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestDemilestonedAction {
  #[serde(rename = "demilestoned")]
  Demilestoned,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestDemilestonedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestDemilestonedAction::Demilestoned => write!(f, "demilestoned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestDequeuedAction {
  #[serde(rename = "dequeued")]
  Dequeued,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestDequeuedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestDequeuedAction::Dequeued => write!(f, "dequeued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestEditedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestEditedPullRequestItem2(WebhookPullRequestEditedPullRequestItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestEnqueuedAction {
  #[serde(rename = "enqueued")]
  Enqueued,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestEnqueuedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestEnqueuedAction::Enqueued => write!(f, "enqueued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestLabeledAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestLabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestLabeledAction::Labeled => write!(f, "labeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestLockedAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestLockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestLockedAction::Locked => write!(f, "locked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestMilestonedAction {
  #[serde(rename = "milestoned")]
  Milestoned,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestMilestonedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestMilestonedAction::Milestoned => write!(f, "milestoned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestOpenedAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestOpenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestOpenedAction::Opened => write!(f, "opened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestOpenedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestOpenedPullRequestItem2(WebhookPullRequestOpenedPullRequestItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReadyForReviewAction {
  #[serde(rename = "ready_for_review")]
  ReadyForReview,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReadyForReviewAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReadyForReviewAction::ReadyForReview => write!(f, "ready_for_review"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReadyForReviewPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestReadyForReviewPullRequestItem2(
    WebhookPullRequestReadyForReviewPullRequestItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReopenedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestReopenedPullRequestItem2(WebhookPullRequestReopenedPullRequestItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestReviewCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for PullRequestReviewCommentAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestReviewCommentAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      PullRequestReviewCommentAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      PullRequestReviewCommentAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      PullRequestReviewCommentAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      PullRequestReviewCommentAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      PullRequestReviewCommentAuthorAssociation::Member => write!(f, "MEMBER"),
      PullRequestReviewCommentAuthorAssociation::None => write!(f, "NONE"),
      PullRequestReviewCommentAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
/// The side of the first line of the range for a multi-line comment.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestReviewCommentSide {
  #[serde(rename = "LEFT")]
  Left,
  #[serde(rename = "RIGHT")]
  Right,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for PullRequestReviewCommentSide {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestReviewCommentSide::Left => write!(f, "LEFT"),
      PullRequestReviewCommentSide::Right => write!(f, "RIGHT"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
/// The side of the first line of the range for a multi-line comment.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestReviewCommentStartSide {
  #[serde(rename = "LEFT")]
  Left,
  #[serde(rename = "RIGHT")]
  Right,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for PullRequestReviewCommentStartSide {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestReviewCommentStartSide::Left => write!(f, "LEFT"),
      PullRequestReviewCommentStartSide::Right => write!(f, "RIGHT"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
/// The level at which the comment is targeted, can be a diff line or a file.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum PullRequestReviewCommentSubjectType {
  #[serde(rename = "line")]
  Line,
  #[serde(rename = "file")]
  File,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for PullRequestReviewCommentSubjectType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      PullRequestReviewCommentSubjectType::Line => write!(f, "line"),
      PullRequestReviewCommentSubjectType::File => write!(f, "file"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::Resolved => {
        write!(f, "resolved")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::OffTopic => {
        write!(f, "off-topic")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::TooHeated => {
        write!(f, "too heated")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Mannequin => {
        write!(f, "MANNEQUIN")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Member => {
        write!(f, "MEMBER")
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Owner => {
        write!(f, "OWNER")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentCreatedPullRequestState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestState::Open => write!(f, "open"),
      WebhookPullRequestReviewCommentCreatedPullRequestState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::Resolved => {
        write!(f, "resolved")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::OffTopic => {
        write!(f, "off-topic")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::TooHeated => {
        write!(f, "too heated")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Mannequin => {
        write!(f, "MANNEQUIN")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Member => {
        write!(f, "MEMBER")
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Owner => {
        write!(f, "OWNER")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentDeletedPullRequestState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestState::Open => write!(f, "open"),
      WebhookPullRequestReviewCommentDeletedPullRequestState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::Resolved => {
        write!(f, "resolved")
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::OffTopic => {
        write!(f, "off-topic")
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::TooHeated => {
        write!(f, "too heated")
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Mannequin => {
        write!(f, "MANNEQUIN")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Member => {
        write!(f, "MEMBER")
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Owner => {
        write!(f, "OWNER")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
impl std::fmt::Display for WebhookPullRequestReviewCommentEditedPullRequestState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestState::Open => write!(f, "open"),
      WebhookPullRequestReviewCommentEditedPullRequestState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewDismissedAction {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewDismissedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewDismissedAction::Dismissed => write!(f, "dismissed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SimplePullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for SimplePullRequestActiveLockReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SimplePullRequestActiveLockReason::Resolved => write!(f, "resolved"),
      SimplePullRequestActiveLockReason::OffTopic => write!(f, "off-topic"),
      SimplePullRequestActiveLockReason::TooHeated => write!(f, "too heated"),
      SimplePullRequestActiveLockReason::Spam => write!(f, "spam"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SimplePullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for SimplePullRequestAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SimplePullRequestAuthorAssociation::Collaborator => write!(f, "COLLABORATOR"),
      SimplePullRequestAuthorAssociation::Contributor => write!(f, "CONTRIBUTOR"),
      SimplePullRequestAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      SimplePullRequestAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      SimplePullRequestAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      SimplePullRequestAuthorAssociation::Member => write!(f, "MEMBER"),
      SimplePullRequestAuthorAssociation::None => write!(f, "NONE"),
      SimplePullRequestAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SimplePullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
impl std::fmt::Display for SimplePullRequestState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SimplePullRequestState::Open => write!(f, "open"),
      SimplePullRequestState::Closed => write!(f, "closed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewDismissedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewDismissedReviewAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewDismissedReviewState {
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "approved")]
  Approved,
  #[serde(rename = "changes_requested")]
  ChangesRequested,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewDismissedReviewState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewDismissedReviewState::Dismissed => write!(f, "dismissed"),
      WebhookPullRequestReviewDismissedReviewState::Approved => write!(f, "approved"),
      WebhookPullRequestReviewDismissedReviewState::ChangesRequested => {
        write!(f, "changes_requested")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewEditedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewEditedReviewAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::FirstTimer => write!(f, "FIRST_TIMER"),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewRequestRemovedItem1Action {
  #[serde(rename = "review_request_removed")]
  ReviewRequestRemoved,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReviewRequestRemovedItem1Action {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewRequestRemovedItem1Action::ReviewRequestRemoved => {
        write!(f, "review_request_removed")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewRequestRemovedItem2Action {
  #[serde(rename = "review_request_removed")]
  ReviewRequestRemoved,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReviewRequestRemovedItem2Action {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewRequestRemovedItem2Action::ReviewRequestRemoved => {
        write!(f, "review_request_removed")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewRequestRemoved {
  WebhookPullRequestReviewRequestRemovedItem1(WebhookPullRequestReviewRequestRemovedItem1),
  WebhookPullRequestReviewRequestRemovedItem2(WebhookPullRequestReviewRequestRemovedItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewRequestedItem1Action {
  #[serde(rename = "review_requested")]
  ReviewRequested,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReviewRequestedItem1Action {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewRequestedItem1Action::ReviewRequested => {
        write!(f, "review_requested")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewRequestedItem2Action {
  #[serde(rename = "review_requested")]
  ReviewRequested,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestReviewRequestedItem2Action {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewRequestedItem2Action::ReviewRequested => {
        write!(f, "review_requested")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewRequested {
  WebhookPullRequestReviewRequestedItem1(WebhookPullRequestReviewRequestedItem1),
  WebhookPullRequestReviewRequestedItem2(WebhookPullRequestReviewRequestedItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewSubmittedAction {
  #[serde(rename = "submitted")]
  Submitted,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewSubmittedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewSubmittedAction::Submitted => write!(f, "submitted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewSubmittedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
impl std::fmt::Display for WebhookPullRequestReviewSubmittedReviewAuthorAssociation {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Collaborator => {
        write!(f, "COLLABORATOR")
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Contributor => {
        write!(f, "CONTRIBUTOR")
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::FirstTimer => {
        write!(f, "FIRST_TIMER")
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::FirstTimeContributor => {
        write!(f, "FIRST_TIME_CONTRIBUTOR")
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Mannequin => write!(f, "MANNEQUIN"),
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Member => write!(f, "MEMBER"),
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::None => write!(f, "NONE"),
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Owner => write!(f, "OWNER"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewThreadResolvedAction {
  #[serde(rename = "resolved")]
  Resolved,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
impl std::fmt::Display for WebhookPullRequestReviewThreadResolvedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewThreadResolvedAction::Resolved => write!(f, "resolved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestReviewThreadUnresolvedAction {
  #[serde(rename = "unresolved")]
  Unresolved,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
impl std::fmt::Display for WebhookPullRequestReviewThreadUnresolvedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestReviewThreadUnresolvedAction::Unresolved => write!(f, "unresolved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestSynchronizeAction {
  #[serde(rename = "synchronize")]
  Synchronize,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestSynchronizeAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestSynchronizeAction::Synchronize => write!(f, "synchronize"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestUnassignedAction {
  #[serde(rename = "unassigned")]
  Unassigned,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestUnassignedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestUnassignedAction::Unassigned => write!(f, "unassigned"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestUnlabeledAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestUnlabeledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestUnlabeledAction::Unlabeled => write!(f, "unlabeled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookPullRequestUnlockedAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
impl std::fmt::Display for WebhookPullRequestUnlockedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookPullRequestUnlockedAction::Unlocked => write!(f, "unlocked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRegistryPackagePublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
impl std::fmt::Display for WebhookRegistryPackagePublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRegistryPackagePublishedAction::Published => write!(f, "published"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRegistryPackageUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
impl std::fmt::Display for WebhookRegistryPackageUpdatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRegistryPackageUpdatedAction::Updated => write!(f, "updated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleaseCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleaseCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleaseCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
/// State of the release asset.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum ReleaseAssetState {
  #[serde(rename = "uploaded")]
  Uploaded,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for ReleaseAssetState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      ReleaseAssetState::Uploaded => write!(f, "uploaded"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleaseDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleaseDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleaseDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleaseEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleaseEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleaseEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleasePrereleasedAction {
  #[serde(rename = "prereleased")]
  Prereleased,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleasePrereleasedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleasePrereleasedAction::Prereleased => write!(f, "prereleased"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
/// Whether the release is identified as a prerelease or a full release.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum WebhookReleasePrereleasedReleaseItem2Prerelease {
  Boolean(bool),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookReleasePrereleasedRelease {
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  Release(Release),
  WebhookReleasePrereleasedReleaseItem2(WebhookReleasePrereleasedReleaseItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleasePublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleasePublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleasePublishedAction::Published => write!(f, "published"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookReleasePublishedRelease {
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  Release(Release),
  WebhookReleasePublishedReleaseItem2(WebhookReleasePublishedReleaseItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleaseReleasedAction {
  #[serde(rename = "released")]
  Released,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleaseReleasedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleaseReleasedAction::Released => write!(f, "released"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookReleaseUnpublishedAction {
  #[serde(rename = "unpublished")]
  Unpublished,
}

#[cfg(any(feature = "full", feature = "release"))]
impl std::fmt::Display for WebhookReleaseUnpublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookReleaseUnpublishedAction::Unpublished => write!(f, "unpublished"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookReleaseUnpublishedRelease {
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  Release(Release),
  WebhookReleaseUnpublishedReleaseItem2(WebhookReleaseUnpublishedReleaseItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryAdvisoryPublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for WebhookRepositoryAdvisoryPublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryAdvisoryPublishedAction::Published => write!(f, "published"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The type of credit the user is receiving.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAdvisoryCreditTypes {
  #[serde(rename = "analyst")]
  Analyst,
  #[serde(rename = "finder")]
  Finder,
  #[serde(rename = "reporter")]
  Reporter,
  #[serde(rename = "coordinator")]
  Coordinator,
  #[serde(rename = "remediation_developer")]
  RemediationDeveloper,
  #[serde(rename = "remediation_reviewer")]
  RemediationReviewer,
  #[serde(rename = "remediation_verifier")]
  RemediationVerifier,
  #[serde(rename = "tool")]
  Tool,
  #[serde(rename = "sponsor")]
  Sponsor,
  #[serde(rename = "other")]
  Other,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for SecurityAdvisoryCreditTypes {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAdvisoryCreditTypes::Analyst => write!(f, "analyst"),
      SecurityAdvisoryCreditTypes::Finder => write!(f, "finder"),
      SecurityAdvisoryCreditTypes::Reporter => write!(f, "reporter"),
      SecurityAdvisoryCreditTypes::Coordinator => write!(f, "coordinator"),
      SecurityAdvisoryCreditTypes::RemediationDeveloper => write!(f, "remediation_developer"),
      SecurityAdvisoryCreditTypes::RemediationReviewer => write!(f, "remediation_reviewer"),
      SecurityAdvisoryCreditTypes::RemediationVerifier => write!(f, "remediation_verifier"),
      SecurityAdvisoryCreditTypes::Tool => write!(f, "tool"),
      SecurityAdvisoryCreditTypes::Sponsor => write!(f, "sponsor"),
      SecurityAdvisoryCreditTypes::Other => write!(f, "other"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The state of the user's acceptance of the credit.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryAdvisoryCreditState {
  #[serde(rename = "accepted")]
  Accepted,
  #[serde(rename = "declined")]
  Declined,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for RepositoryAdvisoryCreditState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryAdvisoryCreditState::Accepted => write!(f, "accepted"),
      RepositoryAdvisoryCreditState::Declined => write!(f, "declined"),
      RepositoryAdvisoryCreditState::Pending => write!(f, "pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The severity of the advisory.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryAdvisorySeverity {
  #[serde(rename = "critical")]
  Critical,
  #[serde(rename = "high")]
  High,
  #[serde(rename = "medium")]
  Medium,
  #[serde(rename = "low")]
  Low,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for RepositoryAdvisorySeverity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryAdvisorySeverity::Critical => write!(f, "critical"),
      RepositoryAdvisorySeverity::High => write!(f, "high"),
      RepositoryAdvisorySeverity::Medium => write!(f, "medium"),
      RepositoryAdvisorySeverity::Low => write!(f, "low"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The state of the advisory.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryAdvisoryState {
  #[serde(rename = "published")]
  Published,
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "withdrawn")]
  Withdrawn,
  #[serde(rename = "draft")]
  Draft,
  #[serde(rename = "triage")]
  Triage,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for RepositoryAdvisoryState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryAdvisoryState::Published => write!(f, "published"),
      RepositoryAdvisoryState::Closed => write!(f, "closed"),
      RepositoryAdvisoryState::Withdrawn => write!(f, "withdrawn"),
      RepositoryAdvisoryState::Draft => write!(f, "draft"),
      RepositoryAdvisoryState::Triage => write!(f, "triage"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The package's language or package management ecosystem.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecurityAdvisoryEcosystems {
  #[serde(rename = "rubygems")]
  Rubygems,
  #[serde(rename = "npm")]
  Npm,
  #[serde(rename = "pip")]
  Pip,
  #[serde(rename = "maven")]
  Maven,
  #[serde(rename = "nuget")]
  Nuget,
  #[serde(rename = "composer")]
  Composer,
  #[serde(rename = "go")]
  Go,
  #[serde(rename = "rust")]
  Rust,
  #[serde(rename = "erlang")]
  Erlang,
  #[serde(rename = "actions")]
  Actions,
  #[serde(rename = "pub")]
  Pub,
  #[serde(rename = "other")]
  Other,
  #[serde(rename = "swift")]
  Swift,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for SecurityAdvisoryEcosystems {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecurityAdvisoryEcosystems::Rubygems => write!(f, "rubygems"),
      SecurityAdvisoryEcosystems::Npm => write!(f, "npm"),
      SecurityAdvisoryEcosystems::Pip => write!(f, "pip"),
      SecurityAdvisoryEcosystems::Maven => write!(f, "maven"),
      SecurityAdvisoryEcosystems::Nuget => write!(f, "nuget"),
      SecurityAdvisoryEcosystems::Composer => write!(f, "composer"),
      SecurityAdvisoryEcosystems::Go => write!(f, "go"),
      SecurityAdvisoryEcosystems::Rust => write!(f, "rust"),
      SecurityAdvisoryEcosystems::Erlang => write!(f, "erlang"),
      SecurityAdvisoryEcosystems::Actions => write!(f, "actions"),
      SecurityAdvisoryEcosystems::Pub => write!(f, "pub"),
      SecurityAdvisoryEcosystems::Other => write!(f, "other"),
      SecurityAdvisoryEcosystems::Swift => write!(f, "swift"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryAdvisoryReportedAction {
  #[serde(rename = "reported")]
  Reported,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
impl std::fmt::Display for WebhookRepositoryAdvisoryReportedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryAdvisoryReportedAction::Reported => write!(f, "reported"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryArchivedAction {
  #[serde(rename = "archived")]
  Archived,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryArchivedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryArchivedAction::Archived => write!(f, "archived"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_import"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryImportStatus {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "failure")]
  Failure,
}

#[cfg(any(feature = "full", feature = "repository_import"))]
impl std::fmt::Display for WebhookRepositoryImportStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryImportStatus::Success => write!(f, "success"),
      WebhookRepositoryImportStatus::Cancelled => write!(f, "cancelled"),
      WebhookRepositoryImportStatus::Failure => write!(f, "failure"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryPrivatizedAction {
  #[serde(rename = "privatized")]
  Privatized,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryPrivatizedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryPrivatizedAction::Privatized => write!(f, "privatized"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryPublicizedAction {
  #[serde(rename = "publicized")]
  Publicized,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryPublicizedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryPublicizedAction::Publicized => write!(f, "publicized"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryRenamedAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryRenamedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryRenamedAction::Renamed => write!(f, "renamed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryRulesetCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for WebhookRepositoryRulesetCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryRulesetCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// The type of actor that can bypass a ruleset
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulesetBypassActorActorType {
  RepositoryRole,
  Team,
  Integration,
  OrganizationAdmin,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulesetBypassActorActorType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulesetBypassActorActorType::RepositoryRole => write!(f, "RepositoryRole"),
      RepositoryRulesetBypassActorActorType::Team => write!(f, "Team"),
      RepositoryRulesetBypassActorActorType::Integration => write!(f, "Integration"),
      RepositoryRulesetBypassActorActorType::OrganizationAdmin => write!(f, "OrganizationAdmin"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulesetBypassActorBypassMode {
  #[serde(rename = "always")]
  Always,
  #[serde(rename = "pull_request")]
  PullRequest,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulesetBypassActorBypassMode {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulesetBypassActorBypassMode::Always => write!(f, "always"),
      RepositoryRulesetBypassActorBypassMode::PullRequest => write!(f, "pull_request"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgRulesetConditionsItem1 {
  /// Parameters for a repository ruleset ref name condition
  RepositoryRulesetConditions(RepositoryRulesetConditions),
  /// Parameters for a repository name condition
  RepositoryRulesetConditionsRepositoryNameTarget(RepositoryRulesetConditionsRepositoryNameTarget),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgRulesetConditionsItem2 {
  /// Parameters for a repository ruleset ref name condition
  RepositoryRulesetConditions(RepositoryRulesetConditions),
  /// Parameters for a repository ID condition
  RepositoryRulesetConditionsRepositoryIdTarget(RepositoryRulesetConditionsRepositoryIdTarget),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgRulesetConditionsItem3 {
  /// Parameters for a repository ruleset ref name condition
  RepositoryRulesetConditions(RepositoryRulesetConditions),
  /// Parameters for a repository property condition
  RepositoryRulesetConditionsRepositoryPropertyTarget(
    RepositoryRulesetConditionsRepositoryPropertyTarget,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgRulesetConditions {
  OrgRulesetConditionsItem1(OrgRulesetConditionsItem1),
  OrgRulesetConditionsItem2(OrgRulesetConditionsItem2),
  OrgRulesetConditionsItem3(OrgRulesetConditionsItem3),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// The bypass type of the user making the API request for this ruleset. This field is only returned when
/// querying the repository-level endpoint.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulesetCurrentUserCanBypass {
  #[serde(rename = "always")]
  Always,
  #[serde(rename = "pull_requests_only")]
  PullRequestsOnly,
  #[serde(rename = "never")]
  Never,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulesetCurrentUserCanBypass {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulesetCurrentUserCanBypass::Always => write!(f, "always"),
      RepositoryRulesetCurrentUserCanBypass::PullRequestsOnly => write!(f, "pull_requests_only"),
      RepositoryRulesetCurrentUserCanBypass::Never => write!(f, "never"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleEnforcement {
  #[serde(rename = "disabled")]
  Disabled,
  #[serde(rename = "active")]
  Active,
  #[serde(rename = "evaluate")]
  Evaluate,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleEnforcement {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleEnforcement::Disabled => write!(f, "disabled"),
      RepositoryRuleEnforcement::Active => write!(f, "active"),
      RepositoryRuleEnforcement::Evaluate => write!(f, "evaluate"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleCreationType {
  #[serde(rename = "creation")]
  Creation,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleCreationType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleCreationType::Creation => write!(f, "creation"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleUpdateType {
  #[serde(rename = "update")]
  Update,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleUpdateType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleUpdateType::Update => write!(f, "update"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleDeletionType {
  #[serde(rename = "deletion")]
  Deletion,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleDeletionType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleDeletionType::Deletion => write!(f, "deletion"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleRequiredLinearHistoryType {
  #[serde(rename = "required_linear_history")]
  RequiredLinearHistory,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleRequiredLinearHistoryType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleRequiredLinearHistoryType::RequiredLinearHistory => {
        write!(f, "required_linear_history")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleRequiredDeploymentsType {
  #[serde(rename = "required_deployments")]
  RequiredDeployments,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleRequiredDeploymentsType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleRequiredDeploymentsType::RequiredDeployments => {
        write!(f, "required_deployments")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleRequiredSignaturesType {
  #[serde(rename = "required_signatures")]
  RequiredSignatures,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleRequiredSignaturesType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleRequiredSignaturesType::RequiredSignatures => write!(f, "required_signatures"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulePullRequestType {
  #[serde(rename = "pull_request")]
  PullRequest,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulePullRequestType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulePullRequestType::PullRequest => write!(f, "pull_request"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleRequiredStatusChecksType {
  #[serde(rename = "required_status_checks")]
  RequiredStatusChecks,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleRequiredStatusChecksType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleRequiredStatusChecksType::RequiredStatusChecks => {
        write!(f, "required_status_checks")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleNonFastForwardType {
  #[serde(rename = "non_fast_forward")]
  NonFastForward,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleNonFastForwardType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleNonFastForwardType::NonFastForward => write!(f, "non_fast_forward"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleCommitMessagePatternType {
  #[serde(rename = "commit_message_pattern")]
  CommitMessagePattern,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleCommitMessagePatternType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleCommitMessagePatternType::CommitMessagePattern => {
        write!(f, "commit_message_pattern")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleCommitAuthorEmailPatternType {
  #[serde(rename = "commit_author_email_pattern")]
  CommitAuthorEmailPattern,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleCommitAuthorEmailPatternType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleCommitAuthorEmailPatternType::CommitAuthorEmailPattern => {
        write!(f, "commit_author_email_pattern")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleCommitterEmailPatternType {
  #[serde(rename = "committer_email_pattern")]
  CommitterEmailPattern,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleCommitterEmailPatternType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleCommitterEmailPatternType::CommitterEmailPattern => {
        write!(f, "committer_email_pattern")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleBranchNamePatternType {
  #[serde(rename = "branch_name_pattern")]
  BranchNamePattern,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleBranchNamePatternType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleBranchNamePatternType::BranchNamePattern => write!(f, "branch_name_pattern"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleTagNamePatternType {
  #[serde(rename = "tag_name_pattern")]
  TagNamePattern,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleTagNamePatternType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleTagNamePatternType::TagNamePattern => write!(f, "tag_name_pattern"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRuleWorkflowsType {
  #[serde(rename = "workflows")]
  Workflows,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRuleWorkflowsType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRuleWorkflowsType::Workflows => write!(f, "workflows"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RepositoryRule {
  /// Only allow users with bypass permission to create matching refs.
  RepositoryRuleCreation(RepositoryRuleCreation),
  /// Only allow users with bypass permission to update matching refs.
  RepositoryRuleUpdate(RepositoryRuleUpdate),
  /// Only allow users with bypass permissions to delete matching refs.
  RepositoryRuleDeletion(RepositoryRuleDeletion),
  /// Prevent merge commits from being pushed to matching refs.
  RepositoryRuleRequiredLinearHistory(RepositoryRuleRequiredLinearHistory),
  /// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
  RepositoryRuleRequiredDeployments(RepositoryRuleRequiredDeployments),
  /// Commits pushed to matching refs must have verified signatures.
  RepositoryRuleRequiredSignatures(RepositoryRuleRequiredSignatures),
  /// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
  RepositoryRulePullRequest(RepositoryRulePullRequest),
  /// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
  RepositoryRuleRequiredStatusChecks(RepositoryRuleRequiredStatusChecks),
  /// Prevent users with push access from force pushing to refs.
  RepositoryRuleNonFastForward(RepositoryRuleNonFastForward),
  /// Parameters to be used for the commit_message_pattern rule
  RepositoryRuleCommitMessagePattern(RepositoryRuleCommitMessagePattern),
  /// Parameters to be used for the commit_author_email_pattern rule
  RepositoryRuleCommitAuthorEmailPattern(RepositoryRuleCommitAuthorEmailPattern),
  /// Parameters to be used for the committer_email_pattern rule
  RepositoryRuleCommitterEmailPattern(RepositoryRuleCommitterEmailPattern),
  /// Parameters to be used for the branch_name_pattern rule
  RepositoryRuleBranchNamePattern(RepositoryRuleBranchNamePattern),
  /// Parameters to be used for the tag_name_pattern rule
  RepositoryRuleTagNamePattern(RepositoryRuleTagNamePattern),
  /// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
  RepositoryRuleWorkflows(RepositoryRuleWorkflows),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// The type of the source of the ruleset
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulesetSourceType {
  Repository,
  Organization,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulesetSourceType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulesetSourceType::Repository => write!(f, "Repository"),
      RepositoryRulesetSourceType::Organization => write!(f, "Organization"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// The target of the ruleset
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryRulesetTarget {
  #[serde(rename = "branch")]
  Branch,
  #[serde(rename = "tag")]
  Tag,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for RepositoryRulesetTarget {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryRulesetTarget::Branch => write!(f, "branch"),
      RepositoryRulesetTarget::Tag => write!(f, "tag"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryRulesetDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for WebhookRepositoryRulesetDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryRulesetDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryRulesetEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
impl std::fmt::Display for WebhookRepositoryRulesetEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryRulesetEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryTransferredAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryTransferredAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryTransferredAction::Transferred => write!(f, "transferred"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryUnarchivedAction {
  #[serde(rename = "unarchived")]
  Unarchived,
}

#[cfg(any(feature = "full", feature = "repository"))]
impl std::fmt::Display for WebhookRepositoryUnarchivedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryUnarchivedAction::Unarchived => write!(f, "unarchived"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAction {
  #[serde(rename = "create")]
  Create,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertCreateAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertCreateAction::Create => write!(f, "create"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum RepositoryVulnerabilityAlertAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for RepositoryVulnerabilityAlertAlertState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      RepositoryVulnerabilityAlertAlertState::Open => write!(f, "open"),
      RepositoryVulnerabilityAlertAlertState::Dismissed => write!(f, "dismissed"),
      RepositoryVulnerabilityAlertAlertState::Fixed => write!(f, "fixed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAlertItem2State {
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertCreateAlertItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertCreateAlertItem2State::Open => write!(f, "open"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertCreateAlertItem2(
    WebhookRepositoryVulnerabilityAlertCreateAlertItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAction {
  #[serde(rename = "dismiss")]
  Dismiss,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertDismissAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertDismissAction::Dismiss => write!(f, "dismiss"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAlertItem2State {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertDismissAlertItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertDismissAlertItem2State::Dismissed => {
        write!(f, "dismissed")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertDismissAlertItem2(
    WebhookRepositoryVulnerabilityAlertDismissAlertItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAction {
  #[serde(rename = "reopen")]
  Reopen,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertReopenAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertReopenAction::Reopen => write!(f, "reopen"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAlertItem2State {
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertReopenAlertItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertReopenAlertItem2State::Open => write!(f, "open"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertReopenAlertItem2(
    WebhookRepositoryVulnerabilityAlertReopenAlertItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAction {
  #[serde(rename = "resolve")]
  Resolve,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertResolveAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertResolveAction::Resolve => write!(f, "resolve"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAlertItem2State {
  #[serde(rename = "fixed")]
  Fixed,
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
impl std::fmt::Display for WebhookRepositoryVulnerabilityAlertResolveAlertItem2State {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookRepositoryVulnerabilityAlertResolveAlertItem2State::Fixed => write!(f, "fixed"),
      WebhookRepositoryVulnerabilityAlertResolveAlertItem2State::Open => write!(f, "open"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertResolveAlertItem2(
    WebhookRepositoryVulnerabilityAlertResolveAlertItem2,
  ),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
impl std::fmt::Display for WebhookSecretScanningAlertCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location"
))]
/// The reason for resolving the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecretScanningAlertResolutionWebhook {
  #[serde(rename = "false_positive")]
  FalsePositive,
  #[serde(rename = "wont_fix")]
  WontFix,
  #[serde(rename = "revoked")]
  Revoked,
  #[serde(rename = "used_in_tests")]
  UsedInTests,
  #[serde(rename = "pattern_deleted")]
  PatternDeleted,
  #[serde(rename = "pattern_edited")]
  PatternEdited,
}

#[cfg(any(
  feature = "full",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location"
))]
impl std::fmt::Display for SecretScanningAlertResolutionWebhook {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecretScanningAlertResolutionWebhook::FalsePositive => write!(f, "false_positive"),
      SecretScanningAlertResolutionWebhook::WontFix => write!(f, "wont_fix"),
      SecretScanningAlertResolutionWebhook::Revoked => write!(f, "revoked"),
      SecretScanningAlertResolutionWebhook::UsedInTests => write!(f, "used_in_tests"),
      SecretScanningAlertResolutionWebhook::PatternDeleted => write!(f, "pattern_deleted"),
      SecretScanningAlertResolutionWebhook::PatternEdited => write!(f, "pattern_edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(
  feature = "full",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location"
))]
/// The token status as of the latest validity check.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecretScanningAlertWebhookValidity {
  #[serde(rename = "active")]
  Active,
  #[serde(rename = "inactive")]
  Inactive,
  #[serde(rename = "unknown")]
  Unknown,
}

#[cfg(any(
  feature = "full",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location"
))]
impl std::fmt::Display for SecretScanningAlertWebhookValidity {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecretScanningAlertWebhookValidity::Active => write!(f, "active"),
      SecretScanningAlertWebhookValidity::Inactive => write!(f, "inactive"),
      SecretScanningAlertWebhookValidity::Unknown => write!(f, "unknown"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertLocationCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
impl std::fmt::Display for WebhookSecretScanningAlertLocationCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertLocationCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SecretScanningLocationDetails {
  /// Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
  SecretScanningLocationCommit(SecretScanningLocationCommit),
  /// Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
  SecretScanningLocationWikiCommit(SecretScanningLocationWikiCommit),
  /// Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
  SecretScanningLocationIssueTitle(SecretScanningLocationIssueTitle),
  /// Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
  SecretScanningLocationIssueBody(SecretScanningLocationIssueBody),
  /// Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
  SecretScanningLocationIssueComment(SecretScanningLocationIssueComment),
  /// Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
  SecretScanningLocationDiscussionTitle(SecretScanningLocationDiscussionTitle),
  /// Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
  SecretScanningLocationDiscussionBody(SecretScanningLocationDiscussionBody),
  /// Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
  SecretScanningLocationDiscussionComment(SecretScanningLocationDiscussionComment),
  /// Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
  SecretScanningLocationPullRequestTitle(SecretScanningLocationPullRequestTitle),
  /// Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
  SecretScanningLocationPullRequestBody(SecretScanningLocationPullRequestBody),
  /// Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
  SecretScanningLocationPullRequestComment(SecretScanningLocationPullRequestComment),
  /// Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
  SecretScanningLocationPullRequestReview(SecretScanningLocationPullRequestReview),
  /// Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
  SecretScanningLocationPullRequestReviewComment(SecretScanningLocationPullRequestReviewComment),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum SecretScanningLocationType {
  #[serde(rename = "commit")]
  Commit,
  #[serde(rename = "wiki_commit")]
  WikiCommit,
  #[serde(rename = "issue_title")]
  IssueTitle,
  #[serde(rename = "issue_body")]
  IssueBody,
  #[serde(rename = "issue_comment")]
  IssueComment,
  #[serde(rename = "discussion_title")]
  DiscussionTitle,
  #[serde(rename = "discussion_body")]
  DiscussionBody,
  #[serde(rename = "discussion_comment")]
  DiscussionComment,
  #[serde(rename = "pull_request_title")]
  PullRequestTitle,
  #[serde(rename = "pull_request_body")]
  PullRequestBody,
  #[serde(rename = "pull_request_comment")]
  PullRequestComment,
  #[serde(rename = "pull_request_review")]
  PullRequestReview,
  #[serde(rename = "pull_request_review_comment")]
  PullRequestReviewComment,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
impl std::fmt::Display for SecretScanningLocationType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      SecretScanningLocationType::Commit => write!(f, "commit"),
      SecretScanningLocationType::WikiCommit => write!(f, "wiki_commit"),
      SecretScanningLocationType::IssueTitle => write!(f, "issue_title"),
      SecretScanningLocationType::IssueBody => write!(f, "issue_body"),
      SecretScanningLocationType::IssueComment => write!(f, "issue_comment"),
      SecretScanningLocationType::DiscussionTitle => write!(f, "discussion_title"),
      SecretScanningLocationType::DiscussionBody => write!(f, "discussion_body"),
      SecretScanningLocationType::DiscussionComment => write!(f, "discussion_comment"),
      SecretScanningLocationType::PullRequestTitle => write!(f, "pull_request_title"),
      SecretScanningLocationType::PullRequestBody => write!(f, "pull_request_body"),
      SecretScanningLocationType::PullRequestComment => write!(f, "pull_request_comment"),
      SecretScanningLocationType::PullRequestReview => write!(f, "pull_request_review"),
      SecretScanningLocationType::PullRequestReviewComment => {
        write!(f, "pull_request_review_comment")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
impl std::fmt::Display for WebhookSecretScanningAlertReopenedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertReopenedAction::Reopened => write!(f, "reopened"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertResolvedAction {
  #[serde(rename = "resolved")]
  Resolved,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
impl std::fmt::Display for WebhookSecretScanningAlertResolvedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertResolvedAction::Resolved => write!(f, "resolved"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertRevokedAction {
  #[serde(rename = "revoked")]
  Revoked,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
impl std::fmt::Display for WebhookSecretScanningAlertRevokedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertRevokedAction::Revoked => write!(f, "revoked"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecretScanningAlertValidatedAction {
  #[serde(rename = "validated")]
  Validated,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
impl std::fmt::Display for WebhookSecretScanningAlertValidatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecretScanningAlertValidatedAction::Validated => write!(f, "validated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecurityAdvisoryPublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
impl std::fmt::Display for WebhookSecurityAdvisoryPublishedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecurityAdvisoryPublishedAction::Published => write!(f, "published"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecurityAdvisoryUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
impl std::fmt::Display for WebhookSecurityAdvisoryUpdatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecurityAdvisoryUpdatedAction::Updated => write!(f, "updated"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSecurityAdvisoryWithdrawnAction {
  #[serde(rename = "withdrawn")]
  Withdrawn,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
impl std::fmt::Display for WebhookSecurityAdvisoryWithdrawnAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSecurityAdvisoryWithdrawnAction::Withdrawn => write!(f, "withdrawn"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipCancelledAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipCancelledAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipCancelledAction::Cancelled => write!(f, "cancelled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipPendingCancellationAction {
  #[serde(rename = "pending_cancellation")]
  PendingCancellation,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipPendingCancellationAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipPendingCancellationAction::PendingCancellation => {
        write!(f, "pending_cancellation")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipPendingTierChangeAction {
  #[serde(rename = "pending_tier_change")]
  PendingTierChange,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipPendingTierChangeAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipPendingTierChangeAction::PendingTierChange => {
        write!(f, "pending_tier_change")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookSponsorshipTierChangedAction {
  #[serde(rename = "tier_changed")]
  TierChanged,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
impl std::fmt::Display for WebhookSponsorshipTierChangedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookSponsorshipTierChangedAction::TierChanged => write!(f, "tier_changed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "star"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookStarCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "star"))]
impl std::fmt::Display for WebhookStarCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookStarCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "star"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookStarDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "star"))]
impl std::fmt::Display for WebhookStarDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookStarDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookStatusCommitCommitAuthor {
  /// Metaproperties for Git author/committer information.
  Committer(Committer),
  WebhookStatusCommitCommitAuthorItem2(WebhookStatusCommitCommitAuthorItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookStatusCommitCommitCommitter {
  /// Metaproperties for Git author/committer information.
  Committer(Committer),
  WebhookStatusCommitCommitCommitterItem2(WebhookStatusCommitCommitCommitterItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookStatusCommitCommitVerificationReason {
  #[serde(rename = "expired_key")]
  ExpiredKey,
  #[serde(rename = "not_signing_key")]
  NotSigningKey,
  #[serde(rename = "gpgverify_error")]
  GpgverifyError,
  #[serde(rename = "gpgverify_unavailable")]
  GpgverifyUnavailable,
  #[serde(rename = "unsigned")]
  Unsigned,
  #[serde(rename = "unknown_signature_type")]
  UnknownSignatureType,
  #[serde(rename = "no_user")]
  NoUser,
  #[serde(rename = "unverified_email")]
  UnverifiedEmail,
  #[serde(rename = "bad_email")]
  BadEmail,
  #[serde(rename = "unknown_key")]
  UnknownKey,
  #[serde(rename = "malformed_signature")]
  MalformedSignature,
  #[serde(rename = "invalid")]
  Invalid,
  #[serde(rename = "valid")]
  Valid,
  #[serde(rename = "bad_cert")]
  BadCert,
  #[serde(rename = "ocsp_pending")]
  OcspPending,
}

#[cfg(any(feature = "full", feature = "status"))]
impl std::fmt::Display for WebhookStatusCommitCommitVerificationReason {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookStatusCommitCommitVerificationReason::ExpiredKey => write!(f, "expired_key"),
      WebhookStatusCommitCommitVerificationReason::NotSigningKey => write!(f, "not_signing_key"),
      WebhookStatusCommitCommitVerificationReason::GpgverifyError => write!(f, "gpgverify_error"),
      WebhookStatusCommitCommitVerificationReason::GpgverifyUnavailable => {
        write!(f, "gpgverify_unavailable")
      }
      WebhookStatusCommitCommitVerificationReason::Unsigned => write!(f, "unsigned"),
      WebhookStatusCommitCommitVerificationReason::UnknownSignatureType => {
        write!(f, "unknown_signature_type")
      }
      WebhookStatusCommitCommitVerificationReason::NoUser => write!(f, "no_user"),
      WebhookStatusCommitCommitVerificationReason::UnverifiedEmail => write!(f, "unverified_email"),
      WebhookStatusCommitCommitVerificationReason::BadEmail => write!(f, "bad_email"),
      WebhookStatusCommitCommitVerificationReason::UnknownKey => write!(f, "unknown_key"),
      WebhookStatusCommitCommitVerificationReason::MalformedSignature => {
        write!(f, "malformed_signature")
      }
      WebhookStatusCommitCommitVerificationReason::Invalid => write!(f, "invalid"),
      WebhookStatusCommitCommitVerificationReason::Valid => write!(f, "valid"),
      WebhookStatusCommitCommitVerificationReason::BadCert => write!(f, "bad_cert"),
      WebhookStatusCommitCommitVerificationReason::OcspPending => write!(f, "ocsp_pending"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "status"))]
/// The new state. Can be `pending`, `success`, `failure`, or `error`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookStatusState {
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "status"))]
impl std::fmt::Display for WebhookStatusState {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookStatusState::Pending => write!(f, "pending"),
      WebhookStatusState::Success => write!(f, "success"),
      WebhookStatusState::Failure => write!(f, "failure"),
      WebhookStatusState::Error => write!(f, "error"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookTeamAddedToRepositoryAction {
  #[serde(rename = "added_to_repository")]
  AddedToRepository,
}

#[cfg(any(feature = "full", feature = "team"))]
impl std::fmt::Display for WebhookTeamAddedToRepositoryAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookTeamAddedToRepositoryAction::AddedToRepository => write!(f, "added_to_repository"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookTeamCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "team"))]
impl std::fmt::Display for WebhookTeamCreatedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookTeamCreatedAction::Created => write!(f, "created"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookTeamDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "team"))]
impl std::fmt::Display for WebhookTeamDeletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookTeamDeletedAction::Deleted => write!(f, "deleted"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookTeamEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "team"))]
impl std::fmt::Display for WebhookTeamEditedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookTeamEditedAction::Edited => write!(f, "edited"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookTeamRemovedFromRepositoryAction {
  #[serde(rename = "removed_from_repository")]
  RemovedFromRepository,
}

#[cfg(any(feature = "full", feature = "team"))]
impl std::fmt::Display for WebhookTeamRemovedFromRepositoryAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookTeamRemovedFromRepositoryAction::RemovedFromRepository => {
        write!(f, "removed_from_repository")
      }
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "watch"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWatchStartedAction {
  #[serde(rename = "started")]
  Started,
}

#[cfg(any(feature = "full", feature = "watch"))]
impl std::fmt::Display for WebhookWatchStartedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWatchStartedAction::Started => write!(f, "started"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobCompletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobCompletedAction::Completed => write!(f, "completed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowJobConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "timed_out")]
  TimedOut,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WorkflowJobConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowJobConclusion::Success => write!(f, "success"),
      WorkflowJobConclusion::Failure => write!(f, "failure"),
      WorkflowJobConclusion::Skipped => write!(f, "skipped"),
      WorkflowJobConclusion::Cancelled => write!(f, "cancelled"),
      WorkflowJobConclusion::ActionRequired => write!(f, "action_required"),
      WorkflowJobConclusion::Neutral => write!(f, "neutral"),
      WorkflowJobConclusion::TimedOut => write!(f, "timed_out"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
/// The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WorkflowJobStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowJobStatus::Queued => write!(f, "queued"),
      WorkflowJobStatus::InProgress => write!(f, "in_progress"),
      WorkflowJobStatus::Completed => write!(f, "completed"),
      WorkflowJobStatus::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowStepConclusion {
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WorkflowStepConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowStepConclusion::Failure => write!(f, "failure"),
      WorkflowStepConclusion::Skipped => write!(f, "skipped"),
      WorkflowStepConclusion::Success => write!(f, "success"),
      WorkflowStepConclusion::Cancelled => write!(f, "cancelled"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowStepStatus {
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WorkflowStepStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowStepStatus::InProgress => write!(f, "in_progress"),
      WorkflowStepStatus::Completed => write!(f, "completed"),
      WorkflowStepStatus::Queued => write!(f, "queued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "timed_out")]
  TimedOut,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Success => write!(f, "success"),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Failure => write!(f, "failure"),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Skipped => write!(f, "skipped"),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Cancelled => write!(f, "cancelled"),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Neutral => write!(f, "neutral"),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::TimedOut => write!(f, "timed_out"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowJobCompletedWorkflowJob {
  /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
  WorkflowJob(WorkflowJob),
  WebhookWorkflowJobCompletedWorkflowJobItem2(WebhookWorkflowJobCompletedWorkflowJobItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobInProgressAction {
  #[serde(rename = "in_progress")]
  InProgress,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobInProgressAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobInProgressAction::InProgress => write!(f, "in_progress"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobInProgressWorkflowJobItem2Status {
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobInProgressWorkflowJobItem2Status {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::InProgress => write!(f, "in_progress"),
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::Completed => write!(f, "completed"),
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::Queued => write!(f, "queued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowJobInProgressWorkflowJob {
  /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
  WorkflowJob(WorkflowJob),
  WebhookWorkflowJobInProgressWorkflowJobItem2(WebhookWorkflowJobInProgressWorkflowJobItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobQueuedAction {
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobQueuedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobQueuedAction::Queued => write!(f, "queued"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobQueuedWorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobQueuedWorkflowJobStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobQueuedWorkflowJobStatus::Queued => write!(f, "queued"),
      WebhookWorkflowJobQueuedWorkflowJobStatus::InProgress => write!(f, "in_progress"),
      WebhookWorkflowJobQueuedWorkflowJobStatus::Completed => write!(f, "completed"),
      WebhookWorkflowJobQueuedWorkflowJobStatus::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobWaitingAction {
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobWaitingAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobWaitingAction::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowJobWaitingWorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
impl std::fmt::Display for WebhookWorkflowJobWaitingWorkflowJobStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowJobWaitingWorkflowJobStatus::Queued => write!(f, "queued"),
      WebhookWorkflowJobWaitingWorkflowJobStatus::InProgress => write!(f, "in_progress"),
      WebhookWorkflowJobWaitingWorkflowJobStatus::Completed => write!(f, "completed"),
      WebhookWorkflowJobWaitingWorkflowJobStatus::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowRunCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WebhookWorkflowRunCompletedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowRunCompletedAction::Completed => write!(f, "completed"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WorkflowRunConclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowRunConclusion::Success => write!(f, "success"),
      WorkflowRunConclusion::Failure => write!(f, "failure"),
      WorkflowRunConclusion::Neutral => write!(f, "neutral"),
      WorkflowRunConclusion::Cancelled => write!(f, "cancelled"),
      WorkflowRunConclusion::TimedOut => write!(f, "timed_out"),
      WorkflowRunConclusion::ActionRequired => write!(f, "action_required"),
      WorkflowRunConclusion::Stale => write!(f, "stale"),
      WorkflowRunConclusion::Skipped => write!(f, "skipped"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WorkflowRunStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WorkflowRunStatus {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WorkflowRunStatus::Requested => write!(f, "requested"),
      WorkflowRunStatus::InProgress => write!(f, "in_progress"),
      WorkflowRunStatus::Completed => write!(f, "completed"),
      WorkflowRunStatus::Queued => write!(f, "queued"),
      WorkflowRunStatus::Pending => write!(f, "pending"),
      WorkflowRunStatus::Waiting => write!(f, "waiting"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Success => write!(f, "success"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Failure => write!(f, "failure"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Neutral => write!(f, "neutral"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Cancelled => write!(f, "cancelled"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::TimedOut => write!(f, "timed_out"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Stale => write!(f, "stale"),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Skipped => write!(f, "skipped"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowRunCompletedWorkflowRun {
  WorkflowRun(WorkflowRun),
  WebhookWorkflowRunCompletedWorkflowRunItem2(WebhookWorkflowRunCompletedWorkflowRunItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowRunInProgressAction {
  #[serde(rename = "in_progress")]
  InProgress,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WebhookWorkflowRunInProgressAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowRunInProgressAction::InProgress => write!(f, "in_progress"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Success => write!(f, "success"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Failure => write!(f, "failure"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Neutral => write!(f, "neutral"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Cancelled => write!(f, "cancelled"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::TimedOut => write!(f, "timed_out"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::ActionRequired => {
        write!(f, "action_required")
      }
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Skipped => write!(f, "skipped"),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Stale => write!(f, "stale"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowRunInProgressWorkflowRun {
  WorkflowRun(WorkflowRun),
  WebhookWorkflowRunInProgressWorkflowRunItem2(WebhookWorkflowRunInProgressWorkflowRunItem2),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Copy)]
pub enum WebhookWorkflowRunRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
impl std::fmt::Display for WebhookWorkflowRunRequestedAction {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    match self {
      WebhookWorkflowRunRequestedAction::Requested => write!(f, "requested"),
    }
  }
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookBranchProtectionConfigurationEvent {
  Disabled(WebhookBranchProtectionConfigurationDisabled),
  Enabled(WebhookBranchProtectionConfigurationEnabled),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookBranchProtectionRuleEvent {
  Created(WebhookBranchProtectionRuleCreated),
  Deleted(WebhookBranchProtectionRuleDeleted),
  Edited(WebhookBranchProtectionRuleEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCheckRunEvent {
  Completed(WebhookCheckRunCompleted),
  Created(WebhookCheckRunCreated),
  RequestedAction(WebhookCheckRunRequestedAction),
  Rerequested(WebhookCheckRunRerequested),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCheckSuiteEvent {
  Completed(WebhookCheckSuiteCompleted),
  Requested(WebhookCheckSuiteRequested),
  Rerequested(WebhookCheckSuiteRerequested),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCodeScanningAlertEvent {
  AppearedInBranch(WebhookCodeScanningAlertAppearedInBranch),
  ClosedByUser(WebhookCodeScanningAlertClosedByUser),
  Created(WebhookCodeScanningAlertCreated),
  Fixed(WebhookCodeScanningAlertFixed),
  Reopened(WebhookCodeScanningAlertReopened),
  ReopenedByUser(WebhookCodeScanningAlertReopenedByUser),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCommitCommentEvent {
  Created(WebhookCommitCommentCreated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCustomPropertyEvent {
  Created(WebhookCustomPropertyCreated),
  Deleted(WebhookCustomPropertyDeleted),
  Updated(WebhookCustomPropertyUpdated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookCustomPropertyValuesEvent {
  Updated(WebhookCustomPropertyValuesUpdated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDependabotAlertEvent {
  AutoDismissed(WebhookDependabotAlertAutoDismissed),
  AutoReopened(WebhookDependabotAlertAutoReopened),
  Created(WebhookDependabotAlertCreated),
  Dismissed(WebhookDependabotAlertDismissed),
  Fixed(WebhookDependabotAlertFixed),
  Reintroduced(WebhookDependabotAlertReintroduced),
  Reopened(WebhookDependabotAlertReopened),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDeployKeyEvent {
  Created(WebhookDeployKeyCreated),
  Deleted(WebhookDeployKeyDeleted),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDeploymentEvent {
  Created(WebhookDeploymentCreated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDeploymentProtectionRuleEvent {
  Requested(WebhookDeploymentProtectionRuleRequested),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDeploymentReviewEvent {
  Approved(WebhookDeploymentReviewApproved),
  Rejected(WebhookDeploymentReviewRejected),
  Requested(WebhookDeploymentReviewRequested),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDeploymentStatusEvent {
  Created(WebhookDeploymentStatusCreated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDiscussionEvent {
  Answered(WebhookDiscussionAnswered),
  CategoryChanged(WebhookDiscussionCategoryChanged),
  Closed(WebhookDiscussionClosed),
  Created(WebhookDiscussionCreated),
  Deleted(WebhookDiscussionDeleted),
  Edited(WebhookDiscussionEdited),
  Labeled(WebhookDiscussionLabeled),
  Locked(WebhookDiscussionLocked),
  Pinned(WebhookDiscussionPinned),
  Reopened(WebhookDiscussionReopened),
  Transferred(WebhookDiscussionTransferred),
  Unanswered(WebhookDiscussionUnanswered),
  Unlabeled(WebhookDiscussionUnlabeled),
  Unlocked(WebhookDiscussionUnlocked),
  Unpinned(WebhookDiscussionUnpinned),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookDiscussionCommentEvent {
  Created(WebhookDiscussionCommentCreated),
  Deleted(WebhookDiscussionCommentDeleted),
  Edited(WebhookDiscussionCommentEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookGithubAppAuthorizationEvent {
  Revoked(WebhookGithubAppAuthorizationRevoked),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookInstallationEvent {
  Created(WebhookInstallationCreated),
  Deleted(WebhookInstallationDeleted),
  NewPermissionsAccepted(WebhookInstallationNewPermissionsAccepted),
  Suspend(WebhookInstallationSuspend),
  Unsuspend(WebhookInstallationUnsuspend),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookInstallationRepositoriesEvent {
  Added(WebhookInstallationRepositoriesAdded),
  Removed(WebhookInstallationRepositoriesRemoved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookInstallationTargetEvent {
  Renamed(WebhookInstallationTargetRenamed),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentEvent {
  Created(WebhookIssueCommentCreated),
  Deleted(WebhookIssueCommentDeleted),
  Edited(WebhookIssueCommentEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssuesEvent {
  Assigned(WebhookIssuesAssigned),
  Closed(WebhookIssuesClosed),
  Deleted(WebhookIssuesDeleted),
  Demilestoned(WebhookIssuesDemilestoned),
  Edited(WebhookIssuesEdited),
  Labeled(WebhookIssuesLabeled),
  Locked(WebhookIssuesLocked),
  Milestoned(WebhookIssuesMilestoned),
  Opened(WebhookIssuesOpened),
  Pinned(WebhookIssuesPinned),
  Reopened(WebhookIssuesReopened),
  Transferred(WebhookIssuesTransferred),
  Unassigned(WebhookIssuesUnassigned),
  Unlabeled(WebhookIssuesUnlabeled),
  Unlocked(WebhookIssuesUnlocked),
  Unpinned(WebhookIssuesUnpinned),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookLabelEvent {
  Created(WebhookLabelCreated),
  Deleted(WebhookLabelDeleted),
  Edited(WebhookLabelEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchaseEvent {
  Cancelled(WebhookMarketplacePurchaseCancelled),
  Changed(WebhookMarketplacePurchaseChanged),
  PendingChange(WebhookMarketplacePurchasePendingChange),
  PendingChangeCancelled(WebhookMarketplacePurchasePendingChangeCancelled),
  Purchased(WebhookMarketplacePurchasePurchased),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMemberEvent {
  Added(WebhookMemberAdded),
  Edited(WebhookMemberEdited),
  Removed(WebhookMemberRemoved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMembershipEvent {
  Added(WebhookMembershipAdded),
  Removed(WebhookMembershipRemoved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMergeGroupEvent {
  ChecksRequested(WebhookMergeGroupChecksRequested),
  Destroyed(WebhookMergeGroupDestroyed),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMetaEvent {
  Deleted(WebhookMetaDeleted),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMilestoneEvent {
  Closed(WebhookMilestoneClosed),
  Created(WebhookMilestoneCreated),
  Deleted(WebhookMilestoneDeleted),
  Edited(WebhookMilestoneEdited),
  Opened(WebhookMilestoneOpened),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookOrgBlockEvent {
  Blocked(WebhookOrgBlockBlocked),
  Unblocked(WebhookOrgBlockUnblocked),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookOrganizationEvent {
  Deleted(WebhookOrganizationDeleted),
  MemberAdded(WebhookOrganizationMemberAdded),
  MemberInvited(WebhookOrganizationMemberInvited),
  MemberRemoved(WebhookOrganizationMemberRemoved),
  Renamed(WebhookOrganizationRenamed),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPackageEvent {
  Published(WebhookPackagePublished),
  Updated(WebhookPackageUpdated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPersonalAccessTokenRequestEvent {
  Approved(WebhookPersonalAccessTokenRequestApproved),
  Cancelled(WebhookPersonalAccessTokenRequestCancelled),
  Created(WebhookPersonalAccessTokenRequestCreated),
  Denied(WebhookPersonalAccessTokenRequestDenied),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectCardEvent {
  Converted(WebhookProjectCardConverted),
  Created(WebhookProjectCardCreated),
  Deleted(WebhookProjectCardDeleted),
  Edited(WebhookProjectCardEdited),
  Moved(WebhookProjectCardMoved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectEvent {
  Closed(WebhookProjectClosed),
  Created(WebhookProjectCreated),
  Deleted(WebhookProjectDeleted),
  Edited(WebhookProjectEdited),
  Reopened(WebhookProjectReopened),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectColumnEvent {
  Created(WebhookProjectColumnCreated),
  Deleted(WebhookProjectColumnDeleted),
  Edited(WebhookProjectColumnEdited),
  Moved(WebhookProjectColumnMoved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectsV2Event {
  Closed(WebhookProjectsV2ProjectClosed),
  Created(WebhookProjectsV2ProjectCreated),
  Deleted(WebhookProjectsV2ProjectDeleted),
  Edited(WebhookProjectsV2ProjectEdited),
  Reopened(WebhookProjectsV2ProjectReopened),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectsV2ItemEvent {
  Archived(WebhookProjectsV2ItemArchived),
  Converted(WebhookProjectsV2ItemConverted),
  Created(WebhookProjectsV2ItemCreated),
  Deleted(WebhookProjectsV2ItemDeleted),
  Edited(WebhookProjectsV2ItemEdited),
  Reordered(WebhookProjectsV2ItemReordered),
  Restored(WebhookProjectsV2ItemRestored),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestEvent {
  Assigned(WebhookPullRequestAssigned),
  AutoMergeDisabled(WebhookPullRequestAutoMergeDisabled),
  AutoMergeEnabled(WebhookPullRequestAutoMergeEnabled),
  Closed(WebhookPullRequestClosed),
  ConvertedToDraft(WebhookPullRequestConvertedToDraft),
  Demilestoned(WebhookPullRequestDemilestoned),
  Dequeued(WebhookPullRequestDequeued),
  Edited(WebhookPullRequestEdited),
  Enqueued(WebhookPullRequestEnqueued),
  Labeled(WebhookPullRequestLabeled),
  Locked(WebhookPullRequestLocked),
  Milestoned(WebhookPullRequestMilestoned),
  Opened(WebhookPullRequestOpened),
  ReadyForReview(WebhookPullRequestReadyForReview),
  Reopened(WebhookPullRequestReopened),
  ReviewRequestRemoved(WebhookPullRequestReviewRequestRemoved),
  ReviewRequested(WebhookPullRequestReviewRequested),
  Synchronize(WebhookPullRequestSynchronize),
  Unassigned(WebhookPullRequestUnassigned),
  Unlabeled(WebhookPullRequestUnlabeled),
  Unlocked(WebhookPullRequestUnlocked),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewCommentEvent {
  Created(WebhookPullRequestReviewCommentCreated),
  Deleted(WebhookPullRequestReviewCommentDeleted),
  Edited(WebhookPullRequestReviewCommentEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewEvent {
  Dismissed(WebhookPullRequestReviewDismissed),
  Edited(WebhookPullRequestReviewEdited),
  Submitted(WebhookPullRequestReviewSubmitted),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewThreadEvent {
  Resolved(WebhookPullRequestReviewThreadResolved),
  Unresolved(WebhookPullRequestReviewThreadUnresolved),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRegistryPackageEvent {
  Published(WebhookRegistryPackagePublished),
  Updated(WebhookRegistryPackageUpdated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookReleaseEvent {
  Created(WebhookReleaseCreated),
  Deleted(WebhookReleaseDeleted),
  Edited(WebhookReleaseEdited),
  Prereleased(WebhookReleasePrereleased),
  Published(WebhookReleasePublished),
  Released(WebhookReleaseReleased),
  Unpublished(WebhookReleaseUnpublished),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryAdvisoryEvent {
  Published(WebhookRepositoryAdvisoryPublished),
  Reported(WebhookRepositoryAdvisoryReported),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryEvent {
  Archived(WebhookRepositoryArchived),
  Created(WebhookRepositoryCreated),
  Deleted(WebhookRepositoryDeleted),
  Edited(WebhookRepositoryEdited),
  Privatized(WebhookRepositoryPrivatized),
  Publicized(WebhookRepositoryPublicized),
  Renamed(WebhookRepositoryRenamed),
  Transferred(WebhookRepositoryTransferred),
  Unarchived(WebhookRepositoryUnarchived),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryDispatchEvent {
  SampleCollected(WebhookRepositoryDispatchSample),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryRulesetEvent {
  Created(WebhookRepositoryRulesetCreated),
  Deleted(WebhookRepositoryRulesetDeleted),
  Edited(WebhookRepositoryRulesetEdited),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertEvent {
  Create(WebhookRepositoryVulnerabilityAlertCreate),
  Dismiss(WebhookRepositoryVulnerabilityAlertDismiss),
  Reopen(WebhookRepositoryVulnerabilityAlertReopen),
  Resolve(WebhookRepositoryVulnerabilityAlertResolve),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookSecretScanningAlertEvent {
  Created(WebhookSecretScanningAlertCreated),
  Reopened(WebhookSecretScanningAlertReopened),
  Resolved(WebhookSecretScanningAlertResolved),
  Revoked(WebhookSecretScanningAlertRevoked),
  Validated(WebhookSecretScanningAlertValidated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookSecretScanningAlertLocationEvent {
  Created(WebhookSecretScanningAlertLocationCreated),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookSecurityAdvisoryEvent {
  Published(WebhookSecurityAdvisoryPublished),
  Updated(WebhookSecurityAdvisoryUpdated),
  Withdrawn(WebhookSecurityAdvisoryWithdrawn),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookSponsorshipEvent {
  Cancelled(WebhookSponsorshipCancelled),
  Created(WebhookSponsorshipCreated),
  Edited(WebhookSponsorshipEdited),
  PendingCancellation(WebhookSponsorshipPendingCancellation),
  PendingTierChange(WebhookSponsorshipPendingTierChange),
  TierChanged(WebhookSponsorshipTierChanged),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookStarEvent {
  Created(WebhookStarCreated),
  Deleted(WebhookStarDeleted),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookTeamEvent {
  AddedToRepository(WebhookTeamAddedToRepository),
  Created(WebhookTeamCreated),
  Deleted(WebhookTeamDeleted),
  Edited(WebhookTeamEdited),
  RemovedFromRepository(WebhookTeamRemovedFromRepository),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWatchEvent {
  Started(WebhookWatchStarted),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowJobEvent {
  Completed(WebhookWorkflowJobCompleted),
  InProgress(WebhookWorkflowJobInProgress),
  Queued(WebhookWorkflowJobQueued),
  Waiting(WebhookWorkflowJobWaiting),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowRunEvent {
  Completed(WebhookWorkflowRunCompleted),
  InProgress(WebhookWorkflowRunInProgress),
  Requested(WebhookWorkflowRunRequested),
}

#[allow(clippy::large_enum_variant)]
#[cfg(any(feature = "full", feature = "webhook_event"))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookEvent {
  #[cfg(feature = "branch_protection_configuration")]
  BranchProtectionConfiguration(WebhookBranchProtectionConfigurationEvent),
  #[cfg(feature = "branch_protection_rule")]
  BranchProtectionRule(WebhookBranchProtectionRuleEvent),
  #[cfg(feature = "check_run")]
  CheckRun(WebhookCheckRunEvent),
  #[cfg(feature = "check_suite")]
  CheckSuite(WebhookCheckSuiteEvent),
  #[cfg(feature = "code_scanning_alert")]
  CodeScanningAlert(WebhookCodeScanningAlertEvent),
  #[cfg(feature = "commit_comment")]
  CommitComment(WebhookCommitCommentEvent),
  #[cfg(feature = "create")]
  Create(WebhookCreate),
  #[cfg(feature = "custom_property")]
  CustomProperty(WebhookCustomPropertyEvent),
  #[cfg(feature = "custom_property_values")]
  CustomPropertyValues(WebhookCustomPropertyValuesEvent),
  #[cfg(feature = "delete")]
  Delete(WebhookDelete),
  #[cfg(feature = "dependabot_alert")]
  DependabotAlert(WebhookDependabotAlertEvent),
  #[cfg(feature = "deploy_key")]
  DeployKey(WebhookDeployKeyEvent),
  #[cfg(feature = "deployment")]
  Deployment(WebhookDeploymentEvent),
  #[cfg(feature = "deployment_protection_rule")]
  DeploymentProtectionRule(WebhookDeploymentProtectionRuleEvent),
  #[cfg(feature = "deployment_review")]
  DeploymentReview(WebhookDeploymentReviewEvent),
  #[cfg(feature = "deployment_status")]
  DeploymentStatus(WebhookDeploymentStatusEvent),
  #[cfg(feature = "discussion")]
  Discussion(WebhookDiscussionEvent),
  #[cfg(feature = "discussion_comment")]
  DiscussionComment(WebhookDiscussionCommentEvent),
  #[cfg(feature = "fork")]
  Fork(WebhookFork),
  #[cfg(feature = "github_app_authorization")]
  GithubAppAuthorization(WebhookGithubAppAuthorizationEvent),
  #[cfg(feature = "gollum")]
  Gollum(WebhookGollum),
  #[cfg(feature = "installation")]
  Installation(WebhookInstallationEvent),
  #[cfg(feature = "installation_repositories")]
  InstallationRepositories(WebhookInstallationRepositoriesEvent),
  #[cfg(feature = "installation_target")]
  InstallationTarget(WebhookInstallationTargetEvent),
  #[cfg(feature = "issue_comment")]
  IssueComment(WebhookIssueCommentEvent),
  #[cfg(feature = "issues")]
  Issues(WebhookIssuesEvent),
  #[cfg(feature = "label")]
  Label(WebhookLabelEvent),
  #[cfg(feature = "marketplace_purchase")]
  MarketplacePurchase(WebhookMarketplacePurchaseEvent),
  #[cfg(feature = "member")]
  Member(WebhookMemberEvent),
  #[cfg(feature = "membership")]
  Membership(WebhookMembershipEvent),
  #[cfg(feature = "merge_group")]
  MergeGroup(WebhookMergeGroupEvent),
  #[cfg(feature = "meta")]
  Meta(WebhookMetaEvent),
  #[cfg(feature = "milestone")]
  Milestone(WebhookMilestoneEvent),
  #[cfg(feature = "org_block")]
  OrgBlock(WebhookOrgBlockEvent),
  #[cfg(feature = "organization")]
  Organization(WebhookOrganizationEvent),
  #[cfg(feature = "package")]
  Package(WebhookPackageEvent),
  #[cfg(feature = "page_build")]
  PageBuild(WebhookPageBuild),
  #[cfg(feature = "personal_access_token_request")]
  PersonalAccessTokenRequest(WebhookPersonalAccessTokenRequestEvent),
  #[cfg(feature = "ping")]
  Ping(WebhookPing),
  #[cfg(feature = "project_card")]
  ProjectCard(WebhookProjectCardEvent),
  #[cfg(feature = "project")]
  Project(WebhookProjectEvent),
  #[cfg(feature = "project_column")]
  ProjectColumn(WebhookProjectColumnEvent),
  #[cfg(feature = "projects_v2")]
  ProjectsV2(WebhookProjectsV2Event),
  #[cfg(feature = "projects_v2_item")]
  ProjectsV2Item(WebhookProjectsV2ItemEvent),
  #[cfg(feature = "public")]
  Public(WebhookPublic),
  #[cfg(feature = "pull_request")]
  PullRequest(WebhookPullRequestEvent),
  #[cfg(feature = "pull_request_review_comment")]
  PullRequestReviewComment(WebhookPullRequestReviewCommentEvent),
  #[cfg(feature = "pull_request_review")]
  PullRequestReview(WebhookPullRequestReviewEvent),
  #[cfg(feature = "pull_request_review_thread")]
  PullRequestReviewThread(WebhookPullRequestReviewThreadEvent),
  #[cfg(feature = "push")]
  Push(WebhookPush),
  #[cfg(feature = "registry_package")]
  RegistryPackage(WebhookRegistryPackageEvent),
  #[cfg(feature = "release")]
  Release(WebhookReleaseEvent),
  #[cfg(feature = "repository_advisory")]
  RepositoryAdvisory(WebhookRepositoryAdvisoryEvent),
  #[cfg(feature = "repository")]
  Repository(WebhookRepositoryEvent),
  #[cfg(feature = "repository_dispatch")]
  RepositoryDispatch(WebhookRepositoryDispatchEvent),
  #[cfg(feature = "repository_import")]
  RepositoryImport(WebhookRepositoryImport),
  #[cfg(feature = "repository_ruleset")]
  RepositoryRuleset(WebhookRepositoryRulesetEvent),
  #[cfg(feature = "repository_vulnerability_alert")]
  RepositoryVulnerabilityAlert(WebhookRepositoryVulnerabilityAlertEvent),
  #[cfg(feature = "secret_scanning_alert")]
  SecretScanningAlert(WebhookSecretScanningAlertEvent),
  #[cfg(feature = "secret_scanning_alert_location")]
  SecretScanningAlertLocation(WebhookSecretScanningAlertLocationEvent),
  #[cfg(feature = "security_advisory")]
  SecurityAdvisory(WebhookSecurityAdvisoryEvent),
  #[cfg(feature = "security_and_analysis")]
  SecurityAndAnalysis(WebhookSecurityAndAnalysis),
  #[cfg(feature = "sponsorship")]
  Sponsorship(WebhookSponsorshipEvent),
  #[cfg(feature = "star")]
  Star(WebhookStarEvent),
  #[cfg(feature = "status")]
  Status(WebhookStatus),
  #[cfg(feature = "team_add")]
  TeamAdd(WebhookTeamAdd),
  #[cfg(feature = "team")]
  Team(WebhookTeamEvent),
  #[cfg(feature = "watch")]
  Watch(WebhookWatchEvent),
  #[cfg(feature = "workflow_dispatch")]
  WorkflowDispatch(WebhookWorkflowDispatch),
  #[cfg(feature = "workflow_job")]
  WorkflowJob(WebhookWorkflowJobEvent),
  #[cfg(feature = "workflow_run")]
  WorkflowRun(WebhookWorkflowRunEvent),
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "team",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
/// on an enterprise account or an organization that's part of an enterprise account. For more information,
/// see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
///
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct EnterpriseWebhooks {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// A short description of the enterprise.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub html_url: String,
  /// Unique identifier of the enterprise
  pub id: i64,
  /// The name of the enterprise.
  pub name: String,
  pub node_id: String,
  /// The slug url identifier for the enterprise.
  pub slug: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  /// The enterprise's website URL.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub website_url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "personal_access_token_request",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "projects_v2",
  feature = "projects_v2_item",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "team",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
/// for and sent to a GitHub App. For more information,
/// see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleInstallation {
  /// The ID of the installation.
  pub id: i64,
  /// The global node ID of the installation.
  pub node_id: String,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "personal_access_token_request",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "projects_v2",
  feature = "projects_v2_item",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "team",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
/// organization, or when the event occurs from activity in a repository owned by an organization.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrganizationSimpleWebhooks {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub events_url: String,
  pub hooks_url: String,
  pub id: i64,
  pub issues_url: String,
  pub login: String,
  pub members_url: String,
  pub node_id: String,
  pub public_members_url: String,
  pub repos_url: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// License Simple
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LicenseSimple {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub key: String,
  pub name: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub spdx_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "personal_access_token_request",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "projects_v2",
  feature = "projects_v2_item",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// A GitHub user.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleUser {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_at: Option<String>,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryWebhooksPermissions {
  pub admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  pub pull: bool,
  pub push: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryWebhooksTemplateRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryWebhooksTemplateRepositoryPermissions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryWebhooksTemplateRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub clone_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub disabled: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_downloads: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_issues: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_pages: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_wiki: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  /// The default value for a merge commit message.
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub network_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<RepositoryWebhooksTemplateRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<RepositoryWebhooksTemplateRepositoryPermissions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  /// The default value for a squash merge commit message:
  ///
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ssh_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub svn_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers_count: Option<i64>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "membership",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
/// when the event occurs from activity in a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryWebhooks {
  /// Whether to allow Auto-merge to be used on pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow forking this repo
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  /// Whether to allow merge commits for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  /// Whether to allow rebase merges for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  /// Whether to allow squash merges for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  /// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether anonymous git access is enabled for this repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub anonymous_access_enabled: Option<bool>,
  pub archive_url: String,
  /// Whether the repository is archived.
  pub archived: bool,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub clone_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub custom_properties: Option<serde_json::Value>,
  /// The default branch of the repository.
  pub default_branch: String,
  /// Whether to delete head branches when pull requests are merged
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// Returns whether or not this repository disabled.
  pub disabled: bool,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks: i64,
  pub forks_count: i64,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub git_url: String,
  /// Whether discussions are enabled.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_discussions: Option<bool>,
  /// Whether downloads are enabled.
  pub has_downloads: bool,
  /// Whether issues are enabled.
  pub has_issues: bool,
  pub has_pages: bool,
  /// Whether projects are enabled.
  pub has_projects: bool,
  /// Whether the wiki is enabled.
  pub has_wiki: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// Whether this repository acts as a template that can be used to generate new repositories.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<LicenseSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub master_branch: Option<String>,
  /// The default value for a merge commit message.
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  /// The name of the repository.
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub network_count: Option<i64>,
  pub node_id: String,
  pub notifications_url: String,
  pub open_issues: i64,
  pub open_issues_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<SimpleUser>,
  pub owner: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<RepositoryWebhooksPermissions>,
  /// Whether the repository is private or public.
  pub private: bool,
  pub pulls_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<String>,
  pub releases_url: String,
  /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
  pub size: i64,
  /// The default value for a squash merge commit message:
  ///
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  pub ssh_url: String,
  pub stargazers_count: i64,
  pub stargazers_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_at: Option<String>,
  pub statuses_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_count: Option<i64>,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub svn_url: String,
  pub tags_url: String,
  pub teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub template_repository: Option<RepositoryWebhooksTemplateRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  pub trees_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub url: String,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
  /// The repository visibility: public, private, or internal.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  pub watchers: i64,
  pub watchers_count: i64,
  /// Whether to require contributors to sign off on web-based commits
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "branch_protection_configuration",
  feature = "branch_protection_rule",
  feature = "check_run",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "create",
  feature = "custom_property",
  feature = "custom_property_values",
  feature = "delete",
  feature = "dependabot_alert",
  feature = "deploy_key",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "github_app_authorization",
  feature = "gollum",
  feature = "installation",
  feature = "installation_repositories",
  feature = "installation_target",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "marketplace_purchase",
  feature = "member",
  feature = "merge_group",
  feature = "meta",
  feature = "milestone",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "personal_access_token_request",
  feature = "ping",
  feature = "project_card",
  feature = "project",
  feature = "project_column",
  feature = "projects_v2",
  feature = "projects_v2_item",
  feature = "public",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "registry_package",
  feature = "release",
  feature = "repository_advisory",
  feature = "repository",
  feature = "repository_dispatch",
  feature = "repository_import",
  feature = "repository_ruleset",
  feature = "repository_vulnerability_alert",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location",
  feature = "security_advisory",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "star",
  feature = "status",
  feature = "team_add",
  feature = "team",
  feature = "watch",
  feature = "workflow_dispatch",
  feature = "workflow_job",
  feature = "workflow_run"
))]
/// The GitHub user that triggered the event. This property is included in every webhook payload.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleUserWebhooks {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_at: Option<String>,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionConfigurationDisabled {
  pub action: WebhookBranchProtectionConfigurationDisabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "branch_protection_configuration"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionConfigurationEnabled {
  pub action: WebhookBranchProtectionConfigurationEnabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
/// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRule {
  pub admin_enforced: bool,
  pub allow_deletions_enforcement_level: BranchProtectionRuleAllowDeletionsEnforcementLevel,
  pub allow_force_pushes_enforcement_level: BranchProtectionRuleAllowForcePushesEnforcementLevel,
  pub authorized_actor_names: Vec<String>,
  pub authorized_actors_only: bool,
  pub authorized_dismissal_actors_only: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub create_protected: Option<bool>,
  pub created_at: String,
  pub dismiss_stale_reviews_on_push: bool,
  pub id: i64,
  pub ignore_approvals_from_contributors: bool,
  pub linear_history_requirement_enforcement_level:
    BranchProtectionRuleLinearHistoryRequirementEnforcementLevel,
  pub merge_queue_enforcement_level: BranchProtectionRuleMergeQueueEnforcementLevel,
  pub name: String,
  pub pull_request_reviews_enforcement_level:
    BranchProtectionRulePullRequestReviewsEnforcementLevel,
  pub repository_id: i64,
  pub require_code_owner_review: bool,
  /// Whether the most recent push must be approved by someone other than the person who pushed it
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub require_last_push_approval: Option<bool>,
  pub required_approving_review_count: i64,
  pub required_conversation_resolution_level:
    BranchProtectionRuleRequiredConversationResolutionLevel,
  pub required_deployments_enforcement_level:
    BranchProtectionRuleRequiredDeploymentsEnforcementLevel,
  pub required_status_checks: Vec<String>,
  pub required_status_checks_enforcement_level:
    BranchProtectionRuleRequiredStatusChecksEnforcementLevel,
  pub signature_requirement_enforcement_level:
    BranchProtectionRuleSignatureRequirementEnforcementLevel,
  pub strict_required_status_checks_policy: bool,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleCreated {
  pub action: WebhookBranchProtectionRuleCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleDeleted {
  pub action: WebhookBranchProtectionRuleDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesAdminEnforced {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesAuthorizedActorNames {
  pub from: Vec<String>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesAuthorizedActorsOnly {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesAuthorizedDismissalActorsOnly {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel {
  pub from: WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesRequiredStatusChecks {
  pub from: Vec<String>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevel {
  pub from: WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
/// If the action was `edited`, the changes to the rule.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin_enforced: Option<WebhookBranchProtectionRuleEditedChangesAdminEnforced>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_actor_names: Option<WebhookBranchProtectionRuleEditedChangesAuthorizedActorNames>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_actors_only: Option<WebhookBranchProtectionRuleEditedChangesAuthorizedActorsOnly>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_dismissal_actors_only:
    Option<WebhookBranchProtectionRuleEditedChangesAuthorizedDismissalActorsOnly>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub linear_history_requirement_enforcement_level:
    Option<WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub required_status_checks: Option<WebhookBranchProtectionRuleEditedChangesRequiredStatusChecks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub required_status_checks_enforcement_level:
    Option<WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevel>,
}

#[cfg(any(feature = "full", feature = "branch_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookBranchProtectionRuleEdited {
  pub action: WebhookBranchProtectionRuleEditedAction,
  /// If the action was `edited`, the changes to the rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookBranchProtectionRuleEditedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_run", feature = "issue_comment"))]
/// The set of permissions for the GitHub app
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IntegrationPermissions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub checks: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub metadata: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run", feature = "issue_comment"))]
/// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Integration {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub client_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub client_secret: Option<String>,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The list of events for the GitHub app
  pub events: Vec<String>,
  pub external_url: String,
  pub html_url: String,
  /// Unique identifier of the GitHub app
  pub id: i64,
  /// The number of installations associated with the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installations_count: Option<i64>,
  /// The name of the GitHub app
  pub name: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pem: Option<String>,
  /// The set of permissions for the GitHub app
  pub permissions: IntegrationPermissions,
  /// The slug name of the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub webhook_secret: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestMinimalBaseRepo {
  pub id: i64,
  pub name: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestMinimalBase {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: PullRequestMinimalBaseRepo,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestMinimalHeadRepo {
  pub id: i64,
  pub name: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestMinimalHead {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: PullRequestMinimalHeadRepo,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestMinimal {
  pub base: PullRequestMinimalBase,
  pub head: PullRequestMinimalHead,
  pub id: i64,
  pub number: i64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// Code Of Conduct
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CodeOfConduct {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub key: String,
  pub name: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MinimalRepositoryLicense {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub key: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub spdx_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MinimalRepositoryPermissions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecurityAndAnalysisAdvancedSecurity {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<SecurityAndAnalysisAdvancedSecurityStatus>,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
/// Enable or disable Dependabot security updates for the repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecurityAndAnalysisDependabotSecurityUpdates {
  /// The enablement status of Dependabot security updates for the repository.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<SecurityAndAnalysisDependabotSecurityUpdatesStatus>,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecurityAndAnalysisSecretScanning {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<SecurityAndAnalysisSecretScanningStatus>,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecurityAndAnalysisSecretScanningPushProtection {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<SecurityAndAnalysisSecretScanningPushProtectionStatus>,
}

#[cfg(any(
  feature = "full",
  feature = "check_run",
  feature = "security_and_analysis"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecurityAndAnalysis {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub advanced_security: Option<SecurityAndAnalysisAdvancedSecurity>,
  /// Enable or disable Dependabot security updates for the repository.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependabot_security_updates: Option<SecurityAndAnalysisDependabotSecurityUpdates>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret_scanning: Option<SecurityAndAnalysisSecretScanning>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret_scanning_push_protection: Option<SecurityAndAnalysisSecretScanningPushProtection>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// Minimal Repository
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MinimalRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  pub archive_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub clone_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub code_of_conduct: Option<CodeOfConduct>,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub disabled: Option<bool>,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_count: Option<i64>,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_discussions: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_downloads: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_issues: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_pages: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_wiki: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<MinimalRepositoryLicense>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub network_count: Option<i64>,
  pub node_id: String,
  pub notifications_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues_count: Option<i64>,
  pub owner: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<MinimalRepositoryPermissions>,
  pub private: bool,
  pub pulls_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<String>,
  pub releases_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub role_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_and_analysis: Option<SecurityAndAnalysis>,
  /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ssh_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_count: Option<i64>,
  pub stargazers_url: String,
  pub statuses_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_count: Option<i64>,
  pub subscribers_url: String,
  pub subscription_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub svn_url: Option<String>,
  pub tags_url: String,
  pub teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  pub trees_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// A suite of checks performed on the code of a given code change
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub app: Option<Integration>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<SimpleCheckSuiteConclusion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  /// The SHA of the head commit that is being checked.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<PullRequestMinimal>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<MinimalRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<SimpleCheckSuiteStatus>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// A deployment created as the result of an Actions check run from a workflow that references an environment
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentSimple {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// Name for the target deployment environment.
  pub environment: String,
  /// Unique identifier of the deployment
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub original_environment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<Integration>,
  /// Specifies if the given environment is one that end-users directly interact with. Default: false.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub production_environment: Option<bool>,
  pub repository_url: String,
  pub statuses_url: String,
  /// Parameter to specify a task to execute
  pub task: String,
  /// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub transient_environment: Option<bool>,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunWithSimpleCheckSuiteOutput {
  pub annotations_count: i64,
  pub annotations_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub summary: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub text: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// A check performed on the code of a given code change
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunWithSimpleCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub app: Option<Integration>,
  pub check_suite: SimpleCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<CheckRunWithSimpleCheckSuiteConclusion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<DeploymentSimple>,
  pub details_url: String,
  pub external_id: String,
  /// The SHA of the commit that is being checked.
  pub head_sha: String,
  pub html_url: String,
  /// The id of the check.
  pub id: i64,
  /// The name of the check.
  pub name: String,
  pub node_id: String,
  pub output: CheckRunWithSimpleCheckSuiteOutput,
  pub pull_requests: Vec<PullRequestMinimal>,
  pub started_at: String,
  /// The phase of the lifecycle that the check is currently in.
  pub status: CheckRunWithSimpleCheckSuiteStatus,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckRunCompleted {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<WebhookCheckRunCompletedAction>,
  pub check_run: CheckRunWithSimpleCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckRunCreated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<WebhookCheckRunCreatedAction>,
  pub check_run: CheckRunWithSimpleCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_run"))]
/// The action requested by the user.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckRunRequestedActionRequestedAction {
  /// The integrator reference of the action requested by the user.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub identifier: Option<String>,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckRunRequestedAction {
  pub action: WebhookCheckRunRequestedActionAction,
  pub check_run: CheckRunWithSimpleCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  /// The action requested by the user.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_action: Option<WebhookCheckRunRequestedActionRequestedAction>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckRunRerequested {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<WebhookCheckRunRerequestedAction>,
  pub check_run: CheckRunWithSimpleCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "code_scanning_alert",
  feature = "commit_comment",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "fork",
  feature = "installation",
  feature = "installation_repositories",
  feature = "issue_comment",
  feature = "issues",
  feature = "member",
  feature = "membership",
  feature = "org_block",
  feature = "organization",
  feature = "package",
  feature = "page_build",
  feature = "project_card",
  feature = "project",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "release",
  feature = "repository",
  feature = "repository_vulnerability_alert",
  feature = "security_and_analysis",
  feature = "sponsorship",
  feature = "status",
  feature = "team",
  feature = "workflow_job",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub id: i64,
  pub login: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<UserType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_status",
  feature = "installation",
  feature = "installation_repositories",
  feature = "issue_comment",
  feature = "issues",
  feature = "workflow_job"
))]
/// The set of permissions for the GitHub app
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AppPermissions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actions: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub administration: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub checks: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_references: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub discussions: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub emails: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environments: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub members: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub metadata: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_administration: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_hooks: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_packages: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_plan: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_projects: Option<ReadWriteAdminPermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_secrets: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_self_hosted_runners: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_user_blocking: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub packages: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pages: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_hooks: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_projects: Option<ReadWriteAdminPermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret_scanning_alerts: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secrets: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_events: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_scanning_alert: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub single_file: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub team_discussions: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vulnerability_alerts: Option<ReadWritePermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflows: Option<ReadWritePermission>,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_status",
  feature = "issue_comment",
  feature = "issues",
  feature = "workflow_job"
))]
/// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct App {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The list of events for the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events: Option<Vec<AppEvents>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_url: Option<String>,
  pub html_url: String,
  /// Unique identifier of the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  /// The name of the GitHub app
  pub name: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  /// The set of permissions for the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<AppPermissions>,
  /// The slug name of the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "merge_group",
  feature = "push",
  feature = "status",
  feature = "workflow_run"
))]
/// Metaproperties for Git author/committer information.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Committer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  /// The git author's name.
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub username: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "merge_group",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleCommit {
  /// Metaproperties for Git author/committer information.
  pub author: Committer,
  /// Metaproperties for Git author/committer information.
  pub committer: Committer,
  pub id: String,
  pub message: String,
  pub timestamp: String,
  pub tree_id: String,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepoRef {
  pub id: i64,
  pub name: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequestBase {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequestHead {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(
  feature = "full",
  feature = "check_suite",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequest {
  pub base: CheckRunPullRequestBase,
  pub head: CheckRunPullRequestHead,
  pub id: i64,
  pub number: i64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteCompletedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteCompletedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteCompletedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteCompleted {
  pub action: WebhookCheckSuiteCompletedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteCompletedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRequestedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteRequestedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteRequestedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRequested {
  pub action: WebhookCheckSuiteRequestedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteRequestedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRerequestedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteRerequestedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteRerequestedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "check_suite"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRerequested {
  pub action: WebhookCheckSuiteRerequestedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteRerequestedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstanceLocation {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub end_column: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub end_line: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_column: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_line: Option<i64>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstanceMessage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub text: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstance {
  /// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
  pub analysis_key: String,
  /// Identifies the configuration under which the analysis was executed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub category: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub classifications: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_sha: Option<String>,
  /// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub location: Option<AlertInstanceLocation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<AlertInstanceMessage>,
  /// The full Git reference, formatted as `refs/heads/<branch name>`.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// State of a code scanning alert.
  pub state: AlertInstanceState,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlertTool {
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertAppearedInBranchAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertAppearedInBranchAlertState,
  pub tool: WebhookCodeScanningAlertAppearedInBranchAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranch {
  pub action: WebhookCodeScanningAlertAppearedInBranchAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertAppearedInBranchAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertClosedByUserAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertClosedByUserAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertClosedByUserAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertClosedByUserAlertState,
  pub tool: WebhookCodeScanningAlertClosedByUserAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUser {
  pub action: WebhookCodeScanningAlertClosedByUserAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertClosedByUserAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertCreatedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: serde_json::Value,
  pub dismissed_by: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_comment: Option<String>,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  pub dismissed_reason: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<serde_json::Value>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub instances_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertCreatedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertCreatedAlertState,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tool: Option<WebhookCodeScanningAlertCreatedAlertTool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreated {
  pub action: WebhookCodeScanningAlertCreatedAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertCreatedAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertFixedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertFixedAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub instances_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertFixedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertFixedAlertState,
  pub tool: WebhookCodeScanningAlertFixedAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixed {
  pub action: WebhookCodeScanningAlertFixedAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertFixedAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertReopenedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<serde_json::Value>,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<String>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertReopenedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertReopenedAlertState,
  pub tool: WebhookCodeScanningAlertReopenedAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopened {
  pub action: WebhookCodeScanningAlertReopenedAction,
  /// The code scanning alert involved in the event.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub alert: Option<WebhookCodeScanningAlertReopenedAlert>,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlertTool {
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: serde_json::Value,
  pub dismissed_by: serde_json::Value,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  pub dismissed_reason: serde_json::Value,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertReopenedByUserAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertReopenedByUserAlertState,
  pub tool: WebhookCodeScanningAlertReopenedByUserAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "code_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUser {
  pub action: WebhookCodeScanningAlertReopenedByUserAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertReopenedByUserAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "commit_comment",
  feature = "discussion",
  feature = "discussion_comment",
  feature = "issue_comment",
  feature = "issues",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread",
  feature = "release"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Reactions {
  #[serde(rename = "+1")]
  pub plus_one: i64,
  #[serde(rename = "-1")]
  pub minus_one: i64,
  pub confused: i64,
  pub eyes: i64,
  pub heart: i64,
  pub hooray: i64,
  pub laugh: i64,
  pub rocket: i64,
  pub total_count: i64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "commit_comment"))]
/// The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCommitCommentCreatedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookCommitCommentCreatedCommentAuthorAssociation,
  /// The text of the comment.
  pub body: String,
  /// The SHA of the commit to which the comment applies.
  pub commit_id: String,
  pub created_at: String,
  pub html_url: String,
  /// The ID of the commit comment.
  pub id: i64,
  /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub line: Option<i64>,
  /// The node ID of the commit comment.
  pub node_id: String,
  /// The relative path of the file to which the comment applies.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  /// The line index in the diff to which the comment applies.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub position: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "commit_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCommitCommentCreated {
  /// The action performed. Can be `created`.
  pub action: WebhookCommitCommentCreatedAction,
  /// The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
  pub comment: WebhookCommitCommentCreatedComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "create"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCreate {
  /// The repository's current description.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The name of the repository's default branch (usually `main`).
  pub master_branch: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The pusher type for the event. Can be either `user` or a deploy key.
  pub pusher_type: String,
  /// The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// The type of Git ref object created in the repository.
  pub ref_type: WebhookCreateRefType,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
/// Custom property defined on an organization
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrgCustomProperty {
  /// An ordered list of the allowed values of the property.
  /// The property can have up to 200 allowed values.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allowed_values: Option<Vec<String>>,
  /// Default value of the property
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_value: Option<Vec<String>>,
  /// Short description of the property
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The name of the property
  pub property_name: String,
  /// Whether the property is required.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub required: Option<bool>,
  /// The type of the value for the property
  pub value_type: OrgCustomPropertyValueType,
  /// Who can edit the values of the property
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub values_editable_by: Option<OrgCustomPropertyValuesEditableBy>,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCustomPropertyCreated {
  pub action: WebhookCustomPropertyCreatedAction,
  pub definition: OrgCustomProperty,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCustomPropertyDeletedDefinition {
  /// The name of the property that was deleted.
  pub property_name: String,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCustomPropertyDeleted {
  pub action: WebhookCustomPropertyDeletedAction,
  pub definition: WebhookCustomPropertyDeletedDefinition,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "custom_property"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCustomPropertyUpdated {
  pub action: WebhookCustomPropertyUpdatedAction,
  pub definition: OrgCustomProperty,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "custom_property_values"))]
/// Custom property name and associated value
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyValue {
  /// The name of the property
  pub property_name: String,
  /// The value assigned to the property
  pub value: Vec<String>,
}

#[cfg(any(feature = "full", feature = "custom_property_values"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCustomPropertyValuesUpdated {
  pub action: WebhookCustomPropertyValuesUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The new custom property values for the repository.
  pub new_property_values: Vec<CustomPropertyValue>,
  /// The old custom property values for the repository.
  pub old_property_values: Vec<CustomPropertyValue>,
  pub organization: OrganizationSimpleWebhooks,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "delete"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDelete {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The pusher type for the event. Can be either `user` or a deploy key.
  pub pusher_type: String,
  /// The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// The type of Git ref object deleted in the repository.
  pub ref_type: WebhookDeleteRefType,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details for the vulnerable package.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertPackage {
  /// The package's language or package management ecosystem.
  pub ecosystem: String,
  /// The unique package name within its ecosystem.
  pub name: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details for the vulnerable dependency.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertDependency {
  /// The full path to the dependency manifest file, relative to the root of the repository.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest_path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package: Option<DependabotAlertPackage>,
  /// The execution scope of the vulnerable dependency.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub scope: Option<DependabotAlertDependencyScope>,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details for the advisory pertaining to the Common Vulnerability Scoring System.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityAdvisoryCvss {
  /// The overall CVSS score of the advisory.
  pub score: f64,
  /// The full CVSS vector string for the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// A CWE weakness assigned to the advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityAdvisoryCwes {
  /// The unique CWE ID.
  pub cwe_id: String,
  /// The short, plain text name of the CWE.
  pub name: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// An advisory identifier.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityAdvisoryIdentifiers {
  /// The type of advisory identifier.
  #[serde(rename = "type")]
  pub type_: IdentifiersType,
  /// The value of the advisory identifer.
  pub value: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// A link to additional advisory information.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityAdvisoryReferences {
  /// The URL of the reference.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details pertaining to the package version that patches this vulnerability.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityVulnerabilityFirstPatchedVersion {
  /// The package version that patches this vulnerability.
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details pertaining to one vulnerable version range for the advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityVulnerability {
  /// Details pertaining to the package version that patches this vulnerability.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version: Option<DependabotAlertSecurityVulnerabilityFirstPatchedVersion>,
  pub package: DependabotAlertPackage,
  /// The severity of the vulnerability.
  pub severity: Severity,
  /// Conditions that identify vulnerable versions of this vulnerability's package.
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// Details for the GitHub Security Advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertSecurityAdvisory {
  /// The unique CVE ID assigned to the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cve_id: Option<String>,
  /// Details for the advisory pertaining to the Common Vulnerability Scoring System.
  pub cvss: DependabotAlertSecurityAdvisoryCvss,
  /// Details for the advisory pertaining to Common Weakness Enumeration.
  pub cwes: Vec<DependabotAlertSecurityAdvisoryCwes>,
  /// A long-form Markdown-supported description of the advisory.
  pub description: String,
  /// The unique GitHub Security Advisory ID assigned to the advisory.
  pub ghsa_id: String,
  /// Values that identify this advisory among security information sources.
  pub identifiers: Vec<DependabotAlertSecurityAdvisoryIdentifiers>,
  /// The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub published_at: String,
  /// Links to additional advisory information.
  pub references: Vec<DependabotAlertSecurityAdvisoryReferences>,
  /// The severity of the advisory.
  pub severity: Severity,
  /// A short, plain text summary of the advisory.
  pub summary: String,
  /// The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub updated_at: String,
  /// Vulnerable version range information for the advisory.
  pub vulnerabilities: Vec<DependabotAlertSecurityVulnerability>,
  /// The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
/// A Dependabot alert.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlert {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_dismissed_at: Option<String>,
  pub created_at: String,
  /// Details for the vulnerable dependency.
  pub dependency: DependabotAlertDependency,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<SimpleUser>,
  /// An optional comment associated with the alert's dismissal.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_comment: Option<String>,
  /// The reason that the alert was dismissed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<DismissedReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<String>,
  pub html_url: String,
  pub number: i64,
  pub security_advisory: DependabotAlertSecurityAdvisory,
  pub security_vulnerability: DependabotAlertSecurityVulnerability,
  /// The state of the Dependabot alert.
  pub state: DependabotAlertState,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertAutoDismissed {
  pub action: WebhookDependabotAlertAutoDismissedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertAutoReopened {
  pub action: WebhookDependabotAlertAutoReopenedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertCreated {
  pub action: WebhookDependabotAlertCreatedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertDismissed {
  pub action: WebhookDependabotAlertDismissedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertFixed {
  pub action: WebhookDependabotAlertFixedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertReintroduced {
  pub action: WebhookDependabotAlertReintroducedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "dependabot_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDependabotAlertReopened {
  pub action: WebhookDependabotAlertReopenedAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
/// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyCreatedKey {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added_by: Option<String>,
  pub created_at: String,
  pub id: i64,
  pub key: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub last_used: Option<String>,
  pub read_only: bool,
  pub title: String,
  pub url: String,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyCreated {
  pub action: WebhookDeployKeyCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
  pub key: WebhookDeployKeyCreatedKey,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
/// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyDeletedKey {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added_by: Option<String>,
  pub created_at: String,
  pub id: i64,
  pub key: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub last_used: Option<String>,
  pub read_only: bool,
  pub title: String,
  pub url: String,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "deploy_key"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyDeleted {
  pub action: WebhookDeployKeyDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
  pub key: WebhookDeployKeyDeletedKey,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_protection_rule",
  feature = "deployment_status",
  feature = "workflow_job"
))]
/// The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Deployment {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub environment: String,
  pub id: i64,
  pub node_id: String,
  pub original_environment: String,
  pub payload: serde_json::Value,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<App>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub production_environment: Option<bool>,
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository_url: String,
  pub sha: String,
  pub statuses_url: String,
  pub task: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub transient_environment: Option<bool>,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_status",
  feature = "workflow_run"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Workflow {
  pub badge_url: String,
  pub created_at: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub node_id: String,
  pub path: String,
  pub state: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunHeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunHeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<DeploymentWorkflowRunHeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<DeploymentWorkflowRunRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment",
  feature = "deployment_review",
  feature = "deployment_status"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRun {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  pub check_suite_id: i64,
  pub check_suite_node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<DeploymentWorkflowRunConclusion>,
  pub created_at: String,
  pub display_title: String,
  pub event: String,
  pub head_branch: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<DeploymentWorkflowRunHeadRepository>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  pub name: String,
  pub node_id: String,
  pub path: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<serde_json::Value>,
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows: Option<Vec<DeploymentWorkflowRunReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<DeploymentWorkflowRunRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  pub run_attempt: i64,
  pub run_number: i64,
  pub run_started_at: String,
  pub status: DeploymentWorkflowRunStatus,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<User>,
  pub updated_at: String,
  pub url: String,
  pub workflow_id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "deployment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentCreated {
  pub action: WebhookDeploymentCreatedAction,
  /// The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
  pub deployment: Deployment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// Hypermedia Link
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Link {
  pub href: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// The status of auto merging a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AutoMerge {
  /// Commit message for the merge commit.
  pub commit_message: String,
  /// Title for the merge commit message.
  pub commit_title: String,
  pub enabled_by: SimpleUser,
  /// The merge method to use.
  pub merge_method: AutoMergeMergeMethod,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestBaseRepoOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestBaseRepoPermissions {
  pub admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  pub pull: bool,
  pub push: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestBaseRepo {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  pub archive_url: String,
  pub archived: bool,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub clone_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub created_at: String,
  pub default_branch: String,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub disabled: bool,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks: i64,
  pub forks_count: i64,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub git_url: String,
  pub has_discussions: bool,
  pub has_downloads: bool,
  pub has_issues: bool,
  pub has_pages: bool,
  pub has_projects: bool,
  pub has_wiki: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<LicenseSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub master_branch: Option<String>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  pub name: String,
  pub node_id: String,
  pub notifications_url: String,
  pub open_issues: i64,
  pub open_issues_count: i64,
  pub owner: PullRequestBaseRepoOwner,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<PullRequestBaseRepoPermissions>,
  pub private: bool,
  pub pulls_url: String,
  pub pushed_at: String,
  pub releases_url: String,
  pub size: i64,
  pub ssh_url: String,
  pub stargazers_count: i64,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub svn_url: String,
  pub tags_url: String,
  pub teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  pub trees_url: String,
  pub updated_at: String,
  pub url: String,
  /// The repository visibility: public, private, or internal.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  pub watchers: i64,
  pub watchers_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestBaseUser {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: PullRequestBaseRepo,
  pub sha: String,
  pub user: PullRequestBaseUser,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHeadRepoLicense {
  pub key: String,
  pub name: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub spdx_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHeadRepoOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHeadRepoPermissions {
  pub admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  pub pull: bool,
  pub push: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHeadRepo {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  pub archive_url: String,
  pub archived: bool,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub clone_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub created_at: String,
  pub default_branch: String,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub disabled: bool,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks: i64,
  pub forks_count: i64,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub git_url: String,
  pub has_discussions: bool,
  pub has_downloads: bool,
  pub has_issues: bool,
  pub has_pages: bool,
  pub has_projects: bool,
  pub has_wiki: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<PullRequestHeadRepoLicense>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub master_branch: Option<String>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  pub name: String,
  pub node_id: String,
  pub notifications_url: String,
  pub open_issues: i64,
  pub open_issues_count: i64,
  pub owner: PullRequestHeadRepoOwner,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<PullRequestHeadRepoPermissions>,
  pub private: bool,
  pub pulls_url: String,
  pub pushed_at: String,
  pub releases_url: String,
  pub size: i64,
  pub ssh_url: String,
  pub stargazers_count: i64,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub svn_url: String,
  pub tags_url: String,
  pub teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  pub trees_url: String,
  pub updated_at: String,
  pub url: String,
  /// The repository visibility: public, private, or internal.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  pub watchers: i64,
  pub watchers_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHeadUser {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<PullRequestHeadRepo>,
  pub sha: String,
  pub user: PullRequestHeadUser,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestLabels {
  pub color: String,
  #[serde(rename = "default")]
  pub default_: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub id: i64,
  pub name: String,
  pub node_id: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "issue_comment",
  feature = "issues",
  feature = "milestone",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// A collection of related issues and pull requests.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Milestone {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub closed_issues: i64,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub due_on: Option<String>,
  pub html_url: String,
  pub id: i64,
  pub labels_url: String,
  pub node_id: String,
  /// The number of the milestone.
  pub number: i64,
  pub open_issues: i64,
  /// The state of the milestone.
  pub state: MilestoneState,
  /// The title of the milestone.
  pub title: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// Groups of organization members that gives permissions on specified repositories.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamSimple {
  /// Description of the team
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub html_url: String,
  /// Unique identifier of the team
  pub id: i64,
  /// Distinguished Name (DN) that team maps to within LDAP environment
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ldap_dn: Option<String>,
  pub members_url: String,
  /// Name of the team
  pub name: String,
  pub node_id: String,
  /// The notification setting the team has set
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notification_setting: Option<String>,
  /// Permission that the team will have for its repositories
  pub permission: String,
  /// The level of privacy this team should have
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy: Option<String>,
  pub repositories_url: String,
  pub slug: String,
  /// URL for the team
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "deployment_protection_rule",
  feature = "pull_request"
))]
/// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequest {
  #[serde(rename = "_links")]
  pub links: PullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  pub additions: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<SimpleUser>>,
  pub author_association: AuthorAssociation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<AutoMerge>,
  pub base: PullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  pub changed_files: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments: i64,
  pub comments_url: String,
  pub commits: i64,
  pub commits_url: String,
  pub created_at: String,
  pub deletions: i64,
  pub diff_url: String,
  /// Indicates whether or not the pull request is a draft.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: PullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<PullRequestLabels>,
  pub locked: bool,
  /// Indicates whether maintainers can modify the pull request.
  pub maintainer_can_modify: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mergeable: Option<bool>,
  pub mergeable_state: String,
  pub merged: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_by: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  /// Number uniquely identifying the pull request within its repository.
  pub number: i64,
  pub patch_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rebaseable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_reviewers: Option<Vec<SimpleUser>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_teams: Option<Vec<TeamSimple>>,
  pub review_comment_url: String,
  pub review_comments: i64,
  pub review_comments_url: String,
  /// State of this Pull Request. Either `open` or `closed`.
  pub state: PullRequestState,
  pub statuses_url: String,
  /// The title of the pull request.
  pub title: String,
  pub updated_at: String,
  pub url: String,
  pub user: SimpleUser,
}

#[cfg(any(feature = "full", feature = "deployment_protection_rule"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentProtectionRuleRequested {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<WebhookDeploymentProtectionRuleRequestedAction>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  /// The URL to review the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment_callback_url: Option<String>,
  /// The name of the environment that has the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  /// The event that triggered the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<PullRequest>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedApprover {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewApprovedReviewersType>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  pub name: serde_json::Value,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedWorkflowJobRuns {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApproved {
  pub action: WebhookDeploymentReviewApprovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub approver: Option<WebhookDeploymentReviewApprovedApprover>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewers: Option<Vec<WebhookDeploymentReviewApprovedReviewers>>,
  pub sender: SimpleUserWebhooks,
  pub since: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_run: Option<WebhookDeploymentReviewApprovedWorkflowJobRun>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_runs: Option<Vec<WebhookDeploymentReviewApprovedWorkflowJobRuns>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedApprover {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewRejectedReviewersType>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  pub name: serde_json::Value,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedWorkflowJobRuns {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejected {
  pub action: WebhookDeploymentReviewRejectedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub approver: Option<WebhookDeploymentReviewRejectedApprover>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewers: Option<Vec<WebhookDeploymentReviewRejectedReviewers>>,
  pub sender: SimpleUserWebhooks,
  pub since: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_run: Option<WebhookDeploymentReviewRejectedWorkflowJobRun>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_runs: Option<Vec<WebhookDeploymentReviewRejectedWorkflowJobRuns>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequestedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewRequestedReviewersType>,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequestedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "deployment_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequested {
  pub action: WebhookDeploymentReviewRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requestor: Option<User>,
  pub reviewers: Vec<WebhookDeploymentReviewRequestedReviewers>,
  pub sender: SimpleUserWebhooks,
  pub since: String,
  pub workflow_job_run: WebhookDeploymentReviewRequestedWorkflowJobRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreatedCheckRun {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  /// The result of the completed check run. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookDeploymentStatusCreatedCheckRunConclusion>,
  pub details_url: String,
  pub external_id: String,
  /// The SHA of the commit that is being checked.
  pub head_sha: String,
  pub html_url: String,
  /// The id of the check.
  pub id: i64,
  /// The name of the check run.
  pub name: String,
  pub node_id: String,
  pub started_at: String,
  /// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
  pub status: WebhookDeploymentStatusCreatedCheckRunStatus,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
/// The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreatedDeploymentStatus {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<User>,
  pub deployment_url: String,
  /// The optional human-readable description added to the status.
  pub description: String,
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment_url: Option<String>,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub log_url: Option<String>,
  pub node_id: String,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<App>,
  pub repository_url: String,
  /// The new state. Can be `pending`, `success`, `failure`, or `error`.
  pub state: String,
  /// The optional link added to the status.
  pub target_url: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "deployment_status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreated {
  pub action: WebhookDeploymentStatusCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run: Option<WebhookDeploymentStatusCreatedCheckRun>,
  /// The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
  pub deployment: Deployment,
  /// The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).
  pub deployment_status: WebhookDeploymentStatusCreatedDeploymentStatus,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionAnsweredAnswer {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionAnsweredAnswerAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub parent_id: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategory {
  pub created_at: String,
  pub description: String,
  pub emoji: String,
  pub id: i64,
  pub is_answerable: bool,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  pub repository_id: i64,
  pub slug: String,
  pub updated_at: String,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "discussion_comment"
))]
/// A Discussion in a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Discussion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_chosen_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_chosen_by: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_html_url: Option<String>,
  /// How the author is associated with the repository.
  pub author_association: DiscussionAuthorAssociation,
  pub body: String,
  pub category: DiscussionCategory,
  pub comments: i64,
  pub created_at: String,
  pub html_url: String,
  pub id: i64,
  pub locked: bool,
  pub node_id: String,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  /// The current state of the discussion.
  /// `converting` means that the discussion is being converted from an issue.
  /// `transferring` means that the discussion is being transferred from another repository.
  pub state: DiscussionState,
  /// The reason for the current state
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state_reason: Option<DiscussionStateReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  pub title: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionAnswered {
  pub action: WebhookDiscussionAnsweredAction,
  pub answer: WebhookDiscussionAnsweredAnswer,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCategoryChangedChangesCategoryFrom {
  pub created_at: String,
  pub description: String,
  pub emoji: String,
  pub id: i64,
  pub is_answerable: bool,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  pub repository_id: i64,
  pub slug: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCategoryChangedChangesCategory {
  pub from: WebhookDiscussionCategoryChangedChangesCategoryFrom,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCategoryChangedChanges {
  pub category: WebhookDiscussionCategoryChangedChangesCategory,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCategoryChanged {
  pub action: WebhookDiscussionCategoryChangedAction,
  pub changes: WebhookDiscussionCategoryChangedChanges,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionClosed {
  pub action: WebhookDiscussionClosedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentCreatedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentCreatedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentCreated {
  pub action: WebhookDiscussionCommentCreatedAction,
  pub comment: WebhookDiscussionCommentCreatedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentDeletedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentDeletedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentDeleted {
  pub action: WebhookDiscussionCommentDeletedAction,
  pub comment: WebhookDiscussionCommentDeletedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedChangesBody {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedChanges {
  pub body: WebhookDiscussionCommentEditedChangesBody,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentEditedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "discussion_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEdited {
  pub action: WebhookDiscussionCommentEditedAction,
  pub changes: WebhookDiscussionCommentEditedChanges,
  pub comment: WebhookDiscussionCommentEditedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCreatedDiscussionItem2Category {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub emoji: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_answerable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCreatedDiscussionItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCreatedDiscussionItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCreatedDiscussionItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<serde_json::Value>,
  pub answer_chosen_at: serde_json::Value,
  pub answer_chosen_by: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub category: Option<WebhookDiscussionCreatedDiscussionItem2Category>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub locked: WebhookDiscussionCreatedDiscussionItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookDiscussionCreatedDiscussionItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: WebhookDiscussionCreatedDiscussionItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookDiscussionCreatedDiscussionItem2User>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCreated {
  pub action: WebhookDiscussionCreatedAction,
  pub discussion: WebhookDiscussionCreatedDiscussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionDeleted {
  pub action: WebhookDiscussionDeletedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionEditedChangesBody {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionEditedChangesTitle {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookDiscussionEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookDiscussionEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionEdited {
  pub action: WebhookDiscussionEditedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookDiscussionEditedChanges>,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "discussion",
  feature = "issue_comment",
  feature = "issues",
  feature = "label",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Label {
  /// 6-character hex code, without the leading #, identifying the color
  pub color: String,
  #[serde(rename = "default")]
  pub default_: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub id: i64,
  /// The name of the label.
  pub name: String,
  pub node_id: String,
  /// URL for the label
  pub url: String,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionLabeled {
  pub action: WebhookDiscussionLabeledAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionLocked {
  pub action: WebhookDiscussionLockedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionPinned {
  pub action: WebhookDiscussionPinnedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionReopened {
  pub action: WebhookDiscussionReopenedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionTransferredChanges {
  pub new_discussion: Discussion,
  pub new_repository: RepositoryWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionTransferred {
  pub action: WebhookDiscussionTransferredAction,
  pub changes: WebhookDiscussionTransferredChanges,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionUnansweredOldAnswer {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionUnansweredOldAnswerAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub parent_id: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionUnanswered {
  pub action: WebhookDiscussionUnansweredAction,
  pub discussion: Discussion,
  pub old_answer: WebhookDiscussionUnansweredOldAnswer,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionUnlabeled {
  pub action: WebhookDiscussionUnlabeledAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionUnlocked {
  pub action: WebhookDiscussionUnlockedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "discussion"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionUnpinned {
  pub action: WebhookDiscussionUnpinnedAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "fork",
  feature = "issues",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "security_and_analysis",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct License {
  pub key: String,
  pub name: String,
  pub node_id: String,
  pub spdx_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "fork",
  feature = "issues",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "security_and_analysis",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryPermissions {
  pub admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  pub pull: bool,
  pub push: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(
  feature = "full",
  feature = "fork",
  feature = "issues",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "push",
  feature = "security_and_analysis",
  feature = "team"
))]
/// A git repository
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Repository {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow private forks
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  /// Whether to allow merge commits for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  /// Whether to allow rebase merges for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  /// Whether to allow squash merges for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  pub archive_url: String,
  /// Whether the repository is archived.
  pub archived: bool,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub clone_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub created_at: StringOrInteger,
  /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub custom_properties: Option<serde_json::Value>,
  /// The default branch of the repository.
  pub default_branch: String,
  /// Whether to delete head branches when pull requests are merged
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// Returns whether or not this repository is disabled.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub disabled: Option<bool>,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks: i64,
  pub forks_count: i64,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub git_url: String,
  /// Whether downloads are enabled.
  pub has_downloads: bool,
  /// Whether issues are enabled.
  pub has_issues: bool,
  pub has_pages: bool,
  /// Whether projects are enabled.
  pub has_projects: bool,
  /// Whether the wiki is enabled.
  pub has_wiki: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  /// Unique identifier of the repository
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<License>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub master_branch: Option<String>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  pub notifications_url: String,
  pub open_issues: i64,
  pub open_issues_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<RepositoryPermissions>,
  /// Whether the repository is private or public.
  pub private: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public: Option<bool>,
  pub pulls_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<StringOrInteger>,
  pub releases_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub role_name: Option<String>,
  pub size: i64,
  pub ssh_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers: Option<i64>,
  pub stargazers_count: i64,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub svn_url: String,
  pub tags_url: String,
  pub teams_url: String,
  pub topics: Vec<String>,
  pub trees_url: String,
  pub updated_at: String,
  pub url: String,
  pub visibility: RepositoryVisibility,
  pub watchers: i64,
  pub watchers_count: i64,
  /// Whether to require contributors to sign off on web-based commits
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(feature = "full", feature = "fork"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookForkForkeeItem2Owner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "fork"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookForkForkeeItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub clone_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub disabled: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<WebhookForkForkeeItem2Fork>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_downloads: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_issues: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_pages: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_wiki: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookForkForkeeItem2Owner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ssh_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub svn_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "fork"))]
/// A user forks a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookFork {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  /// The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.
  pub forkee: WebhookForkForkee,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "github_app_authorization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookGithubAppAuthorizationRevoked {
  pub action: WebhookGithubAppAuthorizationRevokedAction,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "gollum"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookGollumPages {
  /// The action that was performed on the page. Can be `created` or `edited`.
  pub action: WebhookGollumPagesAction,
  /// Points to the HTML wiki page.
  pub html_url: String,
  /// The name of the page.
  pub page_name: String,
  /// The latest commit SHA of the page.
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub summary: Option<String>,
  /// The current page title.
  pub title: String,
}

#[cfg(any(feature = "full", feature = "gollum"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookGollum {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The pages that were updated.
  pub pages: Vec<WebhookGollumPages>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "installation",
  feature = "installation_repositories"
))]
/// An enterprise on GitHub.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Enterprise {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// A short description of the enterprise.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub html_url: String,
  /// Unique identifier of the enterprise
  pub id: i64,
  /// The name of the enterprise.
  pub name: String,
  pub node_id: String,
  /// The slug url identifier for the enterprise.
  pub slug: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  /// The enterprise's website URL.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub website_url: Option<String>,
}

#[cfg(any(
  feature = "full",
  feature = "installation",
  feature = "installation_repositories"
))]
/// Installation
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Installation {
  pub access_tokens_url: String,
  pub account: InstallationAccount,
  pub app_id: i64,
  pub app_slug: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contact_email: Option<String>,
  pub created_at: String,
  pub events: Vec<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_multiple_single_files: Option<bool>,
  pub html_url: String,
  /// The ID of the installation.
  pub id: i64,
  pub permissions: AppPermissions,
  pub repositories_url: String,
  /// Describe whether all repositories have been selected or there's a selection involved
  pub repository_selection: RepositorySelection,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub single_file_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub single_file_paths: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub suspended_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub suspended_by: Option<SimpleUser>,
  /// The ID of the user or organization this token is being scoped to.
  pub target_id: i64,
  pub target_type: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationCreatedRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationCreated {
  pub action: WebhookInstallationCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationCreatedRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationDeletedRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationDeleted {
  pub action: WebhookInstallationDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationDeletedRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationNewPermissionsAcceptedRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationNewPermissionsAccepted {
  pub action: WebhookInstallationNewPermissionsAcceptedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationNewPermissionsAcceptedRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAddedRepositoriesAdded {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAddedRepositoriesRemoved {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  /// Unique identifier of the repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  /// The name of the repository.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  /// Whether the repository is private or public.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAdded {
  pub action: WebhookInstallationRepositoriesAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects, which were added to the installation.
  pub repositories_added: Vec<WebhookInstallationRepositoriesAddedRepositoriesAdded>,
  /// An array of repository objects, which were removed from the installation.
  pub repositories_removed: Vec<WebhookInstallationRepositoriesAddedRepositoriesRemoved>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// Describe whether all repositories have been selected or there's a selection involved
  pub repository_selection: RepositorySelection,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemovedRepositoriesAdded {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemovedRepositoriesRemoved {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation_repositories"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemoved {
  pub action: WebhookInstallationRepositoriesRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects, which were added to the installation.
  pub repositories_added: Vec<WebhookInstallationRepositoriesRemovedRepositoriesAdded>,
  /// An array of repository objects, which were removed from the installation.
  pub repositories_removed: Vec<WebhookInstallationRepositoriesRemovedRepositoriesRemoved>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// Describe whether all repositories have been selected or there's a selection involved
  pub repository_selection: RepositorySelection,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationSuspendRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationSuspend {
  pub action: WebhookInstallationSuspendAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationSuspendRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedAccount {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<String>,
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_organization_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_repository_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_verified: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub members_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_gists: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_members_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_repos: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub website_url: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChangesLogin {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChangesSlug {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<WebhookInstallationTargetRenamedChangesLogin>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<WebhookInstallationTargetRenamedChangesSlug>,
}

#[cfg(any(feature = "full", feature = "installation_target"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamed {
  pub account: WebhookInstallationTargetRenamedAccount,
  pub action: WebhookInstallationTargetRenamedAction,
  pub changes: WebhookInstallationTargetRenamedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: SimpleInstallation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  pub target_type: String,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationUnsuspendRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "installation"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationUnsuspend {
  pub action: WebhookInstallationUnsuspendAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationUnsuspendRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
/// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssueComment {
  /// How the author is associated with the repository.
  pub author_association: IssueCommentAuthorAssociation,
  /// Contents of the issue comment
  pub body: String,
  pub created_at: String,
  pub html_url: String,
  /// Unique identifier of the issue comment
  pub id: i64,
  pub issue_url: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<Integration>,
  pub reactions: Reactions,
  pub updated_at: String,
  /// URL for the issue comment
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuePullRequest {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub diff_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub patch_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment", feature = "issues"))]
/// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Issue {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<IssueActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: IssueAuthorAssociation,
  /// Contents of the issue
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments: i64,
  pub comments_url: String,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub events_url: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Label>>,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<App>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_request: Option<IssuePullRequest>,
  pub reactions: Reactions,
  pub repository_url: String,
  /// State of the issue; either 'open' or 'closed'
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<IssueState>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  /// Title of the issue
  pub title: String,
  pub updated_at: String,
  /// URL for the issue
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentCreatedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentCreatedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentCreatedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreated {
  pub action: WebhookIssueCommentCreatedAction,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentCreatedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentDeletedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentDeletedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentDeletedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeleted {
  pub action: WebhookIssueCommentDeletedAction,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentDeletedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
/// The changes to the comment.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookIssueCommentEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentEditedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentEditedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentEditedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issue_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEdited {
  pub action: WebhookIssueCommentEditedAction,
  /// The changes to the comment.
  pub changes: WebhookIssueCommentEditedChanges,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentEditedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesAssigned {
  /// The action that was performed.
  pub action: WebhookIssuesAssignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesClosedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesClosedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesClosedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesClosedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: WebhookIssuesClosedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesClosedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesClosed {
  /// The action that was performed.
  pub action: WebhookIssuesClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: WebhookIssuesClosedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesDeleted {
  pub action: WebhookIssuesDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesDemilestonedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesDemilestonedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesDemilestonedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesDemilestonedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesDemilestonedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesDemilestoned {
  pub action: WebhookIssuesDemilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: WebhookIssuesDemilestonedIssue,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesEditedChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesEditedChangesTitle {
  /// The previous version of the title.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "issues"))]
/// The changes to the issue.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookIssuesEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookIssuesEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesEdited {
  pub action: WebhookIssuesEditedAction,
  /// The changes to the issue.
  pub changes: WebhookIssuesEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesLabeled {
  pub action: WebhookIssuesLabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesLockedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesLockedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesLockedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookIssuesLockedIssueItem2ActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: WebhookIssuesLockedIssueItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesLockedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesLockedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesLocked {
  pub action: WebhookIssuesLockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: WebhookIssuesLockedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesMilestonedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesMilestonedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesMilestonedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesMilestonedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesMilestonedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesMilestoned {
  pub action: WebhookIssuesMilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: WebhookIssuesMilestonedIssue,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesOpenedChanges {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub old_issue: Option<Issue>,
  /// A git repository
  pub old_repository: Repository,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesOpened {
  pub action: WebhookIssuesOpenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookIssuesOpenedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesPinned {
  pub action: WebhookIssuesPinnedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesReopenedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesReopenedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesReopenedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesReopenedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: WebhookIssuesReopenedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesReopenedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesReopened {
  pub action: WebhookIssuesReopenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: WebhookIssuesReopenedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesTransferredChanges {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub new_issue: Issue,
  /// A git repository
  pub new_repository: Repository,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesTransferred {
  pub action: WebhookIssuesTransferredAction,
  pub changes: WebhookIssuesTransferredChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnassigned {
  /// The action that was performed.
  pub action: WebhookIssuesUnassignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnlabeled {
  pub action: WebhookIssuesUnlabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnlockedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnlockedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnlockedIssueItem2 {
  pub active_lock_reason: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: WebhookIssuesUnlockedIssueItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssuesUnlockedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssuesUnlockedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnlocked {
  pub action: WebhookIssuesUnlockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: WebhookIssuesUnlockedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "issues"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssuesUnpinned {
  pub action: WebhookIssuesUnpinnedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelCreated {
  pub action: WebhookLabelCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelDeleted {
  pub action: WebhookLabelDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelEditedChangesColor {
  /// The previous version of the color if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelEditedChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelEditedChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "label"))]
/// The changes to the label if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub color: Option<WebhookLabelEditedChangesColor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<WebhookLabelEditedChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookLabelEditedChangesName>,
}

#[cfg(any(feature = "full", feature = "label"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookLabelEdited {
  pub action: WebhookLabelEditedAction,
  /// The changes to the label if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookLabelEditedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MarketplacePurchaseAccount {
  pub id: i64,
  pub login: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  pub type_: String,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MarketplacePurchasePlan {
  pub bullets: Vec<String>,
  pub description: String,
  pub has_free_trial: bool,
  pub id: i64,
  pub monthly_price_in_cents: i64,
  pub name: String,
  pub price_model: MarketplacePurchasePlanPriceModel,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  pub yearly_price_in_cents: i64,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MarketplacePurchase {
  pub account: MarketplacePurchaseAccount,
  pub billing_cycle: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  pub on_free_trial: bool,
  pub plan: MarketplacePurchasePlan,
  pub unit_count: i64,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelled {
  pub action: WebhookMarketplacePurchaseCancelledAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchaseCancelledMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChanged {
  pub action: WebhookMarketplacePurchaseChangedAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchaseChangedMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChange {
  pub action: WebhookMarketplacePurchasePendingChangeAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePendingChangeMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2 {
  pub next_billing_date: String,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeCancelled {
  pub action: WebhookMarketplacePurchasePendingChangeCancelledAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "marketplace_purchase"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchased {
  pub action: WebhookMarketplacePurchasePurchasedAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePurchasedMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "member"))]
/// This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
/// role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
/// assigned to the collaborator, use the `role_name` field instead, which will provide the full
/// role name, including custom roles.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberAddedChangesPermission {
  pub to: WebhookMemberAddedChangesPermissionTo,
}

#[cfg(any(feature = "full", feature = "member"))]
/// The role assigned to the collaborator.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberAddedChangesRoleName {
  pub to: String,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberAddedChanges {
  /// This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
  /// role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
  /// assigned to the collaborator, use the `role_name` field instead, which will provide the full
  /// role name, including custom roles.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permission: Option<WebhookMemberAddedChangesPermission>,
  /// The role assigned to the collaborator.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub role_name: Option<WebhookMemberAddedChangesRoleName>,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberAdded {
  pub action: WebhookMemberAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookMemberAddedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberEditedChangesOldPermission {
  /// The previous permissions of the collaborator if the action was edited.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberEditedChangesPermission {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "member"))]
/// The changes to the collaborator permissions
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub old_permission: Option<WebhookMemberEditedChangesOldPermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permission: Option<WebhookMemberEditedChangesPermission>,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberEdited {
  pub action: WebhookMemberEditedAction,
  /// The changes to the collaborator permissions
  pub changes: WebhookMemberEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "member"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMemberRemoved {
  pub action: WebhookMemberRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamParent {
  /// Description of the team
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub html_url: String,
  /// Unique identifier of the team
  pub id: i64,
  pub members_url: String,
  /// Name of the team
  pub name: String,
  pub node_id: String,
  /// Whether team members will receive notifications when their team is @mentioned
  pub notification_setting: TeamParentNotificationSetting,
  /// Permission that the team will have for its repositories
  pub permission: String,
  pub privacy: TeamParentPrivacy,
  pub repositories_url: String,
  pub slug: String,
  /// URL for the team
  pub url: String,
}

#[cfg(any(
  feature = "full",
  feature = "membership",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread",
  feature = "repository_advisory",
  feature = "team_add",
  feature = "team"
))]
/// Groups of organization members that gives permissions on specified repositories.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Team {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<bool>,
  /// Description of the team
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  /// Unique identifier of the team
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub members_url: Option<String>,
  /// Name of the team
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notification_setting: Option<TeamNotificationSetting>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent: Option<TeamParent>,
  /// Permission that the team will have for its repositories
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permission: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy: Option<TeamPrivacy>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  /// URL for the team
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "membership"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMembershipAdded {
  pub action: WebhookMembershipAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// The scope of the membership. Currently, can only be `team`.
  pub scope: WebhookMembershipAddedScope,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<User>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "membership"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMembershipRemoved {
  pub action: WebhookMembershipRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// The scope of the membership. Currently, can only be `team`.
  pub scope: WebhookMembershipRemovedScope,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<User>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
/// A group of pull requests that the merge queue has grouped together to be merged.
///
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MergeGroup {
  /// The full ref of the branch the merge group will be merged into.
  pub base_ref: String,
  /// The SHA of the merge group's parent commit.
  pub base_sha: String,
  pub head_commit: SimpleCommit,
  /// The full ref of the merge group.
  pub head_ref: String,
  /// The SHA of the merge group.
  pub head_sha: String,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMergeGroupChecksRequested {
  pub action: WebhookMergeGroupChecksRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub merge_group: MergeGroup,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "merge_group"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMergeGroupDestroyed {
  pub action: WebhookMergeGroupDestroyedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub merge_group: MergeGroup,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reason: Option<WebhookMergeGroupDestroyedReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "meta"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMetaDeletedHookConfig {
  pub content_type: WebhookMetaDeletedHookConfigContentType,
  pub insecure_ssl: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret: Option<String>,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "meta"))]
/// The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMetaDeletedHook {
  pub active: bool,
  pub config: WebhookMetaDeletedHookConfig,
  pub created_at: String,
  pub events: Vec<WebhookMetaDeletedHookEvents>,
  pub id: i64,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "meta"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMetaDeleted {
  pub action: WebhookMetaDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  /// The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
  pub hook: WebhookMetaDeletedHook,
  /// The id of the modified webhook.
  pub hook_id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneClosed {
  pub action: WebhookMilestoneClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneCreated {
  pub action: WebhookMilestoneCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneDeleted {
  pub action: WebhookMilestoneDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneEditedChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneEditedChangesDueOn {
  /// The previous version of the due date if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneEditedChangesTitle {
  /// The previous version of the title if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "milestone"))]
/// The changes to the milestone if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<WebhookMilestoneEditedChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub due_on: Option<WebhookMilestoneEditedChangesDueOn>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookMilestoneEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneEdited {
  pub action: WebhookMilestoneEditedAction,
  /// The changes to the milestone if the action was `edited`.
  pub changes: WebhookMilestoneEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "milestone"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMilestoneOpened {
  pub action: WebhookMilestoneOpenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "org_block"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrgBlockBlocked {
  pub action: WebhookOrgBlockBlockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blocked_user: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "org_block"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrgBlockUnblocked {
  pub action: WebhookOrgBlockUnblockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blocked_user: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "organization"))]
/// The membership between the user and the organization. Not present when the action is `member_invited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Membership {
  pub organization_url: String,
  pub role: String,
  pub state: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationDeleted {
  pub action: WebhookOrganizationDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub membership: Option<Membership>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberAdded {
  pub action: WebhookOrganizationMemberAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  pub membership: Membership,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "organization"))]
/// The invitation for the user or email if the action is `member_invited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberInvitedInvitation {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub failed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub failed_reason: Option<String>,
  pub id: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub invitation_source: Option<String>,
  pub invitation_teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub inviter: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  pub node_id: String,
  pub role: String,
  pub team_count: f64,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberInvited {
  pub action: WebhookOrganizationMemberInvitedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The invitation for the user or email if the action is `member_invited`.
  pub invitation: WebhookOrganizationMemberInvitedInvitation,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberRemoved {
  pub action: WebhookOrganizationMemberRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  pub membership: Membership,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationRenamedChangesLogin {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationRenamedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<WebhookOrganizationRenamedChangesLogin>,
}

#[cfg(any(feature = "full", feature = "organization"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationRenamed {
  pub action: WebhookOrganizationRenamedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookOrganizationRenamedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub membership: Option<Membership>,
  pub organization: OrganizationSimpleWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionContainerMetadataTag {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub digest: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionContainerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag: Option<WebhookPackagePublishedPackagePackageVersionContainerMetadataTag>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionNpmMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bin: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bugs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cpu: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dev_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub directories: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dist: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub engines: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub files: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_head: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_shrinkwrap: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation_command: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keywords: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub main: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainers: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub man: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_user: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub optional_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub os: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub peer_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_via_actions: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub scripts: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionNugetMetadataValueItem4 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionNugetMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<StringOrInteger>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub value: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  pub size: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "package", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRubygemsMetadataVersionInfo {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "package", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRubygemsMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub metadata: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub platform: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version_info: Option<WebhookRubygemsMetadataVersionInfo>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body_html: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub container_metadata: Option<WebhookPackagePublishedPackagePackageVersionContainerMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata: Option<Vec<WebhookPackagePublishedPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_metadata: Option<WebhookPackagePublishedPackagePackageVersionNpmMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub nuget_metadata: Option<Vec<WebhookPackagePublishedPackagePackageVersionNugetMetadata>>,
  pub package_files: Vec<WebhookPackagePublishedPackagePackageVersionPackageFiles>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookPackagePublishedPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<WebhookRubygemsMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source_url: Option<String>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackageRegistry {
  pub about_url: String,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
  pub vendor: String,
}

#[cfg(any(feature = "full", feature = "package"))]
/// Information about the package.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublishedPackage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  pub package_type: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_version: Option<WebhookPackagePublishedPackagePackageVersion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<WebhookPackagePublishedPackageRegistry>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackagePublished {
  pub action: WebhookPackagePublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// Information about the package.
  pub package: WebhookPackagePublishedPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  pub sha256: String,
  pub size: i64,
  pub state: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub body: String,
  pub body_html: String,
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata: Option<Vec<WebhookPackageUpdatedPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  pub package_files: Vec<WebhookPackageUpdatedPackagePackageVersionPackageFiles>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookPackageUpdatedPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<WebhookRubygemsMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source_url: Option<String>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  pub target_commitish: String,
  pub target_oid: String,
  pub updated_at: String,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackageRegistry {
  pub about_url: String,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
  pub vendor: String,
}

#[cfg(any(feature = "full", feature = "package"))]
/// Information about the package.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdatedPackage {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  pub package_type: String,
  pub package_version: WebhookPackageUpdatedPackagePackageVersion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<WebhookPackageUpdatedPackageRegistry>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPackageUpdated {
  pub action: WebhookPackageUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// Information about the package.
  pub package: WebhookPackageUpdatedPackage,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "page_build"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuildBuildError {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
}

#[cfg(any(feature = "full", feature = "page_build"))]
/// The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuildBuild {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  pub created_at: String,
  pub duration: i64,
  pub error: WebhookPageBuildBuildError,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pusher: Option<User>,
  pub status: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "page_build"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuild {
  /// The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.
  #[serde(rename = "build")]
  pub build_: WebhookPageBuildBuild,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
/// New requested permissions, categorized by type of permission.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsAdded {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
/// Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsResult {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
/// Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsUpgraded {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
/// Details of a Personal Access Token Request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequest {
  /// Date and time when the request for access was created.
  pub created_at: String,
  /// Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls.
  pub id: i64,
  pub owner: SimpleUser,
  /// New requested permissions, categorized by type of permission.
  pub permissions_added: PersonalAccessTokenRequestPermissionsAdded,
  /// Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.
  pub permissions_result: PersonalAccessTokenRequestPermissionsResult,
  /// Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.
  pub permissions_upgraded: PersonalAccessTokenRequestPermissionsUpgraded,
  /// An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<PersonalAccessTokenRequestRepositories>>,
  /// The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_count: Option<i64>,
  /// Type of repository selection requested.
  pub repository_selection: RequestRepositorySelection,
  /// Whether the associated fine-grained personal access token has expired.
  pub token_expired: bool,
  /// Date and time when the associated fine-grained personal access token expires.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub token_expires_at: Option<String>,
  /// Date and time when the associated fine-grained personal access token was last used for authentication.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub token_last_used_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestApproved {
  pub action: WebhookPersonalAccessTokenRequestApprovedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimpleWebhooks,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestCancelled {
  pub action: WebhookPersonalAccessTokenRequestCancelledAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimpleWebhooks,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestCreated {
  pub action: WebhookPersonalAccessTokenRequestCreatedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimpleWebhooks,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "personal_access_token_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestDenied {
  pub action: WebhookPersonalAccessTokenRequestDeniedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimpleWebhooks,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "ping"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookConfig {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_type: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub insecure_ssl: Option<StringOrNumber>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "ping"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct HookResponse {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub code: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
}

#[cfg(any(feature = "full", feature = "ping"))]
/// The webhook that is being pinged
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Webhook {
  /// Determines whether the hook is actually triggered for the events it subscribes to.
  pub active: bool,
  /// Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub app_id: Option<i64>,
  pub config: WebhookConfig,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deliveries_url: Option<String>,
  /// Determines what events the hook is triggered for. Default: ['push'].
  pub events: Vec<String>,
  /// Unique identifier of the webhook.
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub last_response: Option<HookResponse>,
  /// The type of webhook. The only valid value is 'web'.
  pub name: WebhookName,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ping_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub test_url: Option<String>,
  #[serde(rename = "type")]
  pub type_: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "ping"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPing {
  /// The webhook that is being pinged
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hook: Option<Webhook>,
  /// The ID of the webhook that triggered the ping.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hook_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  /// Random string of GitHub zen.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zen: Option<String>,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConvertedChangesNote {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConvertedChanges {
  pub note: WebhookProjectCardConvertedChangesNote,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectCard {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after_id: Option<i64>,
  /// Whether or not the card is archived
  pub archived: bool,
  pub column_id: i64,
  pub column_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_url: Option<String>,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<User>,
  /// The project card's ID
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub note: Option<String>,
  pub project_url: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConverted {
  pub action: WebhookProjectCardConvertedAction,
  pub changes: WebhookProjectCardConvertedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardCreated {
  pub action: WebhookProjectCardCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardDeleted {
  pub action: WebhookProjectCardDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEditedChangesNote {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEditedChanges {
  pub note: WebhookProjectCardEditedChangesNote,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEdited {
  pub action: WebhookProjectCardEditedAction,
  pub changes: WebhookProjectCardEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedChangesColumnId {
  pub from: i64,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedChanges {
  pub column_id: WebhookProjectCardMovedChangesColumnId,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedProjectCardItem2Creator {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedProjectCardItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub column_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub column_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<WebhookProjectCardMovedProjectCardItem2Creator>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub note: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub project_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "project_card"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMoved {
  pub action: WebhookProjectCardMovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookProjectCardMovedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_card: WebhookProjectCardMovedProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Project {
  /// Body of the project
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  pub columns_url: String,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<User>,
  pub html_url: String,
  pub id: i64,
  /// Name of the project
  pub name: String,
  pub node_id: String,
  pub number: i64,
  pub owner_url: String,
  /// State of the project; either 'open' or 'closed'
  pub state: ProjectState,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectClosed {
  pub action: WebhookProjectClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectColumn {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after_id: Option<i64>,
  pub cards_url: String,
  pub created_at: String,
  /// The unique identifier of the project column
  pub id: i64,
  /// Name of the project column
  pub name: String,
  pub node_id: String,
  pub project_url: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnCreated {
  pub action: WebhookProjectColumnCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnDeleted {
  pub action: WebhookProjectColumnDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEditedChangesName {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookProjectColumnEditedChangesName>,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEdited {
  pub action: WebhookProjectColumnEditedAction,
  pub changes: WebhookProjectColumnEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "project_column"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnMoved {
  pub action: WebhookProjectColumnMovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCreated {
  pub action: WebhookProjectCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectDeleted {
  pub action: WebhookProjectDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectEditedChangesName {
  /// The changes to the project if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "project"))]
/// The changes to the project if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookProjectEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookProjectEditedChangesName>,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectEdited {
  pub action: WebhookProjectEditedAction,
  /// The changes to the project if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookProjectEditedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "project"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectReopened {
  pub action: WebhookProjectReopenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
/// A projects v2 project
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub created_at: String,
  pub creator: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub id: f64,
  pub node_id: String,
  pub number: i64,
  pub owner: SimpleUser,
  pub public: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub short_description: Option<String>,
  pub title: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectClosed {
  pub action: WebhookProjectsV2ProjectClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2: ProjectsV2,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
/// A project was created
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectCreated {
  pub action: WebhookProjectsV2ProjectCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2: ProjectsV2,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectDeleted {
  pub action: WebhookProjectsV2ProjectDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2: ProjectsV2,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEditedChangesDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEditedChangesPublic {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<bool>,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEditedChangesShortDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEditedChangesTitle {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<WebhookProjectsV2ProjectEditedChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public: Option<WebhookProjectsV2ProjectEditedChangesPublic>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub short_description: Option<WebhookProjectsV2ProjectEditedChangesShortDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookProjectsV2ProjectEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectEdited {
  pub action: WebhookProjectsV2ProjectEditedAction,
  pub changes: WebhookProjectsV2ProjectEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2: ProjectsV2,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemArchivedChangesArchivedAt {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemArchivedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<WebhookProjectsV2ItemArchivedChangesArchivedAt>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
/// An item belonging to a project
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2Item {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<String>,
  pub content_node_id: String,
  pub content_type: ProjectsV2ItemContentType,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<SimpleUser>,
  pub id: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub project_node_id: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemArchived {
  pub action: WebhookProjectsV2ItemArchivedAction,
  pub changes: WebhookProjectsV2ItemArchivedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemConvertedChangesContentType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemConvertedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_type: Option<WebhookProjectsV2ItemConvertedChangesContentType>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemConverted {
  pub action: WebhookProjectsV2ItemConvertedAction,
  pub changes: WebhookProjectsV2ItemConvertedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemCreated {
  pub action: WebhookProjectsV2ItemCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemDeleted {
  pub action: WebhookProjectsV2ItemDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemEditedChangesItem1FieldValue {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub field_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub field_type: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemEditedChangesItem1 {
  pub field_value: WebhookProjectsV2ItemEditedChangesItem1FieldValue,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemEditedChangesItem2Body {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemEditedChangesItem2 {
  pub body: WebhookProjectsV2ItemEditedChangesItem2Body,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemEdited {
  pub action: WebhookProjectsV2ItemEditedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookProjectsV2ItemEditedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemReorderedChangesPreviousProjectsV2ItemNodeId {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemReorderedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_projects_v2_item_node_id:
    Option<WebhookProjectsV2ItemReorderedChangesPreviousProjectsV2ItemNodeId>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemReordered {
  pub action: WebhookProjectsV2ItemReorderedAction,
  pub changes: WebhookProjectsV2ItemReorderedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemRestoredChangesArchivedAt {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemRestoredChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<WebhookProjectsV2ItemRestoredChangesArchivedAt>,
}

#[cfg(any(feature = "full", feature = "projects_v2_item"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ItemRestored {
  pub action: WebhookProjectsV2ItemRestoredAction,
  pub changes: WebhookProjectsV2ItemRestoredChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "projects_v2"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectReopened {
  pub action: WebhookProjectsV2ProjectReopenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  pub projects_v2: ProjectsV2,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "public"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPublic {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request",
  feature = "pull_request_review_comment",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
/// The status of auto merging a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestAutoMerge {
  /// Commit message for the merge commit.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_message: Option<String>,
  /// Title for the merge commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enabled_by: Option<User>,
  /// The merge method to use.
  pub merge_method: PullRequestAutoMergeMergeMethod,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAssigned {
  pub action: WebhookPullRequestAssignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAutoMergeDisabled {
  pub action: WebhookPullRequestAutoMergeDisabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub reason: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAutoMergeEnabled {
  pub action: WebhookPullRequestAutoMergeEnabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reason: Option<String>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestClosedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestClosed {
  pub action: WebhookPullRequestClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestClosedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestConvertedToDraftPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestConvertedToDraft {
  pub action: WebhookPullRequestConvertedToDraftAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestConvertedToDraftPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestDemilestoned {
  pub action: WebhookPullRequestDemilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestDequeued {
  pub action: WebhookPullRequestDequeuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub reason: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBaseRef {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBaseSha {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBase {
  #[serde(rename = "ref")]
  pub ref_: WebhookPullRequestEditedChangesBaseRef,
  pub sha: WebhookPullRequestEditedChangesBaseSha,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesTitle {
  /// The previous version of the title if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
/// The changes to the comment if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub base: Option<WebhookPullRequestEditedChangesBase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookPullRequestEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEdited {
  pub action: WebhookPullRequestEditedAction,
  /// The changes to the comment if the action was `edited`.
  pub changes: WebhookPullRequestEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestEditedPullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEnqueued {
  pub action: WebhookPullRequestEnqueuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestLabeled {
  pub action: WebhookPullRequestLabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestLocked {
  pub action: WebhookPullRequestLockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestMilestoned {
  pub action: WebhookPullRequestMilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestOpenedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestOpened {
  pub action: WebhookPullRequestOpenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestOpenedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReadyForReviewPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReadyForReview {
  pub action: WebhookPullRequestReadyForReviewAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestReadyForReviewPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReopenedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReopened {
  pub action: WebhookPullRequestReopenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestReopenedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestReviewCommentLinks {
  pub html: Link,
  pub pull_request: Link,
  #[serde(rename = "self")]
  pub self_: Link,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review_comment",
  feature = "pull_request_review_thread"
))]
/// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestReviewComment {
  #[serde(rename = "_links")]
  pub links: PullRequestReviewCommentLinks,
  /// How the author is associated with the repository.
  pub author_association: PullRequestReviewCommentAuthorAssociation,
  /// The text of the comment.
  pub body: String,
  /// The SHA of the commit to which the comment applies.
  pub commit_id: String,
  pub created_at: String,
  /// The diff of the line that the comment refers to.
  pub diff_hunk: String,
  /// HTML URL for the pull request review comment.
  pub html_url: String,
  /// The ID of the pull request review comment.
  pub id: i64,
  /// The comment ID to reply to.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub in_reply_to_id: Option<i64>,
  /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub line: Option<i64>,
  /// The node ID of the pull request review comment.
  pub node_id: String,
  /// The SHA of the original commit to which the comment applies.
  pub original_commit_id: String,
  /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub original_line: Option<i64>,
  /// The index of the original line in the diff to which the comment applies.
  pub original_position: i64,
  /// The first line of the range for a multi-line comment.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub original_start_line: Option<i64>,
  /// The relative path of the file to which the comment applies.
  pub path: String,
  /// The line index in the diff to which the comment applies.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub position: Option<i64>,
  /// The ID of the pull request review to which the comment belongs.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_request_review_id: Option<i64>,
  /// URL for the pull request that the review comment belongs to.
  pub pull_request_url: String,
  pub reactions: Reactions,
  /// The side of the first line of the range for a multi-line comment.
  pub side: PullRequestReviewCommentSide,
  /// The first line of the range for a multi-line comment.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_line: Option<i64>,
  /// The side of the first line of the range for a multi-line comment.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_side: Option<PullRequestReviewCommentStartSide>,
  /// The level at which the comment is targeted, can be a diff line or a file.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subject_type: Option<PullRequestReviewCommentSubjectType>,
  pub updated_at: String,
  /// URL for the pull request review comment
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentCreatedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentCreatedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentCreatedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentCreatedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreated {
  pub action: WebhookPullRequestReviewCommentCreatedAction,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestReviewCommentCreatedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentDeletedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentDeletedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentDeletedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentDeletedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeleted {
  pub action: WebhookPullRequestReviewCommentDeletedAction,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestReviewCommentDeletedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
/// The changes to the comment.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestReviewCommentEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentEditedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentEditedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentEditedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentEditedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review_comment"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEdited {
  pub action: WebhookPullRequestReviewCommentEditedAction,
  /// The changes to the comment.
  pub changes: WebhookPullRequestReviewCommentEditedChanges,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: WebhookPullRequestReviewCommentEditedPullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(
  feature = "full",
  feature = "pull_request_review",
  feature = "pull_request_review_thread"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequest {
  #[serde(rename = "_links")]
  pub links: SimplePullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<SimplePullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: SimplePullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: SimplePullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  pub draft: bool,
  pub head: SimplePullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: SimplePullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewDismissedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewDismissedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: WebhookPullRequestReviewDismissedReviewState,
  pub submitted_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissed {
  pub action: WebhookPullRequestReviewDismissedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: SimplePullRequest,
  pub repository: RepositoryWebhooks,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewDismissedReview,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestReviewEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewEditedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewEditedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub submitted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEdited {
  pub action: WebhookPullRequestReviewEditedAction,
  pub changes: WebhookPullRequestReviewEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: SimplePullRequest,
  pub repository: RepositoryWebhooks,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewEditedReview,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestRemovedItem1 {
  pub action: WebhookPullRequestReviewRequestRemovedItem1Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_reviewer: Option<User>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestRemovedItem2 {
  pub action: WebhookPullRequestReviewRequestRemovedItem2Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub requested_team: Team,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestedItem1 {
  pub action: WebhookPullRequestReviewRequestedItem1Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_reviewer: Option<User>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestedItem2 {
  pub action: WebhookPullRequestReviewRequestedItem2Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub requested_team: Team,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmittedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmittedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewSubmittedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewSubmittedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub submitted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "pull_request_review"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmitted {
  pub action: WebhookPullRequestReviewSubmittedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: SimplePullRequest,
  pub repository: RepositoryWebhooks,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewSubmittedReview,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadResolvedThread {
  pub comments: Vec<PullRequestReviewComment>,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadResolved {
  pub action: WebhookPullRequestReviewThreadResolvedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: SimplePullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  pub thread: WebhookPullRequestReviewThreadResolvedThread,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadUnresolvedThread {
  pub comments: Vec<PullRequestReviewComment>,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "pull_request_review_thread"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadUnresolved {
  pub action: WebhookPullRequestReviewThreadUnresolvedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: SimplePullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  pub thread: WebhookPullRequestReviewThreadUnresolvedThread,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestSynchronize {
  pub action: WebhookPullRequestSynchronizeAction,
  pub after: String,
  pub before: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnassigned {
  pub action: WebhookPullRequestUnassignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnlabeled {
  pub action: WebhookPullRequestUnlabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "pull_request"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnlocked {
  pub action: WebhookPullRequestUnlockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub pull_request: PullRequest,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "push"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Commit {
  /// An array of files added in the commit. A maximum of 3000 changed files will be reported per commit.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added: Option<Vec<String>>,
  /// Metaproperties for Git author/committer information.
  pub author: Committer,
  /// Metaproperties for Git author/committer information.
  pub committer: Committer,
  /// Whether this commit is distinct from any that have been pushed before.
  pub distinct: bool,
  pub id: String,
  /// The commit message.
  pub message: String,
  /// An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub modified: Option<Vec<String>>,
  /// An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub removed: Option<Vec<String>>,
  /// The ISO 8601 timestamp of the commit.
  pub timestamp: String,
  pub tree_id: String,
  /// URL that points to the commit API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "push"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPush {
  /// The SHA of the most recent commit on `ref` after the push.
  pub after: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub base_ref: Option<String>,
  /// The SHA of the most recent commit on `ref` before the push.
  pub before: String,
  /// An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
  pub commits: Vec<Commit>,
  /// URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
  pub compare: String,
  /// Whether this push created the `ref`.
  pub created: bool,
  /// Whether this push deleted the `ref`.
  pub deleted: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  /// Whether this push was a force push of the `ref`.
  pub forced: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<Commit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// Metaproperties for Git author/committer information.
  pub pusher: Committer,
  /// The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackageOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadataTag {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub digest: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadataTag>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bin: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bugs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cpu: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dev_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub directories: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dist: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub engines: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub files: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_head: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_shrinkwrap: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation_command: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keywords: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub main: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainers: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub man: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_user: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub optional_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub os: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub peer_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_via_actions: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub scripts: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValueItem4 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub value: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  pub size: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionReleaseAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionReleaseAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body_html: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub container_metadata:
    Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata:
    Option<Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_metadata: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub nuget_metadata:
    Option<Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata>>,
  pub package_files: Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles>,
  pub package_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<WebhookRubygemsMetadata>>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackageRegistry {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub about_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vendor: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  pub owner: WebhookRegistryPackagePublishedRegistryPackageOwner,
  pub package_type: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_version: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<WebhookRegistryPackagePublishedRegistryPackageRegistry>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublished {
  pub action: WebhookRegistryPackagePublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub registry_package: WebhookRegistryPackagePublishedRegistryPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackageOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_type: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub download_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionReleaseAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionRelease {
  pub author: WebhookRegistryPackageUpdatedRegistryPackagePackageVersionReleaseAuthor,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersion {
  pub author: WebhookRegistryPackageUpdatedRegistryPackagePackageVersionAuthor,
  pub body: String,
  pub body_html: String,
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata:
    Option<Vec<Option<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  pub package_files: Vec<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles>,
  pub package_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<WebhookRubygemsMetadata>>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  pub target_commitish: String,
  pub target_oid: String,
  pub updated_at: String,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackage {
  pub created_at: String,
  pub description: serde_json::Value,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  pub owner: WebhookRegistryPackageUpdatedRegistryPackageOwner,
  pub package_type: String,
  pub package_version: WebhookRegistryPackageUpdatedRegistryPackagePackageVersion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<serde_json::Value>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "registry_package"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdated {
  pub action: WebhookRegistryPackageUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub registry_package: WebhookRegistryPackageUpdatedRegistryPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "release"))]
/// Data related to a release.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseAsset {
  pub browser_download_url: String,
  pub content_type: String,
  pub created_at: String,
  pub download_count: i64,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<String>,
  /// The file name of the asset.
  pub name: String,
  pub node_id: String,
  pub size: i64,
  /// State of the release asset.
  pub state: ReleaseAssetState,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub uploader: Option<User>,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "release"))]
/// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Release {
  pub assets: Vec<ReleaseAsset>,
  pub assets_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub discussion_url: Option<String>,
  /// Whether the release is a draft or published
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  /// Whether the release is identified as a prerelease or a full release.
  pub prerelease: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  /// The name of the tag.
  pub tag_name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  /// Specifies the commitish value that determines where the Git tag is created from.
  pub target_commitish: String,
  pub upload_url: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseCreated {
  pub action: WebhookReleaseCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseDeleted {
  pub action: WebhookReleaseDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseEditedChangesMakeLatest {
  /// Whether this release was explicitly `edited` to be the latest.
  pub to: bool,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseEditedChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookReleaseEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub make_latest: Option<WebhookReleaseEditedChangesMakeLatest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookReleaseEditedChangesName>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseEdited {
  pub action: WebhookReleaseEditedAction,
  pub changes: WebhookReleaseEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePrereleasedReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePrereleasedReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookReleasePrereleasedReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  /// Whether the release is identified as a prerelease or a full release.
  pub prerelease: WebhookReleasePrereleasedReleaseItem2Prerelease,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePrereleased {
  pub action: WebhookReleasePrereleasedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub release: WebhookReleasePrereleasedRelease,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePublishedReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePublishedReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookReleasePublishedReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleasePublished {
  pub action: WebhookReleasePublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub release: WebhookReleasePublishedRelease,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseReleased {
  pub action: WebhookReleaseReleasedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseUnpublishedReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseUnpublishedReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookReleaseUnpublishedReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "release"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookReleaseUnpublished {
  pub action: WebhookReleaseUnpublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub release: WebhookReleaseUnpublishedRelease,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryCredits {
  /// The username of the user credited.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<SecurityAdvisoryCreditTypes>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// A credit given to a user for a repository security advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryCredit {
  /// The state of the user's acceptance of the credit.
  pub state: RepositoryAdvisoryCreditState,
  #[serde(rename = "type")]
  pub type_: SecurityAdvisoryCreditTypes,
  pub user: SimpleUser,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryCvss {
  /// The CVSS score.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub score: Option<f64>,
  /// The CVSS vector.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryCwes {
  /// The Common Weakness Enumeration (CWE) identifier.
  pub cwe_id: String,
  /// The name of the CWE.
  pub name: String,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryIdentifiers {
  /// The type of identifier.
  #[serde(rename = "type")]
  pub type_: IdentifiersType,
  /// The identifier value.
  pub value: String,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// A GitHub repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleRepository {
  /// A template for the API URL to download the repository as an archive.
  pub archive_url: String,
  /// A template for the API URL to list the available assignees for issues in the repository.
  pub assignees_url: String,
  /// A template for the API URL to create or retrieve a raw Git blob in the repository.
  pub blobs_url: String,
  /// A template for the API URL to get information about branches in the repository.
  pub branches_url: String,
  /// A template for the API URL to get information about collaborators of the repository.
  pub collaborators_url: String,
  /// A template for the API URL to get information about comments on the repository.
  pub comments_url: String,
  /// A template for the API URL to get information about commits on the repository.
  pub commits_url: String,
  /// A template for the API URL to compare two commits or refs.
  pub compare_url: String,
  /// A template for the API URL to get the contents of the repository.
  pub contents_url: String,
  /// A template for the API URL to list the contributors to the repository.
  pub contributors_url: String,
  /// The API URL to list the deployments of the repository.
  pub deployments_url: String,
  /// The repository description.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The API URL to list the downloads on the repository.
  pub downloads_url: String,
  /// The API URL to list the events of the repository.
  pub events_url: String,
  /// Whether the repository is a fork.
  pub fork: bool,
  /// The API URL to list the forks of the repository.
  pub forks_url: String,
  /// The full, globally unique, name of the repository.
  pub full_name: String,
  /// A template for the API URL to get information about Git commits of the repository.
  pub git_commits_url: String,
  /// A template for the API URL to get information about Git refs of the repository.
  pub git_refs_url: String,
  /// A template for the API URL to get information about Git tags of the repository.
  pub git_tags_url: String,
  /// The API URL to list the hooks on the repository.
  pub hooks_url: String,
  /// The URL to view the repository on GitHub.com.
  pub html_url: String,
  /// A unique identifier of the repository.
  pub id: i64,
  /// A template for the API URL to get information about issue comments on the repository.
  pub issue_comment_url: String,
  /// A template for the API URL to get information about issue events on the repository.
  pub issue_events_url: String,
  /// A template for the API URL to get information about issues on the repository.
  pub issues_url: String,
  /// A template for the API URL to get information about deploy keys on the repository.
  pub keys_url: String,
  /// A template for the API URL to get information about labels of the repository.
  pub labels_url: String,
  /// The API URL to get information about the languages of the repository.
  pub languages_url: String,
  /// The API URL to merge branches in the repository.
  pub merges_url: String,
  /// A template for the API URL to get information about milestones of the repository.
  pub milestones_url: String,
  /// The name of the repository.
  pub name: String,
  /// The GraphQL identifier of the repository.
  pub node_id: String,
  /// A template for the API URL to get information about notifications on the repository.
  pub notifications_url: String,
  pub owner: SimpleUser,
  /// Whether the repository is private.
  pub private: bool,
  /// A template for the API URL to get information about pull requests on the repository.
  pub pulls_url: String,
  /// A template for the API URL to get information about releases on the repository.
  pub releases_url: String,
  /// The API URL to list the stargazers on the repository.
  pub stargazers_url: String,
  /// A template for the API URL to get information about statuses of a commit.
  pub statuses_url: String,
  /// The API URL to list the subscribers on the repository.
  pub subscribers_url: String,
  /// The API URL to subscribe to notifications for this repository.
  pub subscription_url: String,
  /// The API URL to get information about tags on the repository.
  pub tags_url: String,
  /// The API URL to list the teams on the repository.
  pub teams_url: String,
  /// A template for the API URL to create or retrieve a raw Git tree of the repository.
  pub trees_url: String,
  /// The URL to get more information about the repository from the GitHub API.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisorySubmission {
  /// Whether a private vulnerability report was accepted by the repository's administrators.
  pub accepted: bool,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// The name of the package affected by the vulnerability.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryVulnerabilityPackage {
  pub ecosystem: SecurityAdvisoryEcosystems,
  /// The unique package name within its ecosystem.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// A product affected by the vulnerability detailed in a repository security advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryVulnerability {
  /// The name of the package affected by the vulnerability.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package: Option<RepositoryAdvisoryVulnerabilityPackage>,
  /// The package version(s) that resolve the vulnerability.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub patched_versions: Option<String>,
  /// The functions in the package that are affected.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vulnerable_functions: Option<Vec<String>>,
  /// The range of the package versions affected by the vulnerability.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vulnerable_version_range: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
/// A repository security advisory.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisory {
  /// The author of the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<SimpleUser>,
  /// The date and time of when the advisory was closed, in ISO 8601 format.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  /// A list of teams that collaborate on the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborating_teams: Option<Vec<Team>>,
  /// A list of users that collaborate on the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborating_users: Option<Vec<SimpleUser>>,
  /// The date and time of when the advisory was created, in ISO 8601 format.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub credits: Option<Vec<RepositoryAdvisoryCredits>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub credits_detailed: Option<Vec<RepositoryAdvisoryCredit>>,
  /// The Common Vulnerabilities and Exposures (CVE) ID.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cve_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cvss: Option<RepositoryAdvisoryCvss>,
  /// A list of only the CWE IDs.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cwe_ids: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cwes: Option<Vec<RepositoryAdvisoryCwes>>,
  /// A detailed description of what the advisory entails.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The GitHub Security Advisory ID.
  pub ghsa_id: String,
  /// The URL for the advisory.
  pub html_url: String,
  pub identifiers: Vec<RepositoryAdvisoryIdentifiers>,
  /// A temporary private fork of the advisory's repository for collaborating on a fix.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private_fork: Option<SimpleRepository>,
  /// The date and time of when the advisory was published, in ISO 8601 format.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  /// The publisher of the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub publisher: Option<SimpleUser>,
  /// The severity of the advisory.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<RepositoryAdvisorySeverity>,
  /// The state of the advisory.
  pub state: RepositoryAdvisoryState,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub submission: Option<RepositoryAdvisorySubmission>,
  /// A short summary of the advisory.
  pub summary: String,
  /// The date and time of when the advisory was last updated, in ISO 8601 format.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  /// The API URL for the advisory.
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vulnerabilities: Option<Vec<RepositoryAdvisoryVulnerability>>,
  /// The date and time of when the advisory was withdrawn, in ISO 8601 format.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryAdvisoryPublished {
  pub action: WebhookRepositoryAdvisoryPublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub repository_advisory: RepositoryAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "repository_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryAdvisoryReported {
  pub action: WebhookRepositoryAdvisoryReportedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub repository_advisory: RepositoryAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryArchived {
  pub action: WebhookRepositoryArchivedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryCreated {
  pub action: WebhookRepositoryCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryDeleted {
  pub action: WebhookRepositoryDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_dispatch"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryDispatchSample {
  /// The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
  pub action: String,
  pub branch: String,
  /// The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub client_payload: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  pub installation: SimpleInstallation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEditedChangesDefaultBranch {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEditedChangesDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEditedChangesHomepage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEditedChangesTopics {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<WebhookRepositoryEditedChangesDefaultBranch>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<WebhookRepositoryEditedChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<WebhookRepositoryEditedChangesHomepage>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<WebhookRepositoryEditedChangesTopics>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryEdited {
  pub action: WebhookRepositoryEditedAction,
  pub changes: WebhookRepositoryEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_import"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryImport {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub status: WebhookRepositoryImportStatus,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryPrivatized {
  pub action: WebhookRepositoryPrivatizedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryPublicized {
  pub action: WebhookRepositoryPublicizedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRenamedChangesRepositoryName {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRenamedChangesRepository {
  pub name: WebhookRepositoryRenamedChangesRepositoryName,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRenamedChanges {
  pub repository: WebhookRepositoryRenamedChangesRepository,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRenamed {
  pub action: WebhookRepositoryRenamedAction,
  pub changes: WebhookRepositoryRenamedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetLinksHtml {
  /// The html URL of the ruleset
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub href: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetLinksSelf {
  /// The URL of the ruleset
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub href: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetLinks {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html: Option<RepositoryRulesetLinksHtml>,
  #[serde(rename = "self")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub self_: Option<RepositoryRulesetLinksSelf>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// An actor that can bypass rules in a ruleset
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetBypassActor {
  /// The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`.
  pub actor_id: i64,
  /// The type of actor that can bypass a ruleset
  pub actor_type: RepositoryRulesetBypassActorActorType,
  /// When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests.
  pub bypass_mode: RepositoryRulesetBypassActorBypassMode,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRefName {
  /// Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub exclude: Option<Vec<String>>,
  /// Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub include: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters for a repository ruleset ref name condition
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_name: Option<RepositoryRulesetConditionsRefName>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryNameTargetRepositoryName {
  /// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub exclude: Option<Vec<String>>,
  /// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub include: Option<Vec<String>>,
  /// Whether renaming of target repositories is prevented.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub protected: Option<bool>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters for a repository name condition
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryNameTarget {
  pub repository_name: RepositoryRulesetConditionsRepositoryNameTargetRepositoryName,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryIdTargetRepositoryId {
  /// The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_ids: Option<Vec<i64>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters for a repository ID condition
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryIdTarget {
  pub repository_id: RepositoryRulesetConditionsRepositoryIdTargetRepositoryId,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters for a targeting a repository property
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryPropertySpec {
  /// The name of the repository property to target
  pub name: String,
  /// The values to match for the repository property
  pub property_values: Vec<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty {
  /// The repository properties and values to exclude. The condition will not pass if any of these properties match.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub exclude: Option<Vec<RepositoryRulesetConditionsRepositoryPropertySpec>>,
  /// The repository properties and values to include. All of these properties must match for the condition to pass.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub include: Option<Vec<RepositoryRulesetConditionsRepositoryPropertySpec>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters for a repository property condition
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetConditionsRepositoryPropertyTarget {
  pub repository_property: RepositoryRulesetConditionsRepositoryPropertyTargetRepositoryProperty,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Only allow users with bypass permission to create matching refs.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCreation {
  #[serde(rename = "type")]
  pub type_: RepositoryRuleCreationType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleUpdateParameters {
  /// Branch can pull changes from its upstream repository
  pub update_allows_fetch_and_merge: bool,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Only allow users with bypass permission to update matching refs.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleUpdate {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleUpdateParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleUpdateType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Only allow users with bypass permissions to delete matching refs.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleDeletion {
  #[serde(rename = "type")]
  pub type_: RepositoryRuleDeletionType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Prevent merge commits from being pushed to matching refs.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredLinearHistory {
  #[serde(rename = "type")]
  pub type_: RepositoryRuleRequiredLinearHistoryType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredDeploymentsParameters {
  /// The environments that must be successfully deployed to before branches can be merged.
  pub required_deployment_environments: Vec<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredDeployments {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleRequiredDeploymentsParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleRequiredDeploymentsType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Commits pushed to matching refs must have verified signatures.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredSignatures {
  #[serde(rename = "type")]
  pub type_: RepositoryRuleRequiredSignaturesType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulePullRequestParameters {
  /// New, reviewable commits pushed will dismiss previous pull request review approvals.
  pub dismiss_stale_reviews_on_push: bool,
  /// Require an approving review in pull requests that modify files that have a designated code owner.
  pub require_code_owner_review: bool,
  /// Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
  pub require_last_push_approval: bool,
  /// The number of approving reviews that are required before a pull request can be merged.
  pub required_approving_review_count: i64,
  /// All conversations on code must be resolved before a pull request can be merged.
  pub required_review_thread_resolution: bool,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulePullRequest {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRulePullRequestParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRulePullRequestType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Required status check
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleParamsStatusCheckConfiguration {
  /// The status check context name that must be present on the commit.
  pub context: String,
  /// The optional integration ID that this status check must originate from.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub integration_id: Option<i64>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredStatusChecksParameters {
  /// Status checks that are required.
  pub required_status_checks: Vec<RepositoryRuleParamsStatusCheckConfiguration>,
  /// Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
  pub strict_required_status_checks_policy: bool,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleRequiredStatusChecks {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleRequiredStatusChecksParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleRequiredStatusChecksType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Prevent users with push access from force pushing to refs.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleNonFastForward {
  #[serde(rename = "type")]
  pub type_: RepositoryRuleNonFastForwardType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitMessagePatternParameters {
  /// How this rule will appear to users.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// If true, the rule will fail if the pattern matches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub negate: Option<bool>,
  /// The operator to use for matching.
  pub operator: Operator,
  /// The pattern to match with.
  pub pattern: String,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters to be used for the commit_message_pattern rule
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitMessagePattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleCommitMessagePatternParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleCommitMessagePatternType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitAuthorEmailPatternParameters {
  /// How this rule will appear to users.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// If true, the rule will fail if the pattern matches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub negate: Option<bool>,
  /// The operator to use for matching.
  pub operator: Operator,
  /// The pattern to match with.
  pub pattern: String,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters to be used for the commit_author_email_pattern rule
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitAuthorEmailPattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleCommitAuthorEmailPatternParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleCommitAuthorEmailPatternType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitterEmailPatternParameters {
  /// How this rule will appear to users.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// If true, the rule will fail if the pattern matches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub negate: Option<bool>,
  /// The operator to use for matching.
  pub operator: Operator,
  /// The pattern to match with.
  pub pattern: String,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters to be used for the committer_email_pattern rule
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleCommitterEmailPattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleCommitterEmailPatternParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleCommitterEmailPatternType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleBranchNamePatternParameters {
  /// How this rule will appear to users.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// If true, the rule will fail if the pattern matches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub negate: Option<bool>,
  /// The operator to use for matching.
  pub operator: Operator,
  /// The pattern to match with.
  pub pattern: String,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters to be used for the branch_name_pattern rule
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleBranchNamePattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleBranchNamePatternParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleBranchNamePatternType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleTagNamePatternParameters {
  /// How this rule will appear to users.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// If true, the rule will fail if the pattern matches.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub negate: Option<bool>,
  /// The operator to use for matching.
  pub operator: Operator,
  /// The pattern to match with.
  pub pattern: String,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Parameters to be used for the tag_name_pattern rule
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleTagNamePattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleTagNamePatternParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleTagNamePatternType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// A workflow that must run for this rule to pass
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleParamsWorkflowFileReference {
  /// The path to the workflow file
  pub path: String,
  /// The ref (branch or tag) of the workflow file to use
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  /// The ID of the repository where the workflow is defined
  pub repository_id: i64,
  /// The commit SHA of the workflow file to use
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleWorkflowsParameters {
  /// Workflows that must pass for this rule to pass.
  pub workflows: Vec<RepositoryRuleParamsWorkflowFileReference>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleWorkflows {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parameters: Option<RepositoryRuleWorkflowsParameters>,
  #[serde(rename = "type")]
  pub type_: RepositoryRuleWorkflowsType,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
/// A set of rules to apply when specified conditions are met.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRuleset {
  #[serde(rename = "_links")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub links: Option<RepositoryRulesetLinks>,
  /// The actors that can bypass the rules in this ruleset
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bypass_actors: Option<Vec<RepositoryRulesetBypassActor>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conditions: Option<RepositoryRulesetConditions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The bypass type of the user making the API request for this ruleset. This field is only returned when
  /// querying the repository-level endpoint.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub current_user_can_bypass: Option<RepositoryRulesetCurrentUserCanBypass>,
  pub enforcement: RepositoryRuleEnforcement,
  /// The ID of the ruleset
  pub id: i64,
  /// The name of the ruleset
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rules: Option<Vec<RepositoryRule>>,
  /// The name of the source
  pub source: String,
  /// The type of the source of the ruleset
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source_type: Option<RepositoryRulesetSourceType>,
  /// The target of the ruleset
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target: Option<RepositoryRulesetTarget>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetCreated {
  pub action: WebhookRepositoryRulesetCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetDeleted {
  pub action: WebhookRepositoryRulesetDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesConditionType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesExclude {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesInclude {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesTarget {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdatedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub condition_type:
    Option<WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesConditionType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub exclude: Option<WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesExclude>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub include: Option<WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesInclude>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target: Option<WebhookRepositoryRulesetEditedChangesConditionsUpdatedChangesTarget>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditionsUpdated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookRepositoryRulesetEditedChangesConditionsUpdatedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub condition: Option<RepositoryRulesetConditions>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesConditions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added: Option<Vec<RepositoryRulesetConditions>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<Vec<RepositoryRulesetConditions>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated: Option<Vec<WebhookRepositoryRulesetEditedChangesConditionsUpdated>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesEnforcement {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesName {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesConfiguration {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesPattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesRuleType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRulesUpdatedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub configuration: Option<WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesConfiguration>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pattern: Option<WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesPattern>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rule_type: Option<WebhookRepositoryRulesetEditedChangesRulesUpdatedChangesRuleType>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRulesUpdated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookRepositoryRulesetEditedChangesRulesUpdatedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rule: Option<RepositoryRule>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChangesRules {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added: Option<Vec<RepositoryRule>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<Vec<RepositoryRule>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated: Option<Vec<WebhookRepositoryRulesetEditedChangesRulesUpdated>>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conditions: Option<WebhookRepositoryRulesetEditedChangesConditions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enforcement: Option<WebhookRepositoryRulesetEditedChangesEnforcement>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookRepositoryRulesetEditedChangesName>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rules: Option<WebhookRepositoryRulesetEditedChangesRules>,
}

#[cfg(any(feature = "full", feature = "repository_ruleset"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryRulesetEdited {
  pub action: WebhookRepositoryRulesetEditedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookRepositoryRulesetEditedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Organization {
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub events_url: String,
  pub hooks_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub id: i64,
  pub issues_url: String,
  pub login: String,
  pub members_url: String,
  pub node_id: String,
  pub public_members_url: String,
  pub repos_url: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryTransferredChangesOwnerFrom {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<Organization>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryTransferredChangesOwner {
  pub from: WebhookRepositoryTransferredChangesOwnerFrom,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryTransferredChanges {
  pub owner: WebhookRepositoryTransferredChangesOwner,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryTransferred {
  pub action: WebhookRepositoryTransferredAction,
  pub changes: WebhookRepositoryTransferredChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryUnarchived {
  pub action: WebhookRepositoryUnarchivedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
/// The security alert of the vulnerable dependency.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryVulnerabilityAlertAlert {
  pub affected_package_name: String,
  pub affected_range: String,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismiss_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismisser: Option<User>,
  pub external_identifier: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fix_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  pub ghsa_id: String,
  pub id: i64,
  pub node_id: String,
  pub number: i64,
  pub severity: String,
  pub state: RepositoryVulnerabilityAlertAlertState,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertCreateAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertCreateAlertItem2State,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertCreate {
  pub action: WebhookRepositoryVulnerabilityAlertCreateAction,
  pub alert: WebhookRepositoryVulnerabilityAlertCreateAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertDismissAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismiss_comment: Option<String>,
  pub dismiss_reason: String,
  pub dismissed_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismisser: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertDismissAlertItem2State,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertDismiss {
  pub action: WebhookRepositoryVulnerabilityAlertDismissAction,
  pub alert: WebhookRepositoryVulnerabilityAlertDismissAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertReopenAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertReopenAlertItem2State,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertReopen {
  pub action: WebhookRepositoryVulnerabilityAlertReopenAction,
  pub alert: WebhookRepositoryVulnerabilityAlertReopenAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertResolveAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fix_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertResolveAlertItem2State,
}

#[cfg(any(feature = "full", feature = "repository_vulnerability_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertResolve {
  pub action: WebhookRepositoryVulnerabilityAlertResolveAction,
  pub alert: WebhookRepositoryVulnerabilityAlertResolveAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(
  feature = "full",
  feature = "secret_scanning_alert",
  feature = "secret_scanning_alert_location"
))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningAlertWebhook {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  /// The REST API URL of the code locations for this alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  /// Whether push protection was bypassed for the detected secret.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed: Option<bool>,
  /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed_by: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolution: Option<SecretScanningAlertResolutionWebhook>,
  /// An optional comment to resolve an alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolution_comment: Option<String>,
  /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolved_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolved_by: Option<SimpleUser>,
  /// The type of secret that secret scanning detected.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret_type: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The token status as of the latest validity check.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub validity: Option<SecretScanningAlertWebhookValidity>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertCreated {
  pub action: WebhookSecretScanningAlertCreatedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationCommit {
  /// SHA-1 hash ID of the associated blob
  pub blob_sha: String,
  /// The API URL to get the associated blob resource
  pub blob_url: String,
  /// SHA-1 hash ID of the associated commit
  pub commit_sha: String,
  /// The API URL to get the associated commit resource
  pub commit_url: String,
  /// The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
  pub end_column: f64,
  /// Line number at which the secret ends in the file
  pub end_line: f64,
  /// The file path in the repository
  pub path: String,
  /// The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
  pub start_column: f64,
  /// Line number at which the secret starts in the file
  pub start_line: f64,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'wiki_commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository wiki.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationWikiCommit {
  /// SHA-1 hash ID of the associated blob
  pub blob_sha: String,
  /// SHA-1 hash ID of the associated commit
  pub commit_sha: String,
  /// The GitHub URL to get the associated wiki commit
  pub commit_url: String,
  /// The column at which the secret ends within the end line when the file is interpreted as 8-bit ASCII.
  pub end_column: f64,
  /// Line number at which the secret ends in the file
  pub end_line: f64,
  /// The GitHub URL to get the associated wiki page
  pub page_url: String,
  /// The file path of the wiki page
  pub path: String,
  /// The column at which the secret starts within the start line when the file is interpreted as 8-bit ASCII.
  pub start_column: f64,
  /// Line number at which the secret starts in the file
  pub start_line: f64,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationIssueTitle {
  /// The API URL to get the issue where the secret was detected.
  pub issue_title_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationIssueBody {
  /// The API URL to get the issue where the secret was detected.
  pub issue_body_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationIssueComment {
  /// The API URL to get the issue comment where the secret was detected.
  pub issue_comment_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationDiscussionTitle {
  /// The URL to the discussion where the secret was detected.
  pub discussion_title_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationDiscussionBody {
  /// The URL to the discussion where the secret was detected.
  pub discussion_body_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationDiscussionComment {
  /// The API URL to get the discussion comment where the secret was detected.
  pub discussion_comment_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationPullRequestTitle {
  /// The API URL to get the pull request where the secret was detected.
  pub pull_request_title_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationPullRequestBody {
  /// The API URL to get the pull request where the secret was detected.
  pub pull_request_body_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationPullRequestComment {
  /// The API URL to get the pull request comment where the secret was detected.
  pub pull_request_comment_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationPullRequestReview {
  /// The API URL to get the pull request review where the secret was detected.
  pub pull_request_review_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
/// Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocationPullRequestReviewComment {
  /// The API URL to get the pull request review comment where the secret was detected.
  pub pull_request_review_comment_url: String,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningLocation {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub details: Option<SecretScanningLocationDetails>,
  /// The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<SecretScanningLocationType>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert_location"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertLocationCreated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<WebhookSecretScanningAlertLocationCreatedAction>,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub location: SecretScanningLocation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertReopened {
  pub action: WebhookSecretScanningAlertReopenedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertResolved {
  pub action: WebhookSecretScanningAlertResolvedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertRevoked {
  pub action: WebhookSecretScanningAlertRevokedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "secret_scanning_alert"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertValidated {
  pub action: WebhookSecretScanningAlertValidatedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublished {
  pub action: WebhookSecurityAdvisoryPublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryPublishedSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdated {
  pub action: WebhookSecurityAdvisoryUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryUpdatedSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities>,
  pub withdrawn_at: String,
}

#[cfg(any(feature = "full", feature = "security_advisory"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawn {
  pub action: WebhookSecurityAdvisoryWithdrawnAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryWithdrawnSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysisChangesFrom {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_and_analysis: Option<SecurityAndAnalysis>,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysisChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<WebhookSecurityAndAnalysisChangesFrom>,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
/// Code of Conduct Simple
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CodeOfConductSimple {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub key: String,
  pub name: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct FullRepositoryPermissions {
  pub admin: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintain: Option<bool>,
  pub pull: bool,
  pub push: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triage: Option<bool>,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
/// Full Repository
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct FullRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_merge_commit: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_rebase_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_squash_merge: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether anonymous git access is allowed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub anonymous_access_enabled: Option<bool>,
  pub archive_url: String,
  pub archived: bool,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub clone_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub code_of_conduct: Option<CodeOfConductSimple>,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub created_at: String,
  /// The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub custom_properties: Option<serde_json::Value>,
  pub default_branch: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// Returns whether or not this repository disabled.
  pub disabled: bool,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks: i64,
  pub forks_count: i64,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub git_url: String,
  pub has_discussions: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_downloads: Option<bool>,
  pub has_issues: bool,
  pub has_pages: bool,
  pub has_projects: bool,
  pub has_wiki: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  pub hooks_url: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<String>,
  pub languages_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<LicenseSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub master_branch: Option<String>,
  /// The default value for a merge commit message.
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<MergeCommitMessage>,
  /// The default value for a merge commit title.
  ///
  ///   - `PR_TITLE` - default to the pull request's title.
  ///   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<MergeCommitTitle>,
  pub merges_url: String,
  pub milestones_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<String>,
  pub name: String,
  pub network_count: i64,
  pub node_id: String,
  pub notifications_url: String,
  pub open_issues: i64,
  pub open_issues_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<SimpleUser>,
  pub owner: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<FullRepositoryPermissions>,
  pub private: bool,
  pub pulls_url: String,
  pub pushed_at: String,
  pub releases_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_and_analysis: Option<SecurityAndAnalysis>,
  /// The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
  pub size: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source: Option<Repository>,
  /// The default value for a squash merge commit message:
  ///
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message: Option<SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  ///
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title: Option<SquashMergeCommitTitle>,
  pub ssh_url: String,
  pub stargazers_count: i64,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_count: i64,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub svn_url: String,
  pub tags_url: String,
  pub teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub temp_clone_token: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub template_repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<String>>,
  pub trees_url: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
  /// The repository visibility: public, private, or internal.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  pub watchers: i64,
  pub watchers_count: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub web_commit_signoff_required: Option<bool>,
}

#[cfg(any(feature = "full", feature = "security_and_analysis"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysis {
  pub changes: WebhookSecurityAndAnalysisChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: FullRepository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCancelledSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
/// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipTier {
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_custom_ammount: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_custom_amount: Option<bool>,
  pub is_one_time: bool,
  pub monthly_price_in_cents: i64,
  pub monthly_price_in_dollars: i64,
  pub name: String,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCancelledSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipCancelledSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCancelled {
  pub action: WebhookSponsorshipCancelledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipCancelledSponsorship,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCreatedSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCreatedSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipCreatedSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipCreated {
  pub action: WebhookSponsorshipCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipCreatedSponsorship,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipEditedChangesPrivacyLevel {
  /// The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy_level: Option<WebhookSponsorshipEditedChangesPrivacyLevel>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipEditedSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipEditedSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipEditedSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipEdited {
  pub action: WebhookSponsorshipEditedAction,
  pub changes: WebhookSponsorshipEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipEditedSponsorship,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellationSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellationSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipPendingCancellationSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellation {
  pub action: WebhookSponsorshipPendingCancellationAction,
  /// The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub effective_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipPendingCancellationSponsorship,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeChangesTier {
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub from: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeChanges {
  pub tier: WebhookSponsorshipPendingTierChangeChangesTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipPendingTierChangeSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChange {
  pub action: WebhookSponsorshipPendingTierChangeAction,
  pub changes: WebhookSponsorshipPendingTierChangeChanges,
  /// The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub effective_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipPendingTierChangeSponsorship,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedChangesTier {
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub from: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedChanges {
  pub tier: WebhookSponsorshipTierChangedChangesTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipTierChangedSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "sponsorship"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChanged {
  pub action: WebhookSponsorshipTierChangedAction,
  pub changes: WebhookSponsorshipTierChangedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<RepositoryWebhooks>,
  pub sender: SimpleUserWebhooks,
  pub sponsorship: WebhookSponsorshipTierChangedSponsorship,
}

#[cfg(any(feature = "full", feature = "star"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStarCreated {
  pub action: WebhookStarCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  /// The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "star"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStarDeleted {
  pub action: WebhookStarDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  /// The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
  pub starred_at: serde_json::Value,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusBranchesCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusBranches {
  pub commit: WebhookStatusBranchesCommit,
  pub name: String,
  pub protected: bool,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitCommitAuthorItem2 {
  pub date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitCommitCommitterItem2 {
  pub date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitCommitTree {
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitCommitVerification {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub payload: Option<String>,
  pub reason: WebhookStatusCommitCommitVerificationReason,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub signature: Option<String>,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitCommit {
  pub author: WebhookStatusCommitCommitAuthor,
  pub comment_count: i64,
  pub committer: WebhookStatusCommitCommitCommitter,
  pub message: String,
  pub tree: WebhookStatusCommitCommitTree,
  pub url: String,
  pub verification: WebhookStatusCommitCommitVerification,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommitParents {
  pub html_url: String,
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatusCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub comments_url: String,
  pub commit: WebhookStatusCommitCommit,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<User>,
  pub html_url: String,
  pub node_id: String,
  pub parents: Vec<WebhookStatusCommitParents>,
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "status"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookStatus {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  /// An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
  pub branches: Vec<WebhookStatusBranches>,
  pub commit: WebhookStatusCommit,
  pub context: String,
  pub created_at: String,
  /// The optional human-readable description added to the status.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  /// The unique identifier of the status.
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  /// The Commit SHA.
  pub sha: String,
  /// The new state. Can be `pending`, `success`, `failure`, or `error`.
  pub state: WebhookStatusState,
  /// The optional link added to the status.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_url: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "team_add"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamAdd {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamAddedToRepository {
  pub action: WebhookTeamAddedToRepositoryAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamCreated {
  pub action: WebhookTeamCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUserWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamDeleted {
  pub action: WebhookTeamDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUserWebhooks>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesNotificationSetting {
  /// The previous version of the team's notification setting if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesPrivacy {
  /// The previous version of the team's privacy if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesRepositoryPermissionsFrom {
  /// The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin: Option<bool>,
  /// The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull: Option<bool>,
  /// The previous version of the team member's `push` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push: Option<bool>,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesRepositoryPermissions {
  pub from: WebhookTeamEditedChangesRepositoryPermissionsFrom,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChangesRepository {
  pub permissions: WebhookTeamEditedChangesRepositoryPermissions,
}

#[cfg(any(feature = "full", feature = "team"))]
/// The changes to the team if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<WebhookTeamEditedChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookTeamEditedChangesName>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notification_setting: Option<WebhookTeamEditedChangesNotificationSetting>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy: Option<WebhookTeamEditedChangesPrivacy>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<WebhookTeamEditedChangesRepository>,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamEdited {
  pub action: WebhookTeamEditedAction,
  /// The changes to the team if the action was `edited`.
  pub changes: WebhookTeamEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUserWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "team"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamRemovedFromRepository {
  pub action: WebhookTeamRemovedFromRepositoryAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimpleWebhooks,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUserWebhooks,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "watch"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWatchStarted {
  pub action: WebhookWatchStartedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
}

#[cfg(any(feature = "full", feature = "workflow_dispatch"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowDispatch {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub inputs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub workflow: String,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowStep {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WorkflowStepConclusion>,
  pub name: String,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  pub status: WorkflowStepStatus,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
/// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WorkflowJobConclusion>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  /// Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  /// The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  /// The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  /// The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  /// The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  /// The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
  pub status: WorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobCompletedWorkflowJobItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  pub conclusion: WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion,
  /// The time that the job created.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub steps: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobCompleted {
  pub action: WebhookWorkflowJobCompletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub workflow_job: WebhookWorkflowJobCompletedWorkflowJob,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobInProgressWorkflowJobItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  pub status: WebhookWorkflowJobInProgressWorkflowJobItem2Status,
  pub steps: Vec<WorkflowStep>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobInProgress {
  pub action: WebhookWorkflowJobInProgressAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub workflow_job: WebhookWorkflowJobInProgressWorkflowJob,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobQueuedWorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  pub status: WebhookWorkflowJobQueuedWorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobQueued {
  pub action: WebhookWorkflowJobQueuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub workflow_job: WebhookWorkflowJobQueuedWorkflowJob,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobWaitingWorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  pub status: WebhookWorkflowJobWaitingWorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_job"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobWaiting {
  pub action: WebhookWorkflowJobWaitingAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  pub workflow_job: WebhookWorkflowJobWaitingWorkflowJob,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryLite {
  pub archive_url: String,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub hooks_url: String,
  pub html_url: String,
  /// Unique identifier of the repository
  pub id: i64,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  pub languages_url: String,
  pub merges_url: String,
  pub milestones_url: String,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  pub notifications_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  /// Whether the repository is private or public.
  pub private: bool,
  pub pulls_url: String,
  pub releases_url: String,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub tags_url: String,
  pub teams_url: String,
  pub trees_url: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequestsBase {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequestsHead {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequests {
  pub base: WorkflowRunPullRequestsBase,
  pub head: WorkflowRunPullRequestsHead,
  pub id: f64,
  pub number: f64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRun {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<User>,
  pub artifacts_url: String,
  pub cancel_url: String,
  pub check_suite_id: i64,
  pub check_suite_node_id: String,
  pub check_suite_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WorkflowRunConclusion>,
  pub created_at: String,
  pub event: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  pub head_repository: RepositoryLite,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  pub jobs_url: String,
  pub logs_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  pub path: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<String>,
  pub pull_requests: Vec<WorkflowRunPullRequests>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows: Option<Vec<WorkflowRunReferencedWorkflows>>,
  pub repository: RepositoryLite,
  pub rerun_url: String,
  pub run_attempt: i64,
  pub run_number: i64,
  pub run_started_at: String,
  pub status: WorkflowRunStatus,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<User>,
  pub updated_at: String,
  pub url: String,
  pub workflow_id: i64,
  pub workflow_url: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2Actor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitCommitter {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitCommitter>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timestamp: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tree_id: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2ReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2RepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2Repository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunCompletedWorkflowRunItem2RepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2TriggeringActor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<WebhookWorkflowRunCompletedWorkflowRunItem2Actor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  pub conclusion: WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows:
    Option<Vec<WebhookWorkflowRunCompletedWorkflowRunItem2ReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<WebhookWorkflowRunCompletedWorkflowRunItem2Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<WebhookWorkflowRunCompletedWorkflowRunItem2TriggeringActor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompleted {
  pub action: WebhookWorkflowRunCompletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WebhookWorkflowRunCompletedWorkflowRun,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2Actor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitCommitter {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitCommitter>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timestamp: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tree_id: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2ReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2RepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2Repository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunInProgressWorkflowRunItem2RepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2TriggeringActor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Actor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows:
    Option<Vec<WebhookWorkflowRunInProgressWorkflowRunItem2ReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<WebhookWorkflowRunInProgressWorkflowRunItem2TriggeringActor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgress {
  pub action: WebhookWorkflowRunInProgressAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WebhookWorkflowRunInProgressWorkflowRun,
}

#[cfg(any(feature = "full", feature = "workflow_run"))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunRequested {
  pub action: WebhookWorkflowRunRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<EnterpriseWebhooks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimpleWebhooks>,
  pub repository: RepositoryWebhooks,
  pub sender: SimpleUserWebhooks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WorkflowRun,
}
