#[allow(unused_imports)]
use super::*;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use typed_builder::TypedBuilder;

/// Types defination
#[cfg(any(feature = "full", feature = "webhook",))]
pub type AppEventsArray = Vec<AppEvents>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type CheckRunPullRequestArray = Vec<CheckRunPullRequest>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type PullRequestArray = Vec<PullRequest>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookDeploymentReviewApprovedReviewersArray =
  Vec<WebhookDeploymentReviewApprovedReviewers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookDeploymentReviewApprovedWorkflowJobRunsArray =
  Vec<WebhookDeploymentReviewApprovedWorkflowJobRuns>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookDeploymentReviewRejectedReviewersArray =
  Vec<WebhookDeploymentReviewRejectedReviewers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookDeploymentReviewRejectedWorkflowJobRunsArray =
  Vec<WebhookDeploymentReviewRejectedWorkflowJobRuns>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookDeploymentReviewRequestedReviewersArray =
  Vec<WebhookDeploymentReviewRequestedReviewers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type GollumEventPagesArray = Vec<GollumEventPages>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type InstallationCreatedEventRepositoriesArray = Vec<InstallationCreatedEventRepositories>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type InstallationDeletedEventRepositoriesArray = Vec<InstallationDeletedEventRepositories>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookInstallationNewPermissionsAcceptedRepositoriesArray =
  Vec<WebhookInstallationNewPermissionsAcceptedRepositories>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookInstallationRepositoriesAddedRepositoriesAddedArray =
  Vec<WebhookInstallationRepositoriesAddedRepositoriesAdded>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookInstallationRepositoriesAddedRepositoriesRemovedArray =
  Vec<WebhookInstallationRepositoriesAddedRepositoriesRemoved>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookInstallationRepositoriesRemovedRepositoriesAddedArray =
  Vec<WebhookInstallationRepositoriesRemovedRepositoriesAdded>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookInstallationRepositoriesRemovedRepositoriesRemovedArray =
  Vec<WebhookInstallationRepositoriesRemovedRepositoriesRemoved>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type InstallationSuspendEventRepositoriesArray = Vec<InstallationSuspendEventRepositories>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type InstallationUnsuspendEventRepositoriesArray = Vec<InstallationUnsuspendEventRepositories>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type MetaDeletedEventHookEventsArray = Vec<MetaDeletedEventHookEvents>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type PackagePublishedEventPackagePackageVersionDockerMetadataArray =
  Vec<PackagePublishedEventPackagePackageVersionDockerMetadata>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type PackagePublishedEventPackagePackageVersionPackageFilesArray =
  Vec<PackagePublishedEventPackagePackageVersionPackageFiles>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type RubyGemsMetadataArray = Vec<RubyGemsMetadata>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type PackageUpdatedEventPackagePackageVersionDockerMetadataArray =
  Vec<PackageUpdatedEventPackagePackageVersionDockerMetadata>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type PackageUpdatedEventPackagePackageVersionPackageFilesArray =
  Vec<PackageUpdatedEventPackagePackageVersionPackageFiles>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadataArray =
  Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFilesArray =
  Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFilesArray =
  Vec<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type RepositoryRulesetConditionsForRefNamesArray = Vec<RepositoryRulesetConditionsForRefNames>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type RepositoryRulesetEditedEventChangesConditionsUpdatedArray =
  Vec<RepositoryRulesetEditedEventChangesConditionsUpdated>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type RepositoryRulesetEditedEventChangesRulesUpdatedArray =
  Vec<RepositoryRulesetEditedEventChangesRulesUpdated>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwesArray =
  Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiersArray =
  Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferencesArray =
  Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesArray =
  Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwesArray =
  Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiersArray =
  Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferencesArray =
  Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesArray =
  Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwesArray =
  Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiersArray =
  Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferencesArray =
  Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesArray =
  Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type StatusEventBranchesArray = Vec<StatusEventBranches>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type StatusEventCommitParentsArray = Vec<StatusEventCommitParents>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WorkflowStepArray = Vec<WorkflowStep>;
#[cfg(any(feature = "full", feature = "webhook",))]
pub type WorkflowRunPullRequestsArray = Vec<WorkflowRunPullRequests>;

/// Enumerations defination
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionConfigurationDisabledEventAction {
  #[serde(rename = "disabled")]
  Disabled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionConfigurationDisabledEventAction {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionConfigurationDisabledEventAction::Disabled => "disabled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionConfigurationEnabledEventAction {
  #[serde(rename = "enabled")]
  Enabled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionConfigurationEnabledEventAction {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionConfigurationEnabledEventAction::Enabled => "enabled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleAllowDeletionsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleAllowDeletionsEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleAllowDeletionsEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleAllowDeletionsEnforcementLevel::NonAdmins => "non_admins".to_string(),
      BranchProtectionRuleAllowDeletionsEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleAllowForcePushesEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleAllowForcePushesEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleAllowForcePushesEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleAllowForcePushesEnforcementLevel::NonAdmins => "non_admins".to_string(),
      BranchProtectionRuleAllowForcePushesEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleLinearHistoryRequirementEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleLinearHistoryRequirementEnforcementLevel::Everyone => {
        "everyone".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleMergeQueueEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleMergeQueueEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleMergeQueueEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleMergeQueueEnforcementLevel::NonAdmins => "non_admins".to_string(),
      BranchProtectionRuleMergeQueueEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRulePullRequestReviewsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRulePullRequestReviewsEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRulePullRequestReviewsEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRulePullRequestReviewsEnforcementLevel::NonAdmins => "non_admins".to_string(),
      BranchProtectionRulePullRequestReviewsEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleRequiredConversationResolutionLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleRequiredConversationResolutionLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleRequiredConversationResolutionLevel::Off => "off".to_string(),
      BranchProtectionRuleRequiredConversationResolutionLevel::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleRequiredConversationResolutionLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleRequiredDeploymentsEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleRequiredDeploymentsEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleRequiredStatusChecksEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleRequiredStatusChecksEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleSignatureRequirementEnforcementLevel {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleSignatureRequirementEnforcementLevel {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleSignatureRequirementEnforcementLevel::Off => "off".to_string(),
      BranchProtectionRuleSignatureRequirementEnforcementLevel::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleSignatureRequirementEnforcementLevel::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString
  for BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom
{
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom::Off => "off".to_string(),
      BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom::NonAdmins => "non_admins".to_string(),
      BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom::Everyone => "everyone".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom {
  #[serde(rename = "off")]
  Off,
  #[serde(rename = "non_admins")]
  NonAdmins,
  #[serde(rename = "everyone")]
  Everyone,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom {
  fn to_string(&self) -> String {
    match self {
      BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom::Off => {
        "off".to_string()
      }
      BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom::NonAdmins => {
        "non_admins".to_string()
      }
      BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom::Everyone => {
        "everyone".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CheckRunCompletedEventAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CheckRunCompletedEventAction {
  fn to_string(&self) -> String {
    match self {
      CheckRunCompletedEventAction::Completed => "completed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CheckRunCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CheckRunCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      CheckRunCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CheckRunRequestedActionEventAction {
  #[serde(rename = "requested_action")]
  RequestedAction,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CheckRunRequestedActionEventAction {
  fn to_string(&self) -> String {
    match self {
      CheckRunRequestedActionEventAction::RequestedAction => "requested_action".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CheckRunReRequestedEventAction {
  #[serde(rename = "rerequested")]
  Rerequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CheckRunReRequestedEventAction {
  fn to_string(&self) -> String {
    match self {
      CheckRunReRequestedEventAction::Rerequested => "rerequested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteCompletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteCompletedAction::Completed => "completed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AppEvents {
  #[serde(rename = "branch_protection_rule")]
  BranchProtectionRule,
  #[serde(rename = "check_run")]
  CheckRun,
  #[serde(rename = "check_suite")]
  CheckSuite,
  #[serde(rename = "code_scanning_alert")]
  CodeScanningAlert,
  #[serde(rename = "commit_comment")]
  CommitComment,
  #[serde(rename = "content_reference")]
  ContentReference,
  #[serde(rename = "create")]
  Create,
  #[serde(rename = "delete")]
  Delete,
  #[serde(rename = "deployment")]
  Deployment,
  #[serde(rename = "deployment_review")]
  DeploymentReview,
  #[serde(rename = "deployment_status")]
  DeploymentStatus,
  #[serde(rename = "deploy_key")]
  DeployKey,
  #[serde(rename = "discussion")]
  Discussion,
  #[serde(rename = "discussion_comment")]
  DiscussionComment,
  #[serde(rename = "fork")]
  Fork,
  #[serde(rename = "gollum")]
  Gollum,
  #[serde(rename = "issues")]
  Issues,
  #[serde(rename = "issue_comment")]
  IssueComment,
  #[serde(rename = "label")]
  Label,
  #[serde(rename = "member")]
  Member,
  #[serde(rename = "membership")]
  Membership,
  #[serde(rename = "milestone")]
  Milestone,
  #[serde(rename = "organization")]
  Organization,
  #[serde(rename = "org_block")]
  OrgBlock,
  #[serde(rename = "page_build")]
  PageBuild,
  #[serde(rename = "project")]
  Project,
  #[serde(rename = "project_card")]
  ProjectCard,
  #[serde(rename = "project_column")]
  ProjectColumn,
  #[serde(rename = "public")]
  Public,
  #[serde(rename = "pull_request")]
  PullRequest,
  #[serde(rename = "pull_request_review")]
  PullRequestReview,
  #[serde(rename = "pull_request_review_comment")]
  PullRequestReviewComment,
  #[serde(rename = "push")]
  Push,
  #[serde(rename = "registry_package")]
  RegistryPackage,
  #[serde(rename = "release")]
  Release,
  #[serde(rename = "repository")]
  Repository,
  #[serde(rename = "repository_dispatch")]
  RepositoryDispatch,
  #[serde(rename = "secret_scanning_alert")]
  SecretScanningAlert,
  #[serde(rename = "star")]
  Star,
  #[serde(rename = "status")]
  Status,
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "team_add")]
  TeamAdd,
  #[serde(rename = "watch")]
  Watch,
  #[serde(rename = "workflow_dispatch")]
  WorkflowDispatch,
  #[serde(rename = "workflow_run")]
  WorkflowRun,
  #[serde(rename = "merge_group")]
  MergeGroup,
  #[serde(rename = "pull_request_review_thread")]
  PullRequestReviewThread,
  #[serde(rename = "workflow_job")]
  WorkflowJob,
  #[serde(rename = "merge_queue_entry")]
  MergeQueueEntry,
  #[serde(rename = "security_and_analysis")]
  SecurityAndAnalysis,
  #[serde(rename = "projects_v2_item")]
  ProjectsV2Item,
  #[serde(rename = "secret_scanning_alert_location")]
  SecretScanningAlertLocation,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for AppEvents {
  fn to_string(&self) -> String {
    match self {
      AppEvents::BranchProtectionRule => "branch_protection_rule".to_string(),
      AppEvents::CheckRun => "check_run".to_string(),
      AppEvents::CheckSuite => "check_suite".to_string(),
      AppEvents::CodeScanningAlert => "code_scanning_alert".to_string(),
      AppEvents::CommitComment => "commit_comment".to_string(),
      AppEvents::ContentReference => "content_reference".to_string(),
      AppEvents::Create => "create".to_string(),
      AppEvents::Delete => "delete".to_string(),
      AppEvents::Deployment => "deployment".to_string(),
      AppEvents::DeploymentReview => "deployment_review".to_string(),
      AppEvents::DeploymentStatus => "deployment_status".to_string(),
      AppEvents::DeployKey => "deploy_key".to_string(),
      AppEvents::Discussion => "discussion".to_string(),
      AppEvents::DiscussionComment => "discussion_comment".to_string(),
      AppEvents::Fork => "fork".to_string(),
      AppEvents::Gollum => "gollum".to_string(),
      AppEvents::Issues => "issues".to_string(),
      AppEvents::IssueComment => "issue_comment".to_string(),
      AppEvents::Label => "label".to_string(),
      AppEvents::Member => "member".to_string(),
      AppEvents::Membership => "membership".to_string(),
      AppEvents::Milestone => "milestone".to_string(),
      AppEvents::Organization => "organization".to_string(),
      AppEvents::OrgBlock => "org_block".to_string(),
      AppEvents::PageBuild => "page_build".to_string(),
      AppEvents::Project => "project".to_string(),
      AppEvents::ProjectCard => "project_card".to_string(),
      AppEvents::ProjectColumn => "project_column".to_string(),
      AppEvents::Public => "public".to_string(),
      AppEvents::PullRequest => "pull_request".to_string(),
      AppEvents::PullRequestReview => "pull_request_review".to_string(),
      AppEvents::PullRequestReviewComment => "pull_request_review_comment".to_string(),
      AppEvents::Push => "push".to_string(),
      AppEvents::RegistryPackage => "registry_package".to_string(),
      AppEvents::Release => "release".to_string(),
      AppEvents::Repository => "repository".to_string(),
      AppEvents::RepositoryDispatch => "repository_dispatch".to_string(),
      AppEvents::SecretScanningAlert => "secret_scanning_alert".to_string(),
      AppEvents::Star => "star".to_string(),
      AppEvents::Status => "status".to_string(),
      AppEvents::Team => "team".to_string(),
      AppEvents::TeamAdd => "team_add".to_string(),
      AppEvents::Watch => "watch".to_string(),
      AppEvents::WorkflowDispatch => "workflow_dispatch".to_string(),
      AppEvents::WorkflowRun => "workflow_run".to_string(),
      AppEvents::MergeGroup => "merge_group".to_string(),
      AppEvents::PullRequestReviewThread => "pull_request_review_thread".to_string(),
      AppEvents::WorkflowJob => "workflow_job".to_string(),
      AppEvents::MergeQueueEntry => "merge_queue_entry".to_string(),
      AppEvents::SecurityAndAnalysis => "security_and_analysis".to_string(),
      AppEvents::ProjectsV2Item => "projects_v2_item".to_string(),
      AppEvents::SecretScanningAlertLocation => "secret_scanning_alert_location".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum UserType {
  Bot,
  User,
  Organization,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for UserType {
  fn to_string(&self) -> String {
    match self {
      UserType::Bot => "Bot".to_string(),
      UserType::User => "User".to_string(),
      UserType::Organization => "Organization".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteCompletedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "startup_failure")]
  StartupFailure,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteCompletedCheckSuiteConclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Success => "success".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Failure => "failure".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Neutral => "neutral".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Stale => "stale".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::Skipped => "skipped".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteConclusion::StartupFailure => {
        "startup_failure".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteCompletedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteCompletedCheckSuiteStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteCompletedCheckSuiteStatus::Requested => "requested".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteStatus::InProgress => "in_progress".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Completed => "completed".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Queued => "queued".to_string(),
      WebhookCheckSuiteCompletedCheckSuiteStatus::Pending => "pending".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRequestedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRequestedAction::Requested => "requested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRequestedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRequestedCheckSuiteConclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Success => "success".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Failure => "failure".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Stale => "stale".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteConclusion::Skipped => "skipped".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRequestedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRequestedCheckSuiteStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRequestedCheckSuiteStatus::Requested => "requested".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteStatus::Completed => "completed".to_string(),
      WebhookCheckSuiteRequestedCheckSuiteStatus::Queued => "queued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRerequestedAction {
  #[serde(rename = "rerequested")]
  Rerequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRerequestedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRerequestedAction::Rerequested => "rerequested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRerequestedCheckSuiteConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRerequestedCheckSuiteConclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Success => "success".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Failure => "failure".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Neutral => "neutral".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Cancelled => "cancelled".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::TimedOut => "timed_out".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookCheckSuiteRerequestedCheckSuiteConclusion::Stale => "stale".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCheckSuiteRerequestedCheckSuiteStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCheckSuiteRerequestedCheckSuiteStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Requested => "requested".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::InProgress => "in_progress".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Completed => "completed".to_string(),
      WebhookCheckSuiteRerequestedCheckSuiteStatus::Queued => "queued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertAppearedInBranchAction {
  #[serde(rename = "appeared_in_branch")]
  AppearedInBranch,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertAppearedInBranchAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAction::AppearedInBranch => {
        "appeared_in_branch".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::FalsePositive => {
        "false positive".to_string()
      }
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::WonTFix => {
        "won't fix".to_string()
      }
      WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason::UsedInTests => {
        "used in tests".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AlertInstanceState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for AlertInstanceState {
  fn to_string(&self) -> String {
    match self {
      AlertInstanceState::Open => "open".to_string(),
      AlertInstanceState::Dismissed => "dismissed".to_string(),
      AlertInstanceState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertAppearedInBranchAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertAppearedInBranchAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertAppearedInBranchAlertState::Open => "open".to_string(),
      WebhookCodeScanningAlertAppearedInBranchAlertState::Dismissed => "dismissed".to_string(),
      WebhookCodeScanningAlertAppearedInBranchAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertClosedByUserAction {
  #[serde(rename = "closed_by_user")]
  ClosedByUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertClosedByUserAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertClosedByUserAction::ClosedByUser => "closed_by_user".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertClosedByUserAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertClosedByUserAlertDismissedReason {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::FalsePositive => {
        "false positive".to_string()
      }
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::WonTFix => "won't fix".to_string(),
      WebhookCodeScanningAlertClosedByUserAlertDismissedReason::UsedInTests => {
        "used in tests".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertClosedByUserAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertClosedByUserAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertClosedByUserAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertClosedByUserAlertState {
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertClosedByUserAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertClosedByUserAlertState::Dismissed => "dismissed".to_string(),
      WebhookCodeScanningAlertClosedByUserAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertCreatedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertCreatedAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertCreatedAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertCreatedAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertCreatedAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertCreatedAlertState::Open => "open".to_string(),
      WebhookCodeScanningAlertCreatedAlertState::Dismissed => "dismissed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertFixedAction {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertFixedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertFixedAction::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The reason for dismissing or closing the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertFixedAlertDismissedReason {
  #[serde(rename = "false positive")]
  FalsePositive,
  #[serde(rename = "won't fix")]
  WonTFix,
  #[serde(rename = "used in tests")]
  UsedInTests,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertFixedAlertDismissedReason {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertFixedAlertDismissedReason::FalsePositive => {
        "false positive".to_string()
      }
      WebhookCodeScanningAlertFixedAlertDismissedReason::WonTFix => "won't fix".to_string(),
      WebhookCodeScanningAlertFixedAlertDismissedReason::UsedInTests => "used in tests".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertFixedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertFixedAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertFixedAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertFixedAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertFixedAlertState {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertFixedAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertFixedAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertReopenedAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedAlertState::Open => "open".to_string(),
      WebhookCodeScanningAlertReopenedAlertState::Dismissed => "dismissed".to_string(),
      WebhookCodeScanningAlertReopenedAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedByUserAction {
  #[serde(rename = "reopened_by_user")]
  ReopenedByUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedByUserAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedByUserAction::ReopenedByUser => {
        "reopened_by_user".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The severity of the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "note")]
  Note,
  #[serde(rename = "warning")]
  Warning,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::None => "none".to_string(),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Note => "note".to_string(),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Warning => "warning".to_string(),
      WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of a code scanning alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCodeScanningAlertReopenedByUserAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCodeScanningAlertReopenedByUserAlertState {
  fn to_string(&self) -> String {
    match self {
      WebhookCodeScanningAlertReopenedByUserAlertState::Open => "open".to_string(),
      WebhookCodeScanningAlertReopenedByUserAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The action performed. Can be `created`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCommitCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCommitCommentCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookCommitCommentCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookCommitCommentCreatedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookCommitCommentCreatedCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookCommitCommentCreatedCommentAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookCommitCommentCreatedCommentAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      WebhookCommitCommentCreatedCommentAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      WebhookCommitCommentCreatedCommentAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookCommitCommentCreatedCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      WebhookCommitCommentCreatedCommentAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookCommitCommentCreatedCommentAuthorAssociation::None => "NONE".to_string(),
      WebhookCommitCommentCreatedCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The type of Git ref object created in the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CreateEventRefType {
  #[serde(rename = "tag")]
  Tag,
  #[serde(rename = "branch")]
  Branch,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CreateEventRefType {
  fn to_string(&self) -> String {
    match self {
      CreateEventRefType::Tag => "tag".to_string(),
      CreateEventRefType::Branch => "branch".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CustomPropertyCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CustomPropertyCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      CustomPropertyCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CustomPropertyDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CustomPropertyDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      CustomPropertyDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CustomPropertyUpdatedEventAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CustomPropertyUpdatedEventAction {
  fn to_string(&self) -> String {
    match self {
      CustomPropertyUpdatedEventAction::Updated => "updated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum CustomPropertyValuesUpdatedEventAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for CustomPropertyValuesUpdatedEventAction {
  fn to_string(&self) -> String {
    match self {
      CustomPropertyValuesUpdatedEventAction::Updated => "updated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The type of Git ref object deleted in the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DeleteEventRefType {
  #[serde(rename = "tag")]
  Tag,
  #[serde(rename = "branch")]
  Branch,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DeleteEventRefType {
  fn to_string(&self) -> String {
    match self {
      DeleteEventRefType::Tag => "tag".to_string(),
      DeleteEventRefType::Branch => "branch".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertAutoDismissedEventAction {
  #[serde(rename = "auto_dismissed")]
  AutoDismissed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertAutoDismissedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertAutoDismissedEventAction::AutoDismissed => "auto_dismissed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertAutoReopenedEventAction {
  #[serde(rename = "auto_reopened")]
  AutoReopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertAutoReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertAutoReopenedEventAction::AutoReopened => "auto_reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertDismissedEventAction {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertDismissedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertDismissedEventAction::Dismissed => "dismissed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertFixedEventAction {
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertFixedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertFixedEventAction::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertReintroducedEventAction {
  #[serde(rename = "reintroduced")]
  Reintroduced,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertReintroducedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertReintroducedEventAction::Reintroduced => "reintroduced".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DependabotAlertReopenedEventAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DependabotAlertReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      DependabotAlertReopenedEventAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeployKeyCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeployKeyCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeployKeyCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeployKeyDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeployKeyDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeployKeyDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DeploymentCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DeploymentCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      DeploymentCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DeploymentWorkflowRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DeploymentWorkflowRunConclusion {
  fn to_string(&self) -> String {
    match self {
      DeploymentWorkflowRunConclusion::Success => "success".to_string(),
      DeploymentWorkflowRunConclusion::Failure => "failure".to_string(),
      DeploymentWorkflowRunConclusion::Neutral => "neutral".to_string(),
      DeploymentWorkflowRunConclusion::Cancelled => "cancelled".to_string(),
      DeploymentWorkflowRunConclusion::TimedOut => "timed_out".to_string(),
      DeploymentWorkflowRunConclusion::ActionRequired => "action_required".to_string(),
      DeploymentWorkflowRunConclusion::Stale => "stale".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DeploymentWorkflowRunStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "waiting")]
  Waiting,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DeploymentWorkflowRunStatus {
  fn to_string(&self) -> String {
    match self {
      DeploymentWorkflowRunStatus::Requested => "requested".to_string(),
      DeploymentWorkflowRunStatus::InProgress => "in_progress".to_string(),
      DeploymentWorkflowRunStatus::Completed => "completed".to_string(),
      DeploymentWorkflowRunStatus::Queued => "queued".to_string(),
      DeploymentWorkflowRunStatus::Waiting => "waiting".to_string(),
      DeploymentWorkflowRunStatus::Pending => "pending".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DeploymentProtectionRuleRequestedEventAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DeploymentProtectionRuleRequestedEventAction {
  fn to_string(&self) -> String {
    match self {
      DeploymentProtectionRuleRequestedEventAction::Requested => "requested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewApprovedAction {
  #[serde(rename = "approved")]
  Approved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewApprovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewApprovedAction::Approved => "approved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewApprovedReviewersType {
  User,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewApprovedReviewersType {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewApprovedReviewersType::User => "User".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewRejectedAction {
  #[serde(rename = "rejected")]
  Rejected,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewRejectedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewRejectedAction::Rejected => "rejected".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewRejectedReviewersType {
  User,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewRejectedReviewersType {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewRejectedReviewersType::User => "User".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewRequestedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewRequestedAction::Requested => "requested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentReviewRequestedReviewersType {
  User,
  Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentReviewRequestedReviewersType {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentReviewRequestedReviewersType::User => "User".to_string(),
      WebhookDeploymentReviewRequestedReviewersType::Team => "Team".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentStatusCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentStatusCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentStatusCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The result of the completed check run. This value will be `null` until the check run has completed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentStatusCreatedCheckRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentStatusCreatedCheckRunConclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentStatusCreatedCheckRunConclusion::Success => "success".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Failure => "failure".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Neutral => "neutral".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Cancelled => "cancelled".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::TimedOut => "timed_out".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookDeploymentStatusCreatedCheckRunConclusion::Stale => "stale".to_string(),
      WebhookDeploymentStatusCreatedCheckRunConclusion::Skipped => "skipped".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDeploymentStatusCreatedCheckRunStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
  #[serde(rename = "pending")]
  Pending,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDeploymentStatusCreatedCheckRunStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookDeploymentStatusCreatedCheckRunStatus::Queued => "queued".to_string(),
      WebhookDeploymentStatusCreatedCheckRunStatus::InProgress => "in_progress".to_string(),
      WebhookDeploymentStatusCreatedCheckRunStatus::Completed => "completed".to_string(),
      WebhookDeploymentStatusCreatedCheckRunStatus::Waiting => "waiting".to_string(),
      WebhookDeploymentStatusCreatedCheckRunStatus::Pending => "pending".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionAnsweredEventAction {
  #[serde(rename = "answered")]
  Answered,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionAnsweredEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionAnsweredEventAction::Answered => "answered".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionAnsweredEventAnswerAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionAnsweredEventAnswerAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      DiscussionAnsweredEventAnswerAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      DiscussionAnsweredEventAnswerAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::Member => "MEMBER".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::None => "NONE".to_string(),
      DiscussionAnsweredEventAnswerAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      DiscussionAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      DiscussionAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      DiscussionAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      DiscussionAuthorAssociation::FirstTimeContributor => "FIRST_TIME_CONTRIBUTOR".to_string(),
      DiscussionAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      DiscussionAuthorAssociation::Member => "MEMBER".to_string(),
      DiscussionAuthorAssociation::None => "NONE".to_string(),
      DiscussionAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The current state of the discussion.
/// `converting` means that the discussion is being converted from an issue.
/// `transferring` means that the discussion is being transferred from another repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "locked")]
  Locked,
  #[serde(rename = "converting")]
  Converting,
  #[serde(rename = "transferring")]
  Transferring,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionState {
  fn to_string(&self) -> String {
    match self {
      DiscussionState::Open => "open".to_string(),
      DiscussionState::Closed => "closed".to_string(),
      DiscussionState::Locked => "locked".to_string(),
      DiscussionState::Converting => "converting".to_string(),
      DiscussionState::Transferring => "transferring".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The reason for the current state
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionStateReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "outdated")]
  Outdated,
  #[serde(rename = "duplicate")]
  Duplicate,
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionStateReason {
  fn to_string(&self) -> String {
    match self {
      DiscussionStateReason::Resolved => "resolved".to_string(),
      DiscussionStateReason::Outdated => "outdated".to_string(),
      DiscussionStateReason::Duplicate => "duplicate".to_string(),
      DiscussionStateReason::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionCategoryChangedEventAction {
  #[serde(rename = "category_changed")]
  CategoryChanged,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionCategoryChangedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionCategoryChangedEventAction::CategoryChanged => "category_changed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionClosedEventAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionClosedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionClosedEventAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentCreatedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentCreatedCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::None => "NONE".to_string(),
      WebhookDiscussionCommentCreatedCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentDeletedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentDeletedCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::None => "NONE".to_string(),
      WebhookDiscussionCommentDeletedCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookDiscussionCommentEditedCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookDiscussionCommentEditedCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::None => "NONE".to_string(),
      WebhookDiscussionCommentEditedCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum DiscussionCreatedEventDiscussionItem2Locked {
  Boolean(bool),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionCreatedEventDiscussionItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "converting")]
  Converting,
  #[serde(rename = "transferring")]
  Transferring,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionCreatedEventDiscussionItem2State {
  fn to_string(&self) -> String {
    match self {
      DiscussionCreatedEventDiscussionItem2State::Open => "open".to_string(),
      DiscussionCreatedEventDiscussionItem2State::Converting => "converting".to_string(),
      DiscussionCreatedEventDiscussionItem2State::Transferring => "transferring".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DiscussionCreatedEventDiscussion {
  /// A Discussion in a repository.
  Discussion(Discussion),
  DiscussionCreatedEventDiscussionItem2(DiscussionCreatedEventDiscussionItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionLabeledEventAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionLabeledEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionLabeledEventAction::Labeled => "labeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionLockedEventAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionLockedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionLockedEventAction::Locked => "locked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionPinnedEventAction {
  #[serde(rename = "pinned")]
  Pinned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionPinnedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionPinnedEventAction::Pinned => "pinned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionReopenedEventAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionReopenedEventAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionTransferredEventAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionTransferredEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionTransferredEventAction::Transferred => "transferred".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionUnansweredEventAction {
  #[serde(rename = "unanswered")]
  Unanswered,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionUnansweredEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionUnansweredEventAction::Unanswered => "unanswered".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionUnansweredEventOldAnswerAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionUnansweredEventOldAnswerAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      DiscussionUnansweredEventOldAnswerAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      DiscussionUnansweredEventOldAnswerAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      DiscussionUnansweredEventOldAnswerAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      DiscussionUnansweredEventOldAnswerAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      DiscussionUnansweredEventOldAnswerAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      DiscussionUnansweredEventOldAnswerAuthorAssociation::Member => "MEMBER".to_string(),
      DiscussionUnansweredEventOldAnswerAuthorAssociation::None => "NONE".to_string(),
      DiscussionUnansweredEventOldAnswerAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionUnlabeledEventAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionUnlabeledEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionUnlabeledEventAction::Unlabeled => "unlabeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionUnlockedEventAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionUnlockedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionUnlockedEventAction::Unlocked => "unlocked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum DiscussionUnpinnedEventAction {
  #[serde(rename = "unpinned")]
  Unpinned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for DiscussionUnpinnedEventAction {
  fn to_string(&self) -> String {
    match self {
      DiscussionUnpinnedEventAction::Unpinned => "unpinned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ForkEventForkeeItem2Fork {
  Boolean(bool),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ForkEventForkee {
  /// A repository on GitHub.
  Repository(Repository),
  ForkEventForkeeItem2(ForkEventForkeeItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookGithubAppAuthorizationRevokedAction {
  #[serde(rename = "revoked")]
  Revoked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookGithubAppAuthorizationRevokedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookGithubAppAuthorizationRevokedAction::Revoked => "revoked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The action that was performed on the page. Can be `created` or `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum GollumEventPagesAction {
  #[serde(rename = "created")]
  Created,
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for GollumEventPagesAction {
  fn to_string(&self) -> String {
    match self {
      GollumEventPagesAction::Created => "created".to_string(),
      GollumEventPagesAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum InstallationCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for InstallationCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      InstallationCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum InstallationDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for InstallationDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      InstallationDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationNewPermissionsAcceptedAction {
  #[serde(rename = "new_permissions_accepted")]
  NewPermissionsAccepted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationNewPermissionsAcceptedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationNewPermissionsAcceptedAction::NewPermissionsAccepted => {
        "new_permissions_accepted".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationRepositoriesAddedAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationRepositoriesAddedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationRepositoriesAddedAction::Added => "added".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// Describe whether all repositories have been selected or there's a selection involved
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationRepositoriesAddedRepositorySelection {
  #[serde(rename = "all")]
  All,
  #[serde(rename = "selected")]
  Selected,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationRepositoriesAddedRepositorySelection {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationRepositoriesAddedRepositorySelection::All => "all".to_string(),
      WebhookInstallationRepositoriesAddedRepositorySelection::Selected => "selected".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationRepositoriesRemovedAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationRepositoriesRemovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationRepositoriesRemovedAction::Removed => "removed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// Describe whether all repositories have been selected or there's a selection involved
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationRepositoriesRemovedRepositorySelection {
  #[serde(rename = "all")]
  All,
  #[serde(rename = "selected")]
  Selected,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationRepositoriesRemovedRepositorySelection {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationRepositoriesRemovedRepositorySelection::All => "all".to_string(),
      WebhookInstallationRepositoriesRemovedRepositorySelection::Selected => "selected".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum InstallationSuspendEventAction {
  #[serde(rename = "suspend")]
  Suspend,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for InstallationSuspendEventAction {
  fn to_string(&self) -> String {
    match self {
      InstallationSuspendEventAction::Suspend => "suspend".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookInstallationTargetRenamedAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookInstallationTargetRenamedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookInstallationTargetRenamedAction::Renamed => "renamed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum InstallationUnsuspendEventAction {
  #[serde(rename = "unsuspend")]
  Unsuspend,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for InstallationUnsuspendEventAction {
  fn to_string(&self) -> String {
    match self {
      InstallationUnsuspendEventAction::Unsuspend => "unsuspend".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssueCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssueCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      IssueCommentAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      IssueCommentAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      IssueCommentAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      IssueCommentAuthorAssociation::FirstTimeContributor => "FIRST_TIME_CONTRIBUTOR".to_string(),
      IssueCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      IssueCommentAuthorAssociation::Member => "MEMBER".to_string(),
      IssueCommentAuthorAssociation::None => "NONE".to_string(),
      IssueCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentCreatedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentCreatedIssueItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentCreatedIssueItem2State::Open => "open".to_string(),
      WebhookIssueCommentCreatedIssueItem2State::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentCreatedIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  WebhookIssueCommentCreatedIssueItem2(WebhookIssueCommentCreatedIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentDeletedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentDeletedIssueItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentDeletedIssueItem2State::Open => "open".to_string(),
      WebhookIssueCommentDeletedIssueItem2State::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentDeletedIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  WebhookIssueCommentDeletedIssueItem2(WebhookIssueCommentDeletedIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// State of the issue; either 'open' or 'closed'
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookIssueCommentEditedIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookIssueCommentEditedIssueItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookIssueCommentEditedIssueItem2State::Open => "open".to_string(),
      WebhookIssueCommentEditedIssueItem2State::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookIssueCommentEditedIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  WebhookIssueCommentEditedIssueItem2(WebhookIssueCommentEditedIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesAssignedEventAction {
  #[serde(rename = "assigned")]
  Assigned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesAssignedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesAssignedEventAction::Assigned => "assigned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesClosedEventAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesClosedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesClosedEventAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesClosedEventIssueItem2State {
  #[serde(rename = "closed")]
  Closed,
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesClosedEventIssueItem2State {
  fn to_string(&self) -> String {
    match self {
      IssuesClosedEventIssueItem2State::Closed => "closed".to_string(),
      IssuesClosedEventIssueItem2State::Open => "open".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesClosedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesClosedEventIssueItem2(IssuesClosedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesDemilestonedEventAction {
  #[serde(rename = "demilestoned")]
  Demilestoned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesDemilestonedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesDemilestonedEventAction::Demilestoned => "demilestoned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesDemilestonedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesDemilestonedEventIssueItem2(IssuesDemilestonedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesLabeledEventAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesLabeledEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesLabeledEventAction::Labeled => "labeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesLockedEventAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesLockedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesLockedEventAction::Locked => "locked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesLockedEventIssueItem2ActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesLockedEventIssueItem2ActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      IssuesLockedEventIssueItem2ActiveLockReason::Resolved => "resolved".to_string(),
      IssuesLockedEventIssueItem2ActiveLockReason::OffTopic => "off-topic".to_string(),
      IssuesLockedEventIssueItem2ActiveLockReason::TooHeated => "too heated".to_string(),
      IssuesLockedEventIssueItem2ActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum IssuesLockedEventIssueItem2Locked {
  Boolean(bool),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesLockedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesLockedEventIssueItem2(IssuesLockedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesMilestonedEventAction {
  #[serde(rename = "milestoned")]
  Milestoned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesMilestonedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesMilestonedEventAction::Milestoned => "milestoned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesMilestonedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesMilestonedEventIssueItem2(IssuesMilestonedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesOpenedEventAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesOpenedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesOpenedEventAction::Opened => "opened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesPinnedEventAction {
  #[serde(rename = "pinned")]
  Pinned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesPinnedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesPinnedEventAction::Pinned => "pinned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesReopenedEventAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesReopenedEventAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesReopenedEventIssueItem2State {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesReopenedEventIssueItem2State {
  fn to_string(&self) -> String {
    match self {
      IssuesReopenedEventIssueItem2State::Open => "open".to_string(),
      IssuesReopenedEventIssueItem2State::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesReopenedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesReopenedEventIssueItem2(IssuesReopenedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesTransferredEventAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesTransferredEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesTransferredEventAction::Transferred => "transferred".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The action that was performed.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesUnassignedEventAction {
  #[serde(rename = "unassigned")]
  Unassigned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesUnassignedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesUnassignedEventAction::Unassigned => "unassigned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesUnlabeledEventAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesUnlabeledEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesUnlabeledEventAction::Unlabeled => "unlabeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesUnlockedEventAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesUnlockedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesUnlockedEventAction::Unlocked => "unlocked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum IssuesUnlockedEventIssueItem2Locked {
  Boolean(bool),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IssuesUnlockedEventIssue {
  /// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
  Issue(Issue),
  IssuesUnlockedEventIssueItem2(IssuesUnlockedEventIssueItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum IssuesUnpinnedEventAction {
  #[serde(rename = "unpinned")]
  Unpinned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for IssuesUnpinnedEventAction {
  fn to_string(&self) -> String {
    match self {
      IssuesUnpinnedEventAction::Unpinned => "unpinned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum LabelCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for LabelCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      LabelCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum LabelDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for LabelDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      LabelDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum LabelEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for LabelEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      LabelEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchaseCancelledAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchaseCancelledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchaseCancelledAction::Cancelled => "cancelled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MarketplacePurchasePlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MarketplacePurchasePlanPriceModel {
  fn to_string(&self) -> String {
    match self {
      MarketplacePurchasePlanPriceModel::Free => "FREE".to_string(),
      MarketplacePurchasePlanPriceModel::FlatRate => "FLAT_RATE".to_string(),
      MarketplacePurchasePlanPriceModel::PerUnit => "PER_UNIT".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::Free => {
        "FREE".to_string()
      }
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        "FLAT_RATE".to_string()
      }
      WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        "PER_UNIT".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchaseCancelledMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2(
    WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchaseChangedAction {
  #[serde(rename = "changed")]
  Changed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchaseChangedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchaseChangedAction::Changed => "changed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::Free => {
        "FREE".to_string()
      }
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        "FLAT_RATE".to_string()
      }
      WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        "PER_UNIT".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchaseChangedMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2(
    WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchasePendingChangeAction {
  #[serde(rename = "pending_change")]
  PendingChange,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchasePendingChangeAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchasePendingChangeAction::PendingChange => "pending_change".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::Free => {
        "FREE".to_string()
      }
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        "FLAT_RATE".to_string()
      }
      WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        "PER_UNIT".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePendingChangeMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchasePendingChangeCancelledAction {
  #[serde(rename = "pending_change_cancelled")]
  PendingChangeCancelled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchasePendingChangeCancelledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchasePendingChangeCancelledAction::PendingChangeCancelled => {
        "pending_change_cancelled".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchasePurchasedAction {
  #[serde(rename = "purchased")]
  Purchased,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchasePurchasedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchasePurchasedAction::Purchased => "purchased".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel {
  #[serde(rename = "FREE")]
  Free,
  #[serde(rename = "FLAT_RATE")]
  FlatRate,
  #[serde(rename = "PER_UNIT")]
  PerUnit,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel {
  fn to_string(&self) -> String {
    match self {
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::Free => {
        "FREE".to_string()
      }
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::FlatRate => {
        "FLAT_RATE".to_string()
      }
      WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel::PerUnit => {
        "PER_UNIT".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookMarketplacePurchasePurchasedMarketplacePurchase {
  MarketplacePurchase(MarketplacePurchase),
  WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2(
    WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MemberAddedEventAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MemberAddedEventAction {
  fn to_string(&self) -> String {
    match self {
      MemberAddedEventAction::Added => "added".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MemberAddedEventChangesPermissionTo {
  #[serde(rename = "write")]
  Write,
  #[serde(rename = "admin")]
  Admin,
  #[serde(rename = "read")]
  Read,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MemberAddedEventChangesPermissionTo {
  fn to_string(&self) -> String {
    match self {
      MemberAddedEventChangesPermissionTo::Write => "write".to_string(),
      MemberAddedEventChangesPermissionTo::Admin => "admin".to_string(),
      MemberAddedEventChangesPermissionTo::Read => "read".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MemberEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MemberEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      MemberEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MemberRemovedEventAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MemberRemovedEventAction {
  fn to_string(&self) -> String {
    match self {
      MemberRemovedEventAction::Removed => "removed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MembershipAddedEventAction {
  #[serde(rename = "added")]
  Added,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MembershipAddedEventAction {
  fn to_string(&self) -> String {
    match self {
      MembershipAddedEventAction::Added => "added".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The scope of the membership. Currently, can only be `team`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MembershipAddedEventScope {
  #[serde(rename = "team")]
  Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MembershipAddedEventScope {
  fn to_string(&self) -> String {
    match self {
      MembershipAddedEventScope::Team => "team".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MembershipRemovedEventAction {
  #[serde(rename = "removed")]
  Removed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MembershipRemovedEventAction {
  fn to_string(&self) -> String {
    match self {
      MembershipRemovedEventAction::Removed => "removed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The scope of the membership. Currently, can only be `team`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MembershipRemovedEventScope {
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "organization")]
  Organization,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MembershipRemovedEventScope {
  fn to_string(&self) -> String {
    match self {
      MembershipRemovedEventScope::Team => "team".to_string(),
      MembershipRemovedEventScope::Organization => "organization".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMergeGroupChecksRequestedAction {
  #[serde(rename = "checks_requested")]
  ChecksRequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMergeGroupChecksRequestedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMergeGroupChecksRequestedAction::ChecksRequested => "checks_requested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMergeGroupDestroyedAction {
  #[serde(rename = "destroyed")]
  Destroyed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMergeGroupDestroyedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookMergeGroupDestroyedAction::Destroyed => "destroyed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookMergeGroupDestroyedReason {
  #[serde(rename = "merged")]
  Merged,
  #[serde(rename = "invalidated")]
  Invalidated,
  #[serde(rename = "dequeued")]
  Dequeued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookMergeGroupDestroyedReason {
  fn to_string(&self) -> String {
    match self {
      WebhookMergeGroupDestroyedReason::Merged => "merged".to_string(),
      WebhookMergeGroupDestroyedReason::Invalidated => "invalidated".to_string(),
      WebhookMergeGroupDestroyedReason::Dequeued => "dequeued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MetaDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MetaDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      MetaDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MetaDeletedEventHookConfigContentType {
  #[serde(rename = "json")]
  Json,
  #[serde(rename = "form")]
  Form,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MetaDeletedEventHookConfigContentType {
  fn to_string(&self) -> String {
    match self {
      MetaDeletedEventHookConfigContentType::Json => "json".to_string(),
      MetaDeletedEventHookConfigContentType::Form => "form".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MetaDeletedEventHookEvents {
  #[serde(rename = "*")]
  Asterisk,
  #[serde(rename = "branch_protection_rule")]
  BranchProtectionRule,
  #[serde(rename = "check_run")]
  CheckRun,
  #[serde(rename = "check_suite")]
  CheckSuite,
  #[serde(rename = "code_scanning_alert")]
  CodeScanningAlert,
  #[serde(rename = "commit_comment")]
  CommitComment,
  #[serde(rename = "create")]
  Create,
  #[serde(rename = "delete")]
  Delete,
  #[serde(rename = "deployment")]
  Deployment,
  #[serde(rename = "deployment_status")]
  DeploymentStatus,
  #[serde(rename = "deploy_key")]
  DeployKey,
  #[serde(rename = "discussion")]
  Discussion,
  #[serde(rename = "discussion_comment")]
  DiscussionComment,
  #[serde(rename = "fork")]
  Fork,
  #[serde(rename = "gollum")]
  Gollum,
  #[serde(rename = "issues")]
  Issues,
  #[serde(rename = "issue_comment")]
  IssueComment,
  #[serde(rename = "label")]
  Label,
  #[serde(rename = "member")]
  Member,
  #[serde(rename = "membership")]
  Membership,
  #[serde(rename = "meta")]
  Meta,
  #[serde(rename = "milestone")]
  Milestone,
  #[serde(rename = "organization")]
  Organization,
  #[serde(rename = "org_block")]
  OrgBlock,
  #[serde(rename = "package")]
  Package,
  #[serde(rename = "page_build")]
  PageBuild,
  #[serde(rename = "project")]
  Project,
  #[serde(rename = "project_card")]
  ProjectCard,
  #[serde(rename = "project_column")]
  ProjectColumn,
  #[serde(rename = "public")]
  Public,
  #[serde(rename = "pull_request")]
  PullRequest,
  #[serde(rename = "pull_request_review")]
  PullRequestReview,
  #[serde(rename = "pull_request_review_comment")]
  PullRequestReviewComment,
  #[serde(rename = "pull_request_review_thread")]
  PullRequestReviewThread,
  #[serde(rename = "push")]
  Push,
  #[serde(rename = "registry_package")]
  RegistryPackage,
  #[serde(rename = "release")]
  Release,
  #[serde(rename = "repository")]
  Repository,
  #[serde(rename = "repository_import")]
  RepositoryImport,
  #[serde(rename = "repository_vulnerability_alert")]
  RepositoryVulnerabilityAlert,
  #[serde(rename = "secret_scanning_alert")]
  SecretScanningAlert,
  #[serde(rename = "secret_scanning_alert_location")]
  SecretScanningAlertLocation,
  #[serde(rename = "security_and_analysis")]
  SecurityAndAnalysis,
  #[serde(rename = "star")]
  Star,
  #[serde(rename = "status")]
  Status,
  #[serde(rename = "team")]
  Team,
  #[serde(rename = "team_add")]
  TeamAdd,
  #[serde(rename = "watch")]
  Watch,
  #[serde(rename = "workflow_job")]
  WorkflowJob,
  #[serde(rename = "workflow_run")]
  WorkflowRun,
  #[serde(rename = "repository_dispatch")]
  RepositoryDispatch,
  #[serde(rename = "projects_v2_item")]
  ProjectsV2Item,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MetaDeletedEventHookEvents {
  fn to_string(&self) -> String {
    match self {
      MetaDeletedEventHookEvents::Asterisk => "*".to_string(),
      MetaDeletedEventHookEvents::BranchProtectionRule => "branch_protection_rule".to_string(),
      MetaDeletedEventHookEvents::CheckRun => "check_run".to_string(),
      MetaDeletedEventHookEvents::CheckSuite => "check_suite".to_string(),
      MetaDeletedEventHookEvents::CodeScanningAlert => "code_scanning_alert".to_string(),
      MetaDeletedEventHookEvents::CommitComment => "commit_comment".to_string(),
      MetaDeletedEventHookEvents::Create => "create".to_string(),
      MetaDeletedEventHookEvents::Delete => "delete".to_string(),
      MetaDeletedEventHookEvents::Deployment => "deployment".to_string(),
      MetaDeletedEventHookEvents::DeploymentStatus => "deployment_status".to_string(),
      MetaDeletedEventHookEvents::DeployKey => "deploy_key".to_string(),
      MetaDeletedEventHookEvents::Discussion => "discussion".to_string(),
      MetaDeletedEventHookEvents::DiscussionComment => "discussion_comment".to_string(),
      MetaDeletedEventHookEvents::Fork => "fork".to_string(),
      MetaDeletedEventHookEvents::Gollum => "gollum".to_string(),
      MetaDeletedEventHookEvents::Issues => "issues".to_string(),
      MetaDeletedEventHookEvents::IssueComment => "issue_comment".to_string(),
      MetaDeletedEventHookEvents::Label => "label".to_string(),
      MetaDeletedEventHookEvents::Member => "member".to_string(),
      MetaDeletedEventHookEvents::Membership => "membership".to_string(),
      MetaDeletedEventHookEvents::Meta => "meta".to_string(),
      MetaDeletedEventHookEvents::Milestone => "milestone".to_string(),
      MetaDeletedEventHookEvents::Organization => "organization".to_string(),
      MetaDeletedEventHookEvents::OrgBlock => "org_block".to_string(),
      MetaDeletedEventHookEvents::Package => "package".to_string(),
      MetaDeletedEventHookEvents::PageBuild => "page_build".to_string(),
      MetaDeletedEventHookEvents::Project => "project".to_string(),
      MetaDeletedEventHookEvents::ProjectCard => "project_card".to_string(),
      MetaDeletedEventHookEvents::ProjectColumn => "project_column".to_string(),
      MetaDeletedEventHookEvents::Public => "public".to_string(),
      MetaDeletedEventHookEvents::PullRequest => "pull_request".to_string(),
      MetaDeletedEventHookEvents::PullRequestReview => "pull_request_review".to_string(),
      MetaDeletedEventHookEvents::PullRequestReviewComment => {
        "pull_request_review_comment".to_string()
      }
      MetaDeletedEventHookEvents::PullRequestReviewThread => {
        "pull_request_review_thread".to_string()
      }
      MetaDeletedEventHookEvents::Push => "push".to_string(),
      MetaDeletedEventHookEvents::RegistryPackage => "registry_package".to_string(),
      MetaDeletedEventHookEvents::Release => "release".to_string(),
      MetaDeletedEventHookEvents::Repository => "repository".to_string(),
      MetaDeletedEventHookEvents::RepositoryImport => "repository_import".to_string(),
      MetaDeletedEventHookEvents::RepositoryVulnerabilityAlert => {
        "repository_vulnerability_alert".to_string()
      }
      MetaDeletedEventHookEvents::SecretScanningAlert => "secret_scanning_alert".to_string(),
      MetaDeletedEventHookEvents::SecretScanningAlertLocation => {
        "secret_scanning_alert_location".to_string()
      }
      MetaDeletedEventHookEvents::SecurityAndAnalysis => "security_and_analysis".to_string(),
      MetaDeletedEventHookEvents::Star => "star".to_string(),
      MetaDeletedEventHookEvents::Status => "status".to_string(),
      MetaDeletedEventHookEvents::Team => "team".to_string(),
      MetaDeletedEventHookEvents::TeamAdd => "team_add".to_string(),
      MetaDeletedEventHookEvents::Watch => "watch".to_string(),
      MetaDeletedEventHookEvents::WorkflowJob => "workflow_job".to_string(),
      MetaDeletedEventHookEvents::WorkflowRun => "workflow_run".to_string(),
      MetaDeletedEventHookEvents::RepositoryDispatch => "repository_dispatch".to_string(),
      MetaDeletedEventHookEvents::ProjectsV2Item => "projects_v2_item".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MilestoneClosedEventAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MilestoneClosedEventAction {
  fn to_string(&self) -> String {
    match self {
      MilestoneClosedEventAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MilestoneCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MilestoneCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      MilestoneCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MilestoneDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MilestoneDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      MilestoneDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MilestoneEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MilestoneEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      MilestoneEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum MilestoneOpenedEventAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for MilestoneOpenedEventAction {
  fn to_string(&self) -> String {
    match self {
      MilestoneOpenedEventAction::Opened => "opened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookOrgBlockBlockedAction {
  #[serde(rename = "blocked")]
  Blocked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookOrgBlockBlockedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookOrgBlockBlockedAction::Blocked => "blocked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookOrgBlockUnblockedAction {
  #[serde(rename = "unblocked")]
  Unblocked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookOrgBlockUnblockedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookOrgBlockUnblockedAction::Unblocked => "unblocked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum OrganizationDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for OrganizationDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      OrganizationDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookOrganizationMemberAddedAction {
  #[serde(rename = "member_added")]
  MemberAdded,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookOrganizationMemberAddedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookOrganizationMemberAddedAction::MemberAdded => "member_added".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookOrganizationMemberInvitedAction {
  #[serde(rename = "member_invited")]
  MemberInvited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookOrganizationMemberInvitedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookOrganizationMemberInvitedAction::MemberInvited => "member_invited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookOrganizationMemberRemovedAction {
  #[serde(rename = "member_removed")]
  MemberRemoved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookOrganizationMemberRemovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookOrganizationMemberRemovedAction::MemberRemoved => "member_removed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum OrganizationRenamedEventAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for OrganizationRenamedEventAction {
  fn to_string(&self) -> String {
    match self {
      OrganizationRenamedEventAction::Renamed => "renamed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PackagePublishedEventAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PackagePublishedEventAction {
  fn to_string(&self) -> String {
    match self {
      PackagePublishedEventAction::Published => "published".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PackageUpdatedEventAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PackageUpdatedEventAction {
  fn to_string(&self) -> String {
    match self {
      PackageUpdatedEventAction::Updated => "updated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPersonalAccessTokenRequestApprovedAction {
  #[serde(rename = "approved")]
  Approved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPersonalAccessTokenRequestApprovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPersonalAccessTokenRequestApprovedAction::Approved => "approved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// Type of repository selection requested.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PersonalAccessTokenRequestRepositorySelection {
  #[serde(rename = "none")]
  None,
  #[serde(rename = "all")]
  All,
  #[serde(rename = "subset")]
  Subset,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PersonalAccessTokenRequestRepositorySelection {
  fn to_string(&self) -> String {
    match self {
      PersonalAccessTokenRequestRepositorySelection::None => "none".to_string(),
      PersonalAccessTokenRequestRepositorySelection::All => "all".to_string(),
      PersonalAccessTokenRequestRepositorySelection::Subset => "subset".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPersonalAccessTokenRequestCancelledAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPersonalAccessTokenRequestCancelledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPersonalAccessTokenRequestCancelledAction::Cancelled => "cancelled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPersonalAccessTokenRequestCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPersonalAccessTokenRequestCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPersonalAccessTokenRequestCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPersonalAccessTokenRequestDeniedAction {
  #[serde(rename = "denied")]
  Denied,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPersonalAccessTokenRequestDeniedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPersonalAccessTokenRequestDeniedAction::Denied => "denied".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectCardConvertedAction {
  #[serde(rename = "converted")]
  Converted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectCardConvertedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectCardConvertedAction::Converted => "converted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectCardCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectCardCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectCardCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectCardDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectCardDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectCardDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectCardEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectCardEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectCardEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectCardMovedAction {
  #[serde(rename = "moved")]
  Moved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectCardMovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectCardMovedAction::Moved => "moved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookProjectCardMovedProjectCard {
  ProjectCard(ProjectCard),
  WebhookProjectCardMovedProjectCardItem2(WebhookProjectCardMovedProjectCardItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectClosedEventAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectClosedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectClosedEventAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectColumnCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectColumnCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectColumnCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectColumnDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectColumnDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectColumnDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectColumnEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectColumnEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectColumnEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectColumnMovedAction {
  #[serde(rename = "moved")]
  Moved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectColumnMovedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectColumnMovedAction::Moved => "moved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectReopenedEventAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectReopenedEventAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ProjectClosedEventAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ProjectClosedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ProjectClosedEventAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookProjectsV2ProjectCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookProjectsV2ProjectCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookProjectsV2ProjectCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ProjectDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ProjectDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ProjectDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ProjectEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ProjectEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ProjectEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemArchivedEventAction {
  #[serde(rename = "archived")]
  Archived,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemArchivedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemArchivedEventAction::Archived => "archived".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The type of content tracked in a project item
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemContentType {
  Issue,
  PullRequest,
  DraftIssue,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemContentType {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemContentType::Issue => "Issue".to_string(),
      ProjectsV2ItemContentType::PullRequest => "PullRequest".to_string(),
      ProjectsV2ItemContentType::DraftIssue => "DraftIssue".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemConvertedEventAction {
  #[serde(rename = "converted")]
  Converted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemConvertedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemConvertedEventAction::Converted => "converted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProjectsV2ItemEditedEventChanges {
  ProjectsV2ItemEditedEventChangesItem1(ProjectsV2ItemEditedEventChangesItem1),
  ProjectsV2ItemEditedEventChangesItem2(ProjectsV2ItemEditedEventChangesItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemReorderedEventAction {
  #[serde(rename = "reordered")]
  Reordered,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemReorderedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemReorderedEventAction::Reordered => "reordered".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ItemRestoredEventAction {
  #[serde(rename = "restored")]
  Restored,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ItemRestoredEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ItemRestoredEventAction::Restored => "restored".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ProjectsV2ProjectReopenedEventAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ProjectsV2ProjectReopenedEventAction {
  fn to_string(&self) -> String {
    match self {
      ProjectsV2ProjectReopenedEventAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestAssignedAction {
  #[serde(rename = "assigned")]
  Assigned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestAssignedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestAssignedAction::Assigned => "assigned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PullRequestActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      PullRequestActiveLockReason::Resolved => "resolved".to_string(),
      PullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
      PullRequestActiveLockReason::TooHeated => "too heated".to_string(),
      PullRequestActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PullRequestAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      PullRequestAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      PullRequestAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      PullRequestAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      PullRequestAuthorAssociation::FirstTimeContributor => "FIRST_TIME_CONTRIBUTOR".to_string(),
      PullRequestAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      PullRequestAuthorAssociation::Member => "MEMBER".to_string(),
      PullRequestAuthorAssociation::None => "NONE".to_string(),
      PullRequestAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The merge method to use.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PullRequestAutoMergeMergeMethod {
  #[serde(rename = "merge")]
  Merge,
  #[serde(rename = "squash")]
  Squash,
  #[serde(rename = "rebase")]
  Rebase,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PullRequestAutoMergeMergeMethod {
  fn to_string(&self) -> String {
    match self {
      PullRequestAutoMergeMergeMethod::Merge => "merge".to_string(),
      PullRequestAutoMergeMergeMethod::Squash => "squash".to_string(),
      PullRequestAutoMergeMergeMethod::Rebase => "rebase".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestAutoMergeDisabledAction {
  #[serde(rename = "auto_merge_disabled")]
  AutoMergeDisabled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestAutoMergeDisabledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestAutoMergeDisabledAction::AutoMergeDisabled => {
        "auto_merge_disabled".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestAutoMergeEnabledAction {
  #[serde(rename = "auto_merge_enabled")]
  AutoMergeEnabled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestAutoMergeEnabledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestAutoMergeEnabledAction::AutoMergeEnabled => {
        "auto_merge_enabled".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestClosedAction {
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestClosedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestClosedAction::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestClosedPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestClosedPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestClosedPullRequestItem2MergeCommitMessage::PrBody => "PR_BODY".to_string(),
      WebhookPullRequestClosedPullRequestItem2MergeCommitMessage::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestClosedPullRequestItem2MergeCommitMessage::Blank => "BLANK".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestClosedPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestClosedPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestClosedPullRequestItem2MergeCommitTitle::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestClosedPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage::CommitMessages => {
        "COMMIT_MESSAGES".to_string()
      }
      WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestClosedPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestClosedPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestClosedPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestClosedPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestClosedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestClosedPullRequestItem2(WebhookPullRequestClosedPullRequestItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestConvertedToDraftAction {
  #[serde(rename = "converted_to_draft")]
  ConvertedToDraft,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestConvertedToDraftAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestConvertedToDraftAction::ConvertedToDraft => {
        "converted_to_draft".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage::PrBody => "PR_BODY".to_string(),
      WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage::CommitMessages => "COMMIT_MESSAGES".to_string(),
      WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage::Blank => "BLANK".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestConvertedToDraftPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestConvertedToDraftPullRequestItem2(
    WebhookPullRequestConvertedToDraftPullRequestItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestDemilestonedAction {
  #[serde(rename = "demilestoned")]
  Demilestoned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestDemilestonedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestDemilestonedAction::Demilestoned => "demilestoned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestDequeuedAction {
  #[serde(rename = "dequeued")]
  Dequeued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestDequeuedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestDequeuedAction::Dequeued => "dequeued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEditedPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEditedPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEditedPullRequestItem2MergeCommitMessage::PrBody => "PR_BODY".to_string(),
      WebhookPullRequestEditedPullRequestItem2MergeCommitMessage::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestEditedPullRequestItem2MergeCommitMessage::Blank => "BLANK".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEditedPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEditedPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEditedPullRequestItem2MergeCommitTitle::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestEditedPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage::CommitMessages => {
        "COMMIT_MESSAGES".to_string()
      }
      WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEditedPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEditedPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEditedPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestEditedPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestEditedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestEditedPullRequestItem2(WebhookPullRequestEditedPullRequestItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestEnqueuedAction {
  #[serde(rename = "enqueued")]
  Enqueued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestEnqueuedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestEnqueuedAction::Enqueued => "enqueued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestLabeledAction {
  #[serde(rename = "labeled")]
  Labeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestLabeledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestLabeledAction::Labeled => "labeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestLockedAction {
  #[serde(rename = "locked")]
  Locked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestLockedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestLockedAction::Locked => "locked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestMilestonedAction {
  #[serde(rename = "milestoned")]
  Milestoned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestMilestonedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestMilestonedAction::Milestoned => "milestoned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestOpenedAction {
  #[serde(rename = "opened")]
  Opened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestOpenedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestOpenedAction::Opened => "opened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage::PrBody => "PR_BODY".to_string(),
      WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage::Blank => "BLANK".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestOpenedPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestOpenedPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestOpenedPullRequestItem2MergeCommitTitle::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestOpenedPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage::CommitMessages => {
        "COMMIT_MESSAGES".to_string()
      }
      WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestOpenedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestOpenedPullRequestItem2(WebhookPullRequestOpenedPullRequestItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReadyForReviewAction {
  #[serde(rename = "ready_for_review")]
  ReadyForReview,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReadyForReviewAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReadyForReviewAction::ReadyForReview => "ready_for_review".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage::CommitMessages => {
        "COMMIT_MESSAGES".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReadyForReviewPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestReadyForReviewPullRequestItem2(
    WebhookPullRequestReadyForReviewPullRequestItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReopenedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReopenedAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit message.
/// - `PR_TITLE` - default to the pull request's title.
/// - `PR_BODY` - default to the pull request's body.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage::PrBody => "PR_BODY".to_string(),
      WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage::Blank => "BLANK".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a merge commit title.
/// - `PR_TITLE` - default to the pull request's title.
/// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReopenedPullRequestItem2MergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "MERGE_MESSAGE")]
  MergeMessage,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReopenedPullRequestItem2MergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReopenedPullRequestItem2MergeCommitTitle::PrTitle => "PR_TITLE".to_string(),
      WebhookPullRequestReopenedPullRequestItem2MergeCommitTitle::MergeMessage => {
        "MERGE_MESSAGE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit message:
/// - `PR_BODY` - default to the pull request's body.
/// - `COMMIT_MESSAGES` - default to the branch's commit messages.
/// - `BLANK` - default to a blank commit message.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage {
  #[serde(rename = "PR_BODY")]
  PrBody,
  #[serde(rename = "COMMIT_MESSAGES")]
  CommitMessages,
  #[serde(rename = "BLANK")]
  Blank,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage::PrBody => {
        "PR_BODY".to_string()
      }
      WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage::CommitMessages => {
        "COMMIT_MESSAGES".to_string()
      }
      WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage::Blank => {
        "BLANK".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The default value for a squash merge commit title:
/// - `PR_TITLE` - default to the pull request's title.
/// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitTitle {
  #[serde(rename = "PR_TITLE")]
  PrTitle,
  #[serde(rename = "COMMIT_OR_PR_TITLE")]
  CommitOrPrTitle,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitTitle {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitTitle::PrTitle => {
        "PR_TITLE".to_string()
      }
      WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitTitle::CommitOrPrTitle => {
        "COMMIT_OR_PR_TITLE".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReopenedPullRequest {
  /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
  PullRequest(PullRequest),
  WebhookPullRequestReopenedPullRequestItem2(WebhookPullRequestReopenedPullRequestItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum PullRequestReviewCommentAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for PullRequestReviewCommentAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      PullRequestReviewCommentAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      PullRequestReviewCommentAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      PullRequestReviewCommentAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      PullRequestReviewCommentAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      PullRequestReviewCommentAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      PullRequestReviewCommentAuthorAssociation::Member => "MEMBER".to_string(),
      PullRequestReviewCommentAuthorAssociation::None => "NONE".to_string(),
      PullRequestReviewCommentAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::Resolved => {
        "resolved".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::OffTopic => {
        "off-topic".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::TooHeated => {
        "too heated".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Mannequin => {
        "MANNEQUIN".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Member => {
        "MEMBER".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::None => {
        "NONE".to_string()
      }
      WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation::Owner => {
        "OWNER".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentCreatedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentCreatedPullRequestState {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentCreatedPullRequestState::Open => "open".to_string(),
      WebhookPullRequestReviewCommentCreatedPullRequestState::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentDeletedAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentDeletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentDeletedAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::Resolved => {
        "resolved".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::OffTopic => {
        "off-topic".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::TooHeated => {
        "too heated".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Mannequin => {
        "MANNEQUIN".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Member => {
        "MEMBER".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::None => {
        "NONE".to_string()
      }
      WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation::Owner => {
        "OWNER".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentDeletedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentDeletedPullRequestState {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentDeletedPullRequestState::Open => "open".to_string(),
      WebhookPullRequestReviewCommentDeletedPullRequestState::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::Resolved => {
        "resolved".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::OffTopic => {
        "off-topic".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::TooHeated => {
        "too heated".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Mannequin => {
        "MANNEQUIN".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Member => {
        "MEMBER".to_string()
      }
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::None => "NONE".to_string(),
      WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation::Owner => {
        "OWNER".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewCommentEditedPullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewCommentEditedPullRequestState {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewCommentEditedPullRequestState::Open => "open".to_string(),
      WebhookPullRequestReviewCommentEditedPullRequestState::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewDismissedAction {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewDismissedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewDismissedAction::Dismissed => "dismissed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SimplePullRequestActiveLockReason {
  #[serde(rename = "resolved")]
  Resolved,
  #[serde(rename = "off-topic")]
  OffTopic,
  #[serde(rename = "too heated")]
  TooHeated,
  #[serde(rename = "spam")]
  Spam,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SimplePullRequestActiveLockReason {
  fn to_string(&self) -> String {
    match self {
      SimplePullRequestActiveLockReason::Resolved => "resolved".to_string(),
      SimplePullRequestActiveLockReason::OffTopic => "off-topic".to_string(),
      SimplePullRequestActiveLockReason::TooHeated => "too heated".to_string(),
      SimplePullRequestActiveLockReason::Spam => "spam".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SimplePullRequestAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SimplePullRequestAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      SimplePullRequestAuthorAssociation::Collaborator => "COLLABORATOR".to_string(),
      SimplePullRequestAuthorAssociation::Contributor => "CONTRIBUTOR".to_string(),
      SimplePullRequestAuthorAssociation::FirstTimer => "FIRST_TIMER".to_string(),
      SimplePullRequestAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      SimplePullRequestAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      SimplePullRequestAuthorAssociation::Member => "MEMBER".to_string(),
      SimplePullRequestAuthorAssociation::None => "NONE".to_string(),
      SimplePullRequestAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SimplePullRequestState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "closed")]
  Closed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SimplePullRequestState {
  fn to_string(&self) -> String {
    match self {
      SimplePullRequestState::Open => "open".to_string(),
      SimplePullRequestState::Closed => "closed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewDismissedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewDismissedReviewAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Mannequin => {
        "MANNEQUIN".to_string()
      }
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::None => "NONE".to_string(),
      WebhookPullRequestReviewDismissedReviewAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewDismissedReviewState {
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "approved")]
  Approved,
  #[serde(rename = "changes_requested")]
  ChangesRequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewDismissedReviewState {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewDismissedReviewState::Dismissed => "dismissed".to_string(),
      WebhookPullRequestReviewDismissedReviewState::Approved => "approved".to_string(),
      WebhookPullRequestReviewDismissedReviewState::ChangesRequested => {
        "changes_requested".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewEditedAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewEditedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewEditedAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewEditedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewEditedReviewAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Mannequin => "MANNEQUIN".to_string(),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::None => "NONE".to_string(),
      WebhookPullRequestReviewEditedReviewAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewRequestRemovedItem1Action {
  #[serde(rename = "review_request_removed")]
  ReviewRequestRemoved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewRequestRemovedItem1Action {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewRequestRemovedItem1Action::ReviewRequestRemoved => {
        "review_request_removed".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewRequestRemovedItem2Action {
  #[serde(rename = "review_request_removed")]
  ReviewRequestRemoved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewRequestRemovedItem2Action {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewRequestRemovedItem2Action::ReviewRequestRemoved => {
        "review_request_removed".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewRequestRemoved {
  WebhookPullRequestReviewRequestRemovedItem1(WebhookPullRequestReviewRequestRemovedItem1),
  WebhookPullRequestReviewRequestRemovedItem2(WebhookPullRequestReviewRequestRemovedItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewRequestedItem1Action {
  #[serde(rename = "review_requested")]
  ReviewRequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewRequestedItem1Action {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewRequestedItem1Action::ReviewRequested => {
        "review_requested".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewRequestedItem2Action {
  #[serde(rename = "review_requested")]
  ReviewRequested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewRequestedItem2Action {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewRequestedItem2Action::ReviewRequested => {
        "review_requested".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookPullRequestReviewRequested {
  WebhookPullRequestReviewRequestedItem1(WebhookPullRequestReviewRequestedItem1),
  WebhookPullRequestReviewRequestedItem2(WebhookPullRequestReviewRequestedItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewSubmittedAction {
  #[serde(rename = "submitted")]
  Submitted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewSubmittedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewSubmittedAction::Submitted => "submitted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// How the author is associated with the repository.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewSubmittedReviewAuthorAssociation {
  #[serde(rename = "COLLABORATOR")]
  Collaborator,
  #[serde(rename = "CONTRIBUTOR")]
  Contributor,
  #[serde(rename = "FIRST_TIMER")]
  FirstTimer,
  #[serde(rename = "FIRST_TIME_CONTRIBUTOR")]
  FirstTimeContributor,
  #[serde(rename = "MANNEQUIN")]
  Mannequin,
  #[serde(rename = "MEMBER")]
  Member,
  #[serde(rename = "NONE")]
  None,
  #[serde(rename = "OWNER")]
  Owner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewSubmittedReviewAuthorAssociation {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Collaborator => {
        "COLLABORATOR".to_string()
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Contributor => {
        "CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::FirstTimer => {
        "FIRST_TIMER".to_string()
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::FirstTimeContributor => {
        "FIRST_TIME_CONTRIBUTOR".to_string()
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Mannequin => {
        "MANNEQUIN".to_string()
      }
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Member => "MEMBER".to_string(),
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::None => "NONE".to_string(),
      WebhookPullRequestReviewSubmittedReviewAuthorAssociation::Owner => "OWNER".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewThreadResolvedAction {
  #[serde(rename = "resolved")]
  Resolved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewThreadResolvedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewThreadResolvedAction::Resolved => "resolved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestReviewThreadUnresolvedAction {
  #[serde(rename = "unresolved")]
  Unresolved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestReviewThreadUnresolvedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestReviewThreadUnresolvedAction::Unresolved => "unresolved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestSynchronizeAction {
  #[serde(rename = "synchronize")]
  Synchronize,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestSynchronizeAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestSynchronizeAction::Synchronize => "synchronize".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestUnassignedAction {
  #[serde(rename = "unassigned")]
  Unassigned,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestUnassignedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestUnassignedAction::Unassigned => "unassigned".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestUnlabeledAction {
  #[serde(rename = "unlabeled")]
  Unlabeled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestUnlabeledAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestUnlabeledAction::Unlabeled => "unlabeled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookPullRequestUnlockedAction {
  #[serde(rename = "unlocked")]
  Unlocked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookPullRequestUnlockedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookPullRequestUnlockedAction::Unlocked => "unlocked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRegistryPackagePublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRegistryPackagePublishedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRegistryPackagePublishedAction::Published => "published".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRegistryPackageUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRegistryPackageUpdatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRegistryPackageUpdatedAction::Updated => "updated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleaseCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleaseCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleaseDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleaseDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleaseEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleaseEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleasePrereleasedEventAction {
  #[serde(rename = "prereleased")]
  Prereleased,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleasePrereleasedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleasePrereleasedEventAction::Prereleased => "prereleased".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// Whether the release is identified as a prerelease or a full release.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ReleasePrereleasedEventReleaseItem2Prerelease {
  Boolean(bool),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReleasePrereleasedEventRelease {
  /// A release.
  Release(Release),
  ReleasePrereleasedEventReleaseItem2(ReleasePrereleasedEventReleaseItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleasePublishedEventAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleasePublishedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleasePublishedEventAction::Published => "published".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReleasePublishedEventRelease {
  /// A release.
  Release(Release),
  ReleasePublishedEventReleaseItem2(ReleasePublishedEventReleaseItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseReleasedEventAction {
  #[serde(rename = "released")]
  Released,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleaseReleasedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleaseReleasedEventAction::Released => "released".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum ReleaseUnpublishedEventAction {
  #[serde(rename = "unpublished")]
  Unpublished,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for ReleaseUnpublishedEventAction {
  fn to_string(&self) -> String {
    match self {
      ReleaseUnpublishedEventAction::Unpublished => "unpublished".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReleaseUnpublishedEventRelease {
  /// A release.
  Release(Release),
  ReleaseUnpublishedEventReleaseItem2(ReleaseUnpublishedEventReleaseItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryAdvisoryPublishedEventAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryAdvisoryPublishedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryAdvisoryPublishedEventAction::Published => "published".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryAdvisoryReportedEventAction {
  #[serde(rename = "reported")]
  Reported,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryAdvisoryReportedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryAdvisoryReportedEventAction::Reported => "reported".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryArchivedEventAction {
  #[serde(rename = "archived")]
  Archived,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryArchivedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryArchivedEventAction::Archived => "archived".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryImportStatus {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "failure")]
  Failure,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryImportStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryImportStatus::Success => "success".to_string(),
      WebhookRepositoryImportStatus::Cancelled => "cancelled".to_string(),
      WebhookRepositoryImportStatus::Failure => "failure".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryPrivatizedEventAction {
  #[serde(rename = "privatized")]
  Privatized,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryPrivatizedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryPrivatizedEventAction::Privatized => "privatized".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryPublicizedEventAction {
  #[serde(rename = "publicized")]
  Publicized,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryPublicizedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryPublicizedEventAction::Publicized => "publicized".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryRenamedEventAction {
  #[serde(rename = "renamed")]
  Renamed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryRenamedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryRenamedEventAction::Renamed => "renamed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryRulesetCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryRulesetCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryRulesetCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryRulesetDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryRulesetDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryRulesetDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryRulesetEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryRulesetEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryRulesetEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryTransferredEventAction {
  #[serde(rename = "transferred")]
  Transferred,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryTransferredEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryTransferredEventAction::Transferred => "transferred".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryUnarchivedEventAction {
  #[serde(rename = "unarchived")]
  Unarchived,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryUnarchivedEventAction {
  fn to_string(&self) -> String {
    match self {
      RepositoryUnarchivedEventAction::Unarchived => "unarchived".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAction {
  #[serde(rename = "create")]
  Create,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertCreateAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertCreateAction::Create => "create".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum RepositoryVulnerabilityAlertAlertState {
  #[serde(rename = "open")]
  Open,
  #[serde(rename = "dismissed")]
  Dismissed,
  #[serde(rename = "fixed")]
  Fixed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for RepositoryVulnerabilityAlertAlertState {
  fn to_string(&self) -> String {
    match self {
      RepositoryVulnerabilityAlertAlertState::Open => "open".to_string(),
      RepositoryVulnerabilityAlertAlertState::Dismissed => "dismissed".to_string(),
      RepositoryVulnerabilityAlertAlertState::Fixed => "fixed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAlertItem2State {
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertCreateAlertItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertCreateAlertItem2State::Open => "open".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertCreateAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertCreateAlertItem2(
    WebhookRepositoryVulnerabilityAlertCreateAlertItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAction {
  #[serde(rename = "dismiss")]
  Dismiss,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertDismissAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertDismissAction::Dismiss => "dismiss".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAlertItem2State {
  #[serde(rename = "dismissed")]
  Dismissed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertDismissAlertItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertDismissAlertItem2State::Dismissed => {
        "dismissed".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertDismissAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertDismissAlertItem2(
    WebhookRepositoryVulnerabilityAlertDismissAlertItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAction {
  #[serde(rename = "reopen")]
  Reopen,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertReopenAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertReopenAction::Reopen => "reopen".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAlertItem2State {
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertReopenAlertItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertReopenAlertItem2State::Open => "open".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertReopenAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertReopenAlertItem2(
    WebhookRepositoryVulnerabilityAlertReopenAlertItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAction {
  #[serde(rename = "resolve")]
  Resolve,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertResolveAction {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertResolveAction::Resolve => "resolve".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAlertItem2State {
  #[serde(rename = "fixed")]
  Fixed,
  #[serde(rename = "open")]
  Open,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookRepositoryVulnerabilityAlertResolveAlertItem2State {
  fn to_string(&self) -> String {
    match self {
      WebhookRepositoryVulnerabilityAlertResolveAlertItem2State::Fixed => "fixed".to_string(),
      WebhookRepositoryVulnerabilityAlertResolveAlertItem2State::Open => "open".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookRepositoryVulnerabilityAlertResolveAlert {
  /// The security alert of the vulnerable dependency.
  RepositoryVulnerabilityAlertAlert(RepositoryVulnerabilityAlertAlert),
  WebhookRepositoryVulnerabilityAlertResolveAlertItem2(
    WebhookRepositoryVulnerabilityAlertResolveAlertItem2,
  ),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecretScanningAlertCreatedAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecretScanningAlertCreatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecretScanningAlertCreatedAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The reason for resolving the alert.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SecretScanningAlertResolutionWebhook {
  #[serde(rename = "false_positive")]
  FalsePositive,
  #[serde(rename = "wont_fix")]
  WontFix,
  #[serde(rename = "revoked")]
  Revoked,
  #[serde(rename = "used_in_tests")]
  UsedInTests,
  #[serde(rename = "pattern_deleted")]
  PatternDeleted,
  #[serde(rename = "pattern_edited")]
  PatternEdited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SecretScanningAlertResolutionWebhook {
  fn to_string(&self) -> String {
    match self {
      SecretScanningAlertResolutionWebhook::FalsePositive => "false_positive".to_string(),
      SecretScanningAlertResolutionWebhook::WontFix => "wont_fix".to_string(),
      SecretScanningAlertResolutionWebhook::Revoked => "revoked".to_string(),
      SecretScanningAlertResolutionWebhook::UsedInTests => "used_in_tests".to_string(),
      SecretScanningAlertResolutionWebhook::PatternDeleted => "pattern_deleted".to_string(),
      SecretScanningAlertResolutionWebhook::PatternEdited => "pattern_edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The token status as of the latest validity check.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SecretScanningAlertWebhookValidity {
  #[serde(rename = "active")]
  Active,
  #[serde(rename = "inactive")]
  Inactive,
  #[serde(rename = "unknown")]
  Unknown,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SecretScanningAlertWebhookValidity {
  fn to_string(&self) -> String {
    match self {
      SecretScanningAlertWebhookValidity::Active => "active".to_string(),
      SecretScanningAlertWebhookValidity::Inactive => "inactive".to_string(),
      SecretScanningAlertWebhookValidity::Unknown => "unknown".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SecretScanningAlertLocationCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SecretScanningAlertLocationCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      SecretScanningAlertLocationCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecretScanningAlertReopenedAction {
  #[serde(rename = "reopened")]
  Reopened,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecretScanningAlertReopenedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecretScanningAlertReopenedAction::Reopened => "reopened".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecretScanningAlertResolvedAction {
  #[serde(rename = "resolved")]
  Resolved,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecretScanningAlertResolvedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecretScanningAlertResolvedAction::Resolved => "resolved".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecretScanningAlertRevokedAction {
  #[serde(rename = "revoked")]
  Revoked,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecretScanningAlertRevokedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecretScanningAlertRevokedAction::Revoked => "revoked".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecretScanningAlertValidatedAction {
  #[serde(rename = "validated")]
  Validated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecretScanningAlertValidatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecretScanningAlertValidatedAction::Validated => "validated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecurityAdvisoryPublishedAction {
  #[serde(rename = "published")]
  Published,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecurityAdvisoryPublishedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecurityAdvisoryPublishedAction::Published => "published".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecurityAdvisoryUpdatedAction {
  #[serde(rename = "updated")]
  Updated,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecurityAdvisoryUpdatedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecurityAdvisoryUpdatedAction::Updated => "updated".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSecurityAdvisoryWithdrawnAction {
  #[serde(rename = "withdrawn")]
  Withdrawn,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSecurityAdvisoryWithdrawnAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSecurityAdvisoryWithdrawnAction::Withdrawn => "withdrawn".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SponsorshipCancelledEventAction {
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SponsorshipCancelledEventAction {
  fn to_string(&self) -> String {
    match self {
      SponsorshipCancelledEventAction::Cancelled => "cancelled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SponsorshipCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SponsorshipCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      SponsorshipCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum SponsorshipEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for SponsorshipEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      SponsorshipEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSponsorshipPendingCancellationAction {
  #[serde(rename = "pending_cancellation")]
  PendingCancellation,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSponsorshipPendingCancellationAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSponsorshipPendingCancellationAction::PendingCancellation => {
        "pending_cancellation".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSponsorshipPendingTierChangeAction {
  #[serde(rename = "pending_tier_change")]
  PendingTierChange,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSponsorshipPendingTierChangeAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSponsorshipPendingTierChangeAction::PendingTierChange => {
        "pending_tier_change".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookSponsorshipTierChangedAction {
  #[serde(rename = "tier_changed")]
  TierChanged,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookSponsorshipTierChangedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookSponsorshipTierChangedAction::TierChanged => "tier_changed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum StarCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for StarCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      StarCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum StarDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for StarDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      StarDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StatusEventCommitCommitAuthor {
  /// Metaproperties for Git author/committer information.
  Committer(Committer),
  StatusEventCommitCommitAuthorItem2(StatusEventCommitCommitAuthorItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StatusEventCommitCommitCommitter {
  /// Metaproperties for Git author/committer information.
  Committer(Committer),
  StatusEventCommitCommitCommitterItem2(StatusEventCommitCommitCommitterItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum StatusEventCommitCommitVerificationReason {
  #[serde(rename = "expired_key")]
  ExpiredKey,
  #[serde(rename = "not_signing_key")]
  NotSigningKey,
  #[serde(rename = "gpgverify_error")]
  GpgverifyError,
  #[serde(rename = "gpgverify_unavailable")]
  GpgverifyUnavailable,
  #[serde(rename = "unsigned")]
  Unsigned,
  #[serde(rename = "unknown_signature_type")]
  UnknownSignatureType,
  #[serde(rename = "no_user")]
  NoUser,
  #[serde(rename = "unverified_email")]
  UnverifiedEmail,
  #[serde(rename = "bad_email")]
  BadEmail,
  #[serde(rename = "unknown_key")]
  UnknownKey,
  #[serde(rename = "malformed_signature")]
  MalformedSignature,
  #[serde(rename = "invalid")]
  Invalid,
  #[serde(rename = "valid")]
  Valid,
  #[serde(rename = "bad_cert")]
  BadCert,
  #[serde(rename = "ocsp_pending")]
  OcspPending,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for StatusEventCommitCommitVerificationReason {
  fn to_string(&self) -> String {
    match self {
      StatusEventCommitCommitVerificationReason::ExpiredKey => "expired_key".to_string(),
      StatusEventCommitCommitVerificationReason::NotSigningKey => "not_signing_key".to_string(),
      StatusEventCommitCommitVerificationReason::GpgverifyError => "gpgverify_error".to_string(),
      StatusEventCommitCommitVerificationReason::GpgverifyUnavailable => {
        "gpgverify_unavailable".to_string()
      }
      StatusEventCommitCommitVerificationReason::Unsigned => "unsigned".to_string(),
      StatusEventCommitCommitVerificationReason::UnknownSignatureType => {
        "unknown_signature_type".to_string()
      }
      StatusEventCommitCommitVerificationReason::NoUser => "no_user".to_string(),
      StatusEventCommitCommitVerificationReason::UnverifiedEmail => "unverified_email".to_string(),
      StatusEventCommitCommitVerificationReason::BadEmail => "bad_email".to_string(),
      StatusEventCommitCommitVerificationReason::UnknownKey => "unknown_key".to_string(),
      StatusEventCommitCommitVerificationReason::MalformedSignature => {
        "malformed_signature".to_string()
      }
      StatusEventCommitCommitVerificationReason::Invalid => "invalid".to_string(),
      StatusEventCommitCommitVerificationReason::Valid => "valid".to_string(),
      StatusEventCommitCommitVerificationReason::BadCert => "bad_cert".to_string(),
      StatusEventCommitCommitVerificationReason::OcspPending => "ocsp_pending".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The new state. Can be `pending`, `success`, `failure`, or `error`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum StatusEventState {
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "error")]
  Error,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for StatusEventState {
  fn to_string(&self) -> String {
    match self {
      StatusEventState::Pending => "pending".to_string(),
      StatusEventState::Success => "success".to_string(),
      StatusEventState::Failure => "failure".to_string(),
      StatusEventState::Error => "error".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookTeamAddedToRepositoryAction {
  #[serde(rename = "added_to_repository")]
  AddedToRepository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookTeamAddedToRepositoryAction {
  fn to_string(&self) -> String {
    match self {
      WebhookTeamAddedToRepositoryAction::AddedToRepository => "added_to_repository".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TeamCreatedEventAction {
  #[serde(rename = "created")]
  Created,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for TeamCreatedEventAction {
  fn to_string(&self) -> String {
    match self {
      TeamCreatedEventAction::Created => "created".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TeamDeletedEventAction {
  #[serde(rename = "deleted")]
  Deleted,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for TeamDeletedEventAction {
  fn to_string(&self) -> String {
    match self {
      TeamDeletedEventAction::Deleted => "deleted".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum TeamEditedEventAction {
  #[serde(rename = "edited")]
  Edited,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for TeamEditedEventAction {
  fn to_string(&self) -> String {
    match self {
      TeamEditedEventAction::Edited => "edited".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookTeamRemovedFromRepositoryAction {
  #[serde(rename = "removed_from_repository")]
  RemovedFromRepository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookTeamRemovedFromRepositoryAction {
  fn to_string(&self) -> String {
    match self {
      WebhookTeamRemovedFromRepositoryAction::RemovedFromRepository => {
        "removed_from_repository".to_string()
      }
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WatchStartedEventAction {
  #[serde(rename = "started")]
  Started,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WatchStartedEventAction {
  fn to_string(&self) -> String {
    match self {
      WatchStartedEventAction::Started => "started".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobCompletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobCompletedAction::Completed => "completed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowJobConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "timed_out")]
  TimedOut,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowJobConclusion {
  fn to_string(&self) -> String {
    match self {
      WorkflowJobConclusion::Success => "success".to_string(),
      WorkflowJobConclusion::Failure => "failure".to_string(),
      WorkflowJobConclusion::Skipped => "skipped".to_string(),
      WorkflowJobConclusion::Cancelled => "cancelled".to_string(),
      WorkflowJobConclusion::ActionRequired => "action_required".to_string(),
      WorkflowJobConclusion::Neutral => "neutral".to_string(),
      WorkflowJobConclusion::TimedOut => "timed_out".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
/// The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowJobStatus {
  fn to_string(&self) -> String {
    match self {
      WorkflowJobStatus::Queued => "queued".to_string(),
      WorkflowJobStatus::InProgress => "in_progress".to_string(),
      WorkflowJobStatus::Completed => "completed".to_string(),
      WorkflowJobStatus::Waiting => "waiting".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowStepConclusion {
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "cancelled")]
  Cancelled,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowStepConclusion {
  fn to_string(&self) -> String {
    match self {
      WorkflowStepConclusion::Failure => "failure".to_string(),
      WorkflowStepConclusion::Skipped => "skipped".to_string(),
      WorkflowStepConclusion::Success => "success".to_string(),
      WorkflowStepConclusion::Cancelled => "cancelled".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowStepStatus {
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowStepStatus {
  fn to_string(&self) -> String {
    match self {
      WorkflowStepStatus::InProgress => "in_progress".to_string(),
      WorkflowStepStatus::Completed => "completed".to_string(),
      WorkflowStepStatus::Queued => "queued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "timed_out")]
  TimedOut,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Success => "success".to_string(),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Failure => "failure".to_string(),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Skipped => "skipped".to_string(),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Cancelled => "cancelled".to_string(),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::Neutral => "neutral".to_string(),
      WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion::TimedOut => "timed_out".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowJobCompletedWorkflowJob {
  /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
  WorkflowJob(WorkflowJob),
  WebhookWorkflowJobCompletedWorkflowJobItem2(WebhookWorkflowJobCompletedWorkflowJobItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobInProgressAction {
  #[serde(rename = "in_progress")]
  InProgress,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobInProgressAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobInProgressAction::InProgress => "in_progress".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobInProgressWorkflowJobItem2Status {
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobInProgressWorkflowJobItem2Status {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::InProgress => "in_progress".to_string(),
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::Completed => "completed".to_string(),
      WebhookWorkflowJobInProgressWorkflowJobItem2Status::Queued => "queued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowJobInProgressWorkflowJob {
  /// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
  WorkflowJob(WorkflowJob),
  WebhookWorkflowJobInProgressWorkflowJobItem2(WebhookWorkflowJobInProgressWorkflowJobItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobQueuedAction {
  #[serde(rename = "queued")]
  Queued,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobQueuedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobQueuedAction::Queued => "queued".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobQueuedWorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobQueuedWorkflowJobStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobQueuedWorkflowJobStatus::Queued => "queued".to_string(),
      WebhookWorkflowJobQueuedWorkflowJobStatus::InProgress => "in_progress".to_string(),
      WebhookWorkflowJobQueuedWorkflowJobStatus::Completed => "completed".to_string(),
      WebhookWorkflowJobQueuedWorkflowJobStatus::Waiting => "waiting".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobWaitingAction {
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobWaitingAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobWaitingAction::Waiting => "waiting".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowJobWaitingWorkflowJobStatus {
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowJobWaitingWorkflowJobStatus {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowJobWaitingWorkflowJobStatus::Queued => "queued".to_string(),
      WebhookWorkflowJobWaitingWorkflowJobStatus::InProgress => "in_progress".to_string(),
      WebhookWorkflowJobWaitingWorkflowJobStatus::Completed => "completed".to_string(),
      WebhookWorkflowJobWaitingWorkflowJobStatus::Waiting => "waiting".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowRunCompletedAction {
  #[serde(rename = "completed")]
  Completed,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowRunCompletedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowRunCompletedAction::Completed => "completed".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowRunConclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowRunConclusion {
  fn to_string(&self) -> String {
    match self {
      WorkflowRunConclusion::Success => "success".to_string(),
      WorkflowRunConclusion::Failure => "failure".to_string(),
      WorkflowRunConclusion::Neutral => "neutral".to_string(),
      WorkflowRunConclusion::Cancelled => "cancelled".to_string(),
      WorkflowRunConclusion::TimedOut => "timed_out".to_string(),
      WorkflowRunConclusion::ActionRequired => "action_required".to_string(),
      WorkflowRunConclusion::Stale => "stale".to_string(),
      WorkflowRunConclusion::Skipped => "skipped".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WorkflowRunStatus {
  #[serde(rename = "requested")]
  Requested,
  #[serde(rename = "in_progress")]
  InProgress,
  #[serde(rename = "completed")]
  Completed,
  #[serde(rename = "queued")]
  Queued,
  #[serde(rename = "pending")]
  Pending,
  #[serde(rename = "waiting")]
  Waiting,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WorkflowRunStatus {
  fn to_string(&self) -> String {
    match self {
      WorkflowRunStatus::Requested => "requested".to_string(),
      WorkflowRunStatus::InProgress => "in_progress".to_string(),
      WorkflowRunStatus::Completed => "completed".to_string(),
      WorkflowRunStatus::Queued => "queued".to_string(),
      WorkflowRunStatus::Pending => "pending".to_string(),
      WorkflowRunStatus::Waiting => "waiting".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "stale")]
  Stale,
  #[serde(rename = "skipped")]
  Skipped,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Success => "success".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Failure => "failure".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Neutral => "neutral".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Cancelled => "cancelled".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::TimedOut => "timed_out".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Stale => "stale".to_string(),
      WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion::Skipped => "skipped".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowRunCompletedWorkflowRun {
  WorkflowRun(WorkflowRun),
  WebhookWorkflowRunCompletedWorkflowRunItem2(WebhookWorkflowRunCompletedWorkflowRunItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowRunInProgressAction {
  #[serde(rename = "in_progress")]
  InProgress,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowRunInProgressAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowRunInProgressAction::InProgress => "in_progress".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion {
  #[serde(rename = "success")]
  Success,
  #[serde(rename = "failure")]
  Failure,
  #[serde(rename = "neutral")]
  Neutral,
  #[serde(rename = "cancelled")]
  Cancelled,
  #[serde(rename = "timed_out")]
  TimedOut,
  #[serde(rename = "action_required")]
  ActionRequired,
  #[serde(rename = "skipped")]
  Skipped,
  #[serde(rename = "stale")]
  Stale,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Success => "success".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Failure => "failure".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Neutral => "neutral".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Cancelled => "cancelled".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::TimedOut => "timed_out".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::ActionRequired => {
        "action_required".to_string()
      }
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Skipped => "skipped".to_string(),
      WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion::Stale => "stale".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookWorkflowRunInProgressWorkflowRun {
  WorkflowRun(WorkflowRun),
  WebhookWorkflowRunInProgressWorkflowRunItem2(WebhookWorkflowRunInProgressWorkflowRunItem2),
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum WebhookWorkflowRunRequestedAction {
  #[serde(rename = "requested")]
  Requested,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ToString for WebhookWorkflowRunRequestedAction {
  fn to_string(&self) -> String {
    match self {
      WebhookWorkflowRunRequestedAction::Requested => "requested".to_string(),
    }
  }
}

#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhookEvent {
  BranchProtectionConfigurationDisabled(BranchProtectionConfigurationDisabledEvent),
  BranchProtectionConfigurationEnabled(BranchProtectionConfigurationEnabledEvent),
  BranchProtectionRuleCreated(BranchProtectionRuleCreatedEvent),
  BranchProtectionRuleDeleted(BranchProtectionRuleDeletedEvent),
  BranchProtectionRuleEdited(BranchProtectionRuleEditedEvent),
  CheckRunCompleted(CheckRunCompletedEvent),
  CheckRunCreated(CheckRunCreatedEvent),
  CheckRunRequestedAction(CheckRunRequestedActionEvent),
  CheckRunRerequested(CheckRunReRequestedEvent),
  CheckSuiteCompleted(WebhookCheckSuiteCompleted),
  CheckSuiteRequested(WebhookCheckSuiteRequested),
  CheckSuiteRerequested(WebhookCheckSuiteRerequested),
  CodeScanningAlertAppearedInBranch(WebhookCodeScanningAlertAppearedInBranch),
  CodeScanningAlertClosedByUser(WebhookCodeScanningAlertClosedByUser),
  CodeScanningAlertCreated(WebhookCodeScanningAlertCreated),
  CodeScanningAlertFixed(WebhookCodeScanningAlertFixed),
  CodeScanningAlertReopened(WebhookCodeScanningAlertReopened),
  CodeScanningAlertReopenedByUser(WebhookCodeScanningAlertReopenedByUser),
  CommitCommentCreated(WebhookCommitCommentCreated),
  Create(CreateEvent),
  CustomPropertyCreated(CustomPropertyCreatedEvent),
  CustomPropertyDeleted(CustomPropertyDeletedEvent),
  CustomPropertyUpdated(CustomPropertyUpdatedEvent),
  CustomPropertyValuesUpdated(CustomPropertyValuesUpdatedEvent),
  Delete(DeleteEvent),
  DependabotAlertAutoDismissed(DependabotAlertAutoDismissedEvent),
  DependabotAlertAutoReopened(DependabotAlertAutoReopenedEvent),
  DependabotAlertCreated(DependabotAlertCreatedEvent),
  DependabotAlertDismissed(DependabotAlertDismissedEvent),
  DependabotAlertFixed(DependabotAlertFixedEvent),
  DependabotAlertReintroduced(DependabotAlertReintroducedEvent),
  DependabotAlertReopened(DependabotAlertReopenedEvent),
  DeployKeyCreated(WebhookDeployKeyCreated),
  DeployKeyDeleted(WebhookDeployKeyDeleted),
  DeploymentCreated(DeploymentCreatedEvent),
  DeploymentProtectionRuleRequested(DeploymentProtectionRuleRequestedEvent),
  DeploymentReviewApproved(WebhookDeploymentReviewApproved),
  DeploymentReviewRejected(WebhookDeploymentReviewRejected),
  DeploymentReviewRequested(WebhookDeploymentReviewRequested),
  DeploymentStatusCreated(WebhookDeploymentStatusCreated),
  DiscussionAnswered(DiscussionAnsweredEvent),
  DiscussionCategoryChanged(DiscussionCategoryChangedEvent),
  DiscussionClosed(DiscussionClosedEvent),
  DiscussionCommentCreated(WebhookDiscussionCommentCreated),
  DiscussionCommentDeleted(WebhookDiscussionCommentDeleted),
  DiscussionCommentEdited(WebhookDiscussionCommentEdited),
  DiscussionCreated(DiscussionCreatedEvent),
  DiscussionDeleted(DiscussionDeletedEvent),
  DiscussionEdited(DiscussionEditedEvent),
  DiscussionLabeled(DiscussionLabeledEvent),
  DiscussionLocked(DiscussionLockedEvent),
  DiscussionPinned(DiscussionPinnedEvent),
  DiscussionReopened(DiscussionReopenedEvent),
  DiscussionTransferred(DiscussionTransferredEvent),
  DiscussionUnanswered(DiscussionUnansweredEvent),
  DiscussionUnlabeled(DiscussionUnlabeledEvent),
  DiscussionUnlocked(DiscussionUnlockedEvent),
  DiscussionUnpinned(DiscussionUnpinnedEvent),
  Fork(ForkEvent),
  GithubAppAuthorizationRevoked(WebhookGithubAppAuthorizationRevoked),
  Gollum(GollumEvent),
  InstallationCreated(InstallationCreatedEvent),
  InstallationDeleted(InstallationDeletedEvent),
  InstallationNewPermissionsAccepted(WebhookInstallationNewPermissionsAccepted),
  InstallationRepositoriesAdded(WebhookInstallationRepositoriesAdded),
  InstallationRepositoriesRemoved(WebhookInstallationRepositoriesRemoved),
  InstallationSuspend(InstallationSuspendEvent),
  InstallationTargetRenamed(WebhookInstallationTargetRenamed),
  InstallationUnsuspend(InstallationUnsuspendEvent),
  IssueCommentCreated(WebhookIssueCommentCreated),
  IssueCommentDeleted(WebhookIssueCommentDeleted),
  IssueCommentEdited(WebhookIssueCommentEdited),
  IssuesAssigned(IssuesAssignedEvent),
  IssuesClosed(IssuesClosedEvent),
  IssuesDeleted(IssuesDeletedEvent),
  IssuesDemilestoned(IssuesDemilestonedEvent),
  IssuesEdited(IssuesEditedEvent),
  IssuesLabeled(IssuesLabeledEvent),
  IssuesLocked(IssuesLockedEvent),
  IssuesMilestoned(IssuesMilestonedEvent),
  IssuesOpened(IssuesOpenedEvent),
  IssuesPinned(IssuesPinnedEvent),
  IssuesReopened(IssuesReopenedEvent),
  IssuesTransferred(IssuesTransferredEvent),
  IssuesUnassigned(IssuesUnassignedEvent),
  IssuesUnlabeled(IssuesUnlabeledEvent),
  IssuesUnlocked(IssuesUnlockedEvent),
  IssuesUnpinned(IssuesUnpinnedEvent),
  LabelCreated(LabelCreatedEvent),
  LabelDeleted(LabelDeletedEvent),
  LabelEdited(LabelEditedEvent),
  MarketplacePurchaseCancelled(WebhookMarketplacePurchaseCancelled),
  MarketplacePurchaseChanged(WebhookMarketplacePurchaseChanged),
  MarketplacePurchasePendingChange(WebhookMarketplacePurchasePendingChange),
  MarketplacePurchasePendingChangeCancelled(WebhookMarketplacePurchasePendingChangeCancelled),
  MarketplacePurchasePurchased(WebhookMarketplacePurchasePurchased),
  MemberAdded(MemberAddedEvent),
  MemberEdited(MemberEditedEvent),
  MemberRemoved(MemberRemovedEvent),
  MembershipAdded(MembershipAddedEvent),
  MembershipRemoved(MembershipRemovedEvent),
  MergeGroupChecksRequested(WebhookMergeGroupChecksRequested),
  MergeGroupDestroyed(WebhookMergeGroupDestroyed),
  MetaDeleted(MetaDeletedEvent),
  MilestoneClosed(MilestoneClosedEvent),
  MilestoneCreated(MilestoneCreatedEvent),
  MilestoneDeleted(MilestoneDeletedEvent),
  MilestoneEdited(MilestoneEditedEvent),
  MilestoneOpened(MilestoneOpenedEvent),
  OrgBlockBlocked(WebhookOrgBlockBlocked),
  OrgBlockUnblocked(WebhookOrgBlockUnblocked),
  OrganizationDeleted(OrganizationDeletedEvent),
  OrganizationMemberAdded(WebhookOrganizationMemberAdded),
  OrganizationMemberInvited(WebhookOrganizationMemberInvited),
  OrganizationMemberRemoved(WebhookOrganizationMemberRemoved),
  OrganizationRenamed(OrganizationRenamedEvent),
  PackagePublished(PackagePublishedEvent),
  PackageUpdated(PackageUpdatedEvent),
  PageBuild(WebhookPageBuild),
  PersonalAccessTokenRequestApproved(WebhookPersonalAccessTokenRequestApproved),
  PersonalAccessTokenRequestCancelled(WebhookPersonalAccessTokenRequestCancelled),
  PersonalAccessTokenRequestCreated(WebhookPersonalAccessTokenRequestCreated),
  PersonalAccessTokenRequestDenied(WebhookPersonalAccessTokenRequestDenied),
  Ping(WebhookPing),
  ProjectCardConverted(WebhookProjectCardConverted),
  ProjectCardCreated(WebhookProjectCardCreated),
  ProjectCardDeleted(WebhookProjectCardDeleted),
  ProjectCardEdited(WebhookProjectCardEdited),
  ProjectCardMoved(WebhookProjectCardMoved),
  ProjectClosed(ProjectClosedEvent),
  ProjectColumnCreated(WebhookProjectColumnCreated),
  ProjectColumnDeleted(WebhookProjectColumnDeleted),
  ProjectColumnEdited(WebhookProjectColumnEdited),
  ProjectColumnMoved(WebhookProjectColumnMoved),
  ProjectCreated(ProjectCreatedEvent),
  ProjectDeleted(ProjectDeletedEvent),
  ProjectEdited(ProjectEditedEvent),
  ProjectReopened(ProjectReopenedEvent),
  ProjectsV2Closed(ProjectsV2ProjectClosedEvent),
  ProjectsV2Created(WebhookProjectsV2ProjectCreated),
  ProjectsV2Deleted(ProjectsV2ProjectDeletedEvent),
  ProjectsV2Edited(ProjectsV2ProjectEditedEvent),
  ProjectsV2ItemArchived(ProjectsV2ItemArchivedEvent),
  ProjectsV2ItemConverted(ProjectsV2ItemConvertedEvent),
  ProjectsV2ItemCreated(ProjectsV2ItemCreatedEvent),
  ProjectsV2ItemDeleted(ProjectsV2ItemDeletedEvent),
  ProjectsV2ItemEdited(ProjectsV2ItemEditedEvent),
  ProjectsV2ItemReordered(ProjectsV2ItemReorderedEvent),
  ProjectsV2ItemRestored(ProjectsV2ItemRestoredEvent),
  ProjectsV2Reopened(ProjectsV2ProjectReopenedEvent),
  Public(PublicEvent),
  PullRequestAssigned(WebhookPullRequestAssigned),
  PullRequestAutoMergeDisabled(WebhookPullRequestAutoMergeDisabled),
  PullRequestAutoMergeEnabled(WebhookPullRequestAutoMergeEnabled),
  PullRequestClosed(WebhookPullRequestClosed),
  PullRequestConvertedToDraft(WebhookPullRequestConvertedToDraft),
  PullRequestDemilestoned(WebhookPullRequestDemilestoned),
  PullRequestDequeued(WebhookPullRequestDequeued),
  PullRequestEdited(WebhookPullRequestEdited),
  PullRequestEnqueued(WebhookPullRequestEnqueued),
  PullRequestLabeled(WebhookPullRequestLabeled),
  PullRequestLocked(WebhookPullRequestLocked),
  PullRequestMilestoned(WebhookPullRequestMilestoned),
  PullRequestOpened(WebhookPullRequestOpened),
  PullRequestReadyForReview(WebhookPullRequestReadyForReview),
  PullRequestReopened(WebhookPullRequestReopened),
  PullRequestReviewCommentCreated(WebhookPullRequestReviewCommentCreated),
  PullRequestReviewCommentDeleted(WebhookPullRequestReviewCommentDeleted),
  PullRequestReviewCommentEdited(WebhookPullRequestReviewCommentEdited),
  PullRequestReviewDismissed(WebhookPullRequestReviewDismissed),
  PullRequestReviewEdited(WebhookPullRequestReviewEdited),
  PullRequestReviewRequestRemoved(WebhookPullRequestReviewRequestRemoved),
  PullRequestReviewRequested(WebhookPullRequestReviewRequested),
  PullRequestReviewSubmitted(WebhookPullRequestReviewSubmitted),
  PullRequestReviewThreadResolved(WebhookPullRequestReviewThreadResolved),
  PullRequestReviewThreadUnresolved(WebhookPullRequestReviewThreadUnresolved),
  PullRequestSynchronize(WebhookPullRequestSynchronize),
  PullRequestUnassigned(WebhookPullRequestUnassigned),
  PullRequestUnlabeled(WebhookPullRequestUnlabeled),
  PullRequestUnlocked(WebhookPullRequestUnlocked),
  Push(PushEvent),
  RegistryPackagePublished(WebhookRegistryPackagePublished),
  RegistryPackageUpdated(WebhookRegistryPackageUpdated),
  ReleaseCreated(ReleaseCreatedEvent),
  ReleaseDeleted(ReleaseDeletedEvent),
  ReleaseEdited(ReleaseEditedEvent),
  ReleasePrereleased(ReleasePrereleasedEvent),
  ReleasePublished(ReleasePublishedEvent),
  ReleaseReleased(ReleaseReleasedEvent),
  ReleaseUnpublished(ReleaseUnpublishedEvent),
  RepositoryAdvisoryPublished(RepositoryAdvisoryPublishedEvent),
  RepositoryAdvisoryReported(RepositoryAdvisoryReportedEvent),
  RepositoryArchived(RepositoryArchivedEvent),
  RepositoryCreated(RepositoryCreatedEvent),
  RepositoryDeleted(RepositoryDeletedEvent),
  RepositoryDispatchSampleCollected(WebhookRepositoryDispatchSample),
  RepositoryEdited(RepositoryEditedEvent),
  RepositoryImport(WebhookRepositoryImport),
  RepositoryPrivatized(RepositoryPrivatizedEvent),
  RepositoryPublicized(RepositoryPublicizedEvent),
  RepositoryRenamed(RepositoryRenamedEvent),
  RepositoryRulesetCreated(RepositoryRulesetCreatedEvent),
  RepositoryRulesetDeleted(RepositoryRulesetDeletedEvent),
  RepositoryRulesetEdited(RepositoryRulesetEditedEvent),
  RepositoryTransferred(RepositoryTransferredEvent),
  RepositoryUnarchived(RepositoryUnarchivedEvent),
  RepositoryVulnerabilityAlertCreate(WebhookRepositoryVulnerabilityAlertCreate),
  RepositoryVulnerabilityAlertDismiss(WebhookRepositoryVulnerabilityAlertDismiss),
  RepositoryVulnerabilityAlertReopen(WebhookRepositoryVulnerabilityAlertReopen),
  RepositoryVulnerabilityAlertResolve(WebhookRepositoryVulnerabilityAlertResolve),
  SecretScanningAlertCreated(WebhookSecretScanningAlertCreated),
  SecretScanningAlertLocationCreated(SecretScanningAlertLocationCreatedEvent),
  SecretScanningAlertReopened(WebhookSecretScanningAlertReopened),
  SecretScanningAlertResolved(WebhookSecretScanningAlertResolved),
  SecretScanningAlertRevoked(WebhookSecretScanningAlertRevoked),
  SecretScanningAlertValidated(WebhookSecretScanningAlertValidated),
  SecurityAdvisoryPublished(WebhookSecurityAdvisoryPublished),
  SecurityAdvisoryUpdated(WebhookSecurityAdvisoryUpdated),
  SecurityAdvisoryWithdrawn(WebhookSecurityAdvisoryWithdrawn),
  SecurityAndAnalysis(WebhookSecurityAndAnalysis),
  SponsorshipCancelled(SponsorshipCancelledEvent),
  SponsorshipCreated(SponsorshipCreatedEvent),
  SponsorshipEdited(SponsorshipEditedEvent),
  SponsorshipPendingCancellation(WebhookSponsorshipPendingCancellation),
  SponsorshipPendingTierChange(WebhookSponsorshipPendingTierChange),
  SponsorshipTierChanged(WebhookSponsorshipTierChanged),
  StarCreated(StarCreatedEvent),
  StarDeleted(StarDeletedEvent),
  Status(StatusEvent),
  TeamAdd(WebhookTeamAdd),
  TeamAddedToRepository(WebhookTeamAddedToRepository),
  TeamCreated(TeamCreatedEvent),
  TeamDeleted(TeamDeletedEvent),
  TeamEdited(TeamEditedEvent),
  TeamRemovedFromRepository(WebhookTeamRemovedFromRepository),
  WatchStarted(WatchStartedEvent),
  WorkflowDispatch(WebhookWorkflowDispatch),
  WorkflowJobCompleted(WebhookWorkflowJobCompleted),
  WorkflowJobInProgress(WebhookWorkflowJobInProgress),
  WorkflowJobQueued(WebhookWorkflowJobQueued),
  WorkflowJobWaiting(WebhookWorkflowJobWaiting),
  WorkflowRunCompleted(WebhookWorkflowRunCompleted),
  WorkflowRunInProgress(WebhookWorkflowRunInProgress),
  WorkflowRunRequested(WebhookWorkflowRunRequested),
}

/// Structs definition
#[cfg(any(feature = "full", feature = "webhook",))]
/// The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
/// for and sent to a GitHub App. For more information,
/// see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimpleInstallation {
  /// The ID of the installation.
  pub id: i64,
  /// The global node ID of the installation.
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SimpleInstallation {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionConfigurationDisabledEvent {
  pub action: BranchProtectionConfigurationDisabledEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionConfigurationDisabledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionConfigurationEnabledEvent {
  pub action: BranchProtectionConfigurationEnabledEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionConfigurationEnabledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRule {
  pub admin_enforced: bool,
  pub allow_deletions_enforcement_level: BranchProtectionRuleAllowDeletionsEnforcementLevel,
  pub allow_force_pushes_enforcement_level: BranchProtectionRuleAllowForcePushesEnforcementLevel,
  pub authorized_actor_names: Vec<String>,
  pub authorized_actors_only: bool,
  pub authorized_dismissal_actors_only: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub create_protected: Option<bool>,
  pub created_at: String,
  pub dismiss_stale_reviews_on_push: bool,
  pub id: i64,
  pub ignore_approvals_from_contributors: bool,
  pub linear_history_requirement_enforcement_level:
    BranchProtectionRuleLinearHistoryRequirementEnforcementLevel,
  pub merge_queue_enforcement_level: BranchProtectionRuleMergeQueueEnforcementLevel,
  pub name: String,
  pub pull_request_reviews_enforcement_level:
    BranchProtectionRulePullRequestReviewsEnforcementLevel,
  pub repository_id: i64,
  pub require_code_owner_review: bool,
  /// Whether the most recent push must be approved by someone other than the person who pushed it
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub require_last_push_approval: Option<bool>,
  pub required_approving_review_count: i64,
  pub required_conversation_resolution_level:
    BranchProtectionRuleRequiredConversationResolutionLevel,
  pub required_deployments_enforcement_level:
    BranchProtectionRuleRequiredDeploymentsEnforcementLevel,
  pub required_status_checks: Vec<String>,
  pub required_status_checks_enforcement_level:
    BranchProtectionRuleRequiredStatusChecksEnforcementLevel,
  pub signature_requirement_enforcement_level:
    BranchProtectionRuleSignatureRequirementEnforcementLevel,
  pub strict_required_status_checks_policy: bool,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleCreatedEvent {
  pub action: BranchProtectionRuleCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleDeletedEvent {
  pub action: BranchProtectionRuleDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesAdminEnforced {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesAdminEnforced {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesAuthorizedActorNames {
  pub from: Vec<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesAuthorizedActorNames {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesAuthorizedActorsOnly {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesAuthorizedActorsOnly {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesAuthorizedDismissalActorsOnly {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesAuthorizedDismissalActorsOnly {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevel {
  pub from: BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevelFrom,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevel {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesRequiredStatusChecks {
  pub from: Vec<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesRequiredStatusChecks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevel {
  pub from: BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevelFrom,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevel {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// If the action was `edited`, the changes to the rule.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin_enforced: Option<BranchProtectionRuleEditedEventChangesAdminEnforced>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_actor_names: Option<BranchProtectionRuleEditedEventChangesAuthorizedActorNames>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_actors_only: Option<BranchProtectionRuleEditedEventChangesAuthorizedActorsOnly>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub authorized_dismissal_actors_only:
    Option<BranchProtectionRuleEditedEventChangesAuthorizedDismissalActorsOnly>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub linear_history_requirement_enforcement_level:
    Option<BranchProtectionRuleEditedEventChangesLinearHistoryRequirementEnforcementLevel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub required_status_checks: Option<BranchProtectionRuleEditedEventChangesRequiredStatusChecks>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub required_status_checks_enforcement_level:
    Option<BranchProtectionRuleEditedEventChangesRequiredStatusChecksEnforcementLevel>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct BranchProtectionRuleEditedEvent {
  pub action: BranchProtectionRuleEditedEventAction,
  /// If the action was `edited`, the changes to the rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<BranchProtectionRuleEditedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  /// The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
  pub rule: BranchProtectionRule,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl BranchProtectionRuleEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunCompletedEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<CheckRunCompletedEventAction>,
  pub check_run: CheckRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunCompletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunCreatedEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<CheckRunCreatedEventAction>,
  pub check_run: CheckRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The action requested by the user.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunRequestedActionEventRequestedAction {
  /// The integrator reference of the action requested by the user.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub identifier: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunRequestedActionEventRequestedAction {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunRequestedActionEvent {
  pub action: CheckRunRequestedActionEventAction,
  pub check_run: CheckRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  /// The action requested by the user.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_action: Option<CheckRunRequestedActionEventRequestedAction>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunRequestedActionEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunReRequestedEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<CheckRunReRequestedEventAction>,
  pub check_run: CheckRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunReRequestedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  pub id: i64,
  pub login: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<UserType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct App {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  /// The list of events for the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events: Option<Vec<AppEvents>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_url: Option<String>,
  pub html_url: String,
  /// Unique identifier of the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  /// The name of the GitHub app
  pub name: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  /// The set of permissions for the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permissions: Option<AppPermissions>,
  /// The slug name of the GitHub app
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl App {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepoRef {
  pub id: i64,
  pub name: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepoRef {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequestBase {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunPullRequestBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequestHead {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunPullRequestHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CheckRunPullRequest {
  pub base: CheckRunPullRequestBase,
  pub head: CheckRunPullRequestHead,
  pub id: i64,
  pub number: i64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CheckRunPullRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteCompletedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteCompletedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteCompletedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteCompletedCheckSuite {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteCompleted {
  pub action: WebhookCheckSuiteCompletedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteCompletedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteCompleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRequestedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteRequestedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteRequestedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteRequestedCheckSuite {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRequested {
  pub action: WebhookCheckSuiteRequestedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteRequestedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteRequested {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRerequestedCheckSuite {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after: Option<String>,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  pub app: App,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub before: Option<String>,
  pub check_runs_url: String,
  /// The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookCheckSuiteRerequestedCheckSuiteConclusion>,
  pub created_at: String,
  /// The head branch name the changes are on.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_commit: SimpleCommit,
  /// The SHA of the head commit that is being checked.
  pub head_sha: String,
  pub id: i64,
  pub latest_check_runs_count: i64,
  pub node_id: String,
  /// An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerequestable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runs_rerequestable: Option<bool>,
  /// The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<WebhookCheckSuiteRerequestedCheckSuiteStatus>,
  pub updated_at: String,
  /// URL that points to the check suite API resource.
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteRerequestedCheckSuite {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCheckSuiteRerequested {
  pub action: WebhookCheckSuiteRerequestedAction,
  /// The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
  pub check_suite: WebhookCheckSuiteRerequestedCheckSuite,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCheckSuiteRerequested {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstanceLocation {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub end_column: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub end_line: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_column: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub start_line: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl AlertInstanceLocation {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstanceMessage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub text: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl AlertInstanceMessage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct AlertInstance {
  /// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
  pub analysis_key: String,
  /// Identifies the configuration under which the analysis was executed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub category: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub classifications: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_sha: Option<String>,
  /// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub location: Option<AlertInstanceLocation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<AlertInstanceMessage>,
  /// The full Git reference, formatted as `refs/heads/<branch name>`.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// State of a code scanning alert.
  pub state: AlertInstanceState,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl AlertInstance {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertAppearedInBranchAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlertTool {
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertAppearedInBranchAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranchAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertAppearedInBranchAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertAppearedInBranchAlertState,
  pub tool: WebhookCodeScanningAlertAppearedInBranchAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertAppearedInBranchAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertAppearedInBranch {
  pub action: WebhookCodeScanningAlertAppearedInBranchAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertAppearedInBranchAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertAppearedInBranch {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertClosedByUserAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertClosedByUserAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertClosedByUserAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUserAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertClosedByUserAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertClosedByUserAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertClosedByUserAlertState,
  pub tool: WebhookCodeScanningAlertClosedByUserAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertClosedByUserAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertClosedByUser {
  pub action: WebhookCodeScanningAlertClosedByUserAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertClosedByUserAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertClosedByUser {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertCreatedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertCreatedAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertCreatedAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreatedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: serde_json::Value,
  pub dismissed_by: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_comment: Option<String>,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  pub dismissed_reason: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<serde_json::Value>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub instances_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertCreatedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertCreatedAlertState,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tool: Option<WebhookCodeScanningAlertCreatedAlertTool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertCreatedAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertCreated {
  pub action: WebhookCodeScanningAlertCreatedAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertCreatedAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertFixedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertFixedAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertFixedAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<User>,
  /// The reason for dismissing or closing the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<WebhookCodeScanningAlertFixedAlertDismissedReason>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub instances_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertFixedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertFixedAlertState,
  pub tool: WebhookCodeScanningAlertFixedAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertFixedAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertFixed {
  pub action: WebhookCodeScanningAlertFixedAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertFixedAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertFixed {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help: Option<String>,
  /// A link to the documentation for the rule used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub help_uri: Option<String>,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertReopenedAlertRuleSeverity>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlertTool {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub guid: Option<String>,
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_by: Option<serde_json::Value>,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_reason: Option<String>,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertReopenedAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertReopenedAlertState,
  pub tool: WebhookCodeScanningAlertReopenedAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopened {
  pub action: WebhookCodeScanningAlertReopenedAction,
  /// The code scanning alert involved in the event.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub alert: Option<WebhookCodeScanningAlertReopenedAlert>,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopened {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlertRule {
  /// A short description of the rule used to detect the alert.
  pub description: String,
  /// A unique identifier for the rule used to detect the alert.
  pub id: String,
  /// The severity of the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedByUserAlertRule {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlertTool {
  /// The name of the tool used to generate the code scanning analysis alert.
  pub name: String,
  /// The version of the tool used to detect the alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedByUserAlertTool {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The code scanning alert involved in the event.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUserAlert {
  /// The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
  pub created_at: String,
  /// The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  pub dismissed_at: serde_json::Value,
  pub dismissed_by: serde_json::Value,
  /// The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
  pub dismissed_reason: serde_json::Value,
  /// The GitHub URL of the alert resource.
  pub html_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub most_recent_instance: Option<AlertInstance>,
  /// The code scanning alert number.
  pub number: i64,
  pub rule: WebhookCodeScanningAlertReopenedByUserAlertRule,
  /// State of a code scanning alert.
  pub state: WebhookCodeScanningAlertReopenedByUserAlertState,
  pub tool: WebhookCodeScanningAlertReopenedByUserAlertTool,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedByUserAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCodeScanningAlertReopenedByUser {
  pub action: WebhookCodeScanningAlertReopenedByUserAction,
  /// The code scanning alert involved in the event.
  pub alert: WebhookCodeScanningAlertReopenedByUserAlert,
  /// The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  pub commit_oid: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCodeScanningAlertReopenedByUser {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Reactions {
  #[serde(rename = "+1")]
  pub plus_one: i64,
  #[serde(rename = "-1")]
  pub minus_one: i64,
  pub confused: i64,
  pub eyes: i64,
  pub heart: i64,
  pub hooray: i64,
  pub laugh: i64,
  pub rocket: i64,
  pub total_count: i64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCommitCommentCreatedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookCommitCommentCreatedCommentAuthorAssociation,
  /// The text of the comment.
  pub body: String,
  /// The SHA of the commit to which the comment applies.
  pub commit_id: String,
  pub created_at: String,
  pub html_url: String,
  /// The ID of the commit comment.
  pub id: i64,
  /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub line: Option<i64>,
  /// The node ID of the commit comment.
  pub node_id: String,
  /// The relative path of the file to which the comment applies.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  /// The line index in the diff to which the comment applies.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub position: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCommitCommentCreatedComment {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookCommitCommentCreated {
  /// The action performed. Can be `created`.
  pub action: WebhookCommitCommentCreatedAction,
  /// The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
  pub comment: WebhookCommitCommentCreatedComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookCommitCommentCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CreateEvent {
  /// The repository's current description.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The name of the repository's default branch (usually `main`).
  pub master_branch: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The pusher type for the event. Can be either `user` or a deploy key.
  pub pusher_type: String,
  /// The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// The type of Git ref object created in the repository.
  pub ref_type: CreateEventRefType,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CreateEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyCreatedEvent {
  pub action: CustomPropertyCreatedEventAction,
  pub definition: OrganizationCustomProperty,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CustomPropertyCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyDeletedEventDefinition {
  /// The name of the property that was deleted.
  pub property_name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CustomPropertyDeletedEventDefinition {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyDeletedEvent {
  pub action: CustomPropertyDeletedEventAction,
  pub definition: CustomPropertyDeletedEventDefinition,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CustomPropertyDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyUpdatedEvent {
  pub action: CustomPropertyUpdatedEventAction,
  pub definition: OrganizationCustomProperty,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CustomPropertyUpdatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct CustomPropertyValuesUpdatedEvent {
  pub action: CustomPropertyValuesUpdatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The new custom property values for the repository.
  pub new_property_values: Vec<CustomPropertyValue>,
  /// The old custom property values for the repository.
  pub old_property_values: Vec<CustomPropertyValue>,
  pub organization: OrganizationSimple,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl CustomPropertyValuesUpdatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeleteEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The pusher type for the event. Can be either `user` or a deploy key.
  pub pusher_type: String,
  /// The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// The type of Git ref object deleted in the repository.
  pub ref_type: DeleteEventRefType,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeleteEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertAutoDismissedEvent {
  pub action: DependabotAlertAutoDismissedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertAutoDismissedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertAutoReopenedEvent {
  pub action: DependabotAlertAutoReopenedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertAutoReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertCreatedEvent {
  pub action: DependabotAlertCreatedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertDismissedEvent {
  pub action: DependabotAlertDismissedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertDismissedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertFixedEvent {
  pub action: DependabotAlertFixedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertFixedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertReintroducedEvent {
  pub action: DependabotAlertReintroducedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertReintroducedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DependabotAlertReopenedEvent {
  pub action: DependabotAlertReopenedEventAction,
  pub alert: DependabotAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DependabotAlertReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyCreatedKey {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added_by: Option<String>,
  pub created_at: String,
  pub id: i64,
  pub key: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub last_used: Option<String>,
  pub read_only: bool,
  pub title: String,
  pub url: String,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeployKeyCreatedKey {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyCreated {
  pub action: WebhookDeployKeyCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
  pub key: WebhookDeployKeyCreatedKey,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeployKeyCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyDeletedKey {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added_by: Option<String>,
  pub created_at: String,
  pub id: i64,
  pub key: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub last_used: Option<String>,
  pub read_only: bool,
  pub title: String,
  pub url: String,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeployKeyDeletedKey {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeployKeyDeleted {
  pub action: WebhookDeployKeyDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
  pub key: WebhookDeployKeyDeletedKey,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeployKeyDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunHeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRunHeadRepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunHeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<DeploymentWorkflowRunHeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRunHeadRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRunReferencedWorkflows {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRunRepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRunRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<DeploymentWorkflowRunRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRunRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentWorkflowRun {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  pub check_suite_id: i64,
  pub check_suite_node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<DeploymentWorkflowRunConclusion>,
  pub created_at: String,
  pub display_title: String,
  pub event: String,
  pub head_branch: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<DeploymentWorkflowRunHeadRepository>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  pub name: String,
  pub node_id: String,
  pub path: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<serde_json::Value>,
  pub pull_requests: Vec<CheckRunPullRequest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows: Option<Vec<DeploymentWorkflowRunReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<DeploymentWorkflowRunRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  pub run_attempt: i64,
  pub run_number: i64,
  pub run_started_at: String,
  pub status: DeploymentWorkflowRunStatus,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<User>,
  pub updated_at: String,
  pub url: String,
  pub workflow_id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentWorkflowRun {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentCreatedEvent {
  pub action: DeploymentCreatedEventAction,
  /// The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
  pub deployment: Deployment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DeploymentProtectionRuleRequestedEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<DeploymentProtectionRuleRequestedEventAction>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  /// The URL to review the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment_callback_url: Option<String>,
  /// The name of the environment that has the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  /// The event that triggered the deployment protection rule.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<PullRequest>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DeploymentProtectionRuleRequestedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedApprover {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewApprovedApprover {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewApprovedReviewersType>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewApprovedReviewers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  pub name: serde_json::Value,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewApprovedWorkflowJobRun {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApprovedWorkflowJobRuns {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewApprovedWorkflowJobRuns {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewApproved {
  pub action: WebhookDeploymentReviewApprovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub approver: Option<WebhookDeploymentReviewApprovedApprover>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewers: Option<Vec<WebhookDeploymentReviewApprovedReviewers>>,
  pub sender: SimpleUser,
  pub since: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_run: Option<WebhookDeploymentReviewApprovedWorkflowJobRun>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_runs: Option<Vec<WebhookDeploymentReviewApprovedWorkflowJobRuns>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewApproved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedApprover {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRejectedApprover {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewRejectedReviewersType>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRejectedReviewers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  pub name: serde_json::Value,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRejectedWorkflowJobRun {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejectedWorkflowJobRuns {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRejectedWorkflowJobRuns {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRejected {
  pub action: WebhookDeploymentReviewRejectedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub approver: Option<WebhookDeploymentReviewRejectedApprover>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comment: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewers: Option<Vec<WebhookDeploymentReviewRejectedReviewers>>,
  pub sender: SimpleUser,
  pub since: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_run: Option<WebhookDeploymentReviewRejectedWorkflowJobRun>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_job_runs: Option<Vec<WebhookDeploymentReviewRejectedWorkflowJobRuns>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRejected {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequestedReviewers {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reviewer: Option<User>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<WebhookDeploymentReviewRequestedReviewersType>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRequestedReviewers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequestedWorkflowJobRun {
  pub conclusion: serde_json::Value,
  pub created_at: String,
  pub environment: String,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub status: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRequestedWorkflowJobRun {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentReviewRequested {
  pub action: WebhookDeploymentReviewRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requestor: Option<User>,
  pub reviewers: Vec<WebhookDeploymentReviewRequestedReviewers>,
  pub sender: SimpleUser,
  pub since: String,
  pub workflow_job_run: WebhookDeploymentReviewRequestedWorkflowJobRun,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentReviewRequested {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreatedCheckRun {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  /// The result of the completed check run. This value will be `null` until the check run has completed.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookDeploymentStatusCreatedCheckRunConclusion>,
  pub details_url: String,
  pub external_id: String,
  /// The SHA of the commit that is being checked.
  pub head_sha: String,
  pub html_url: String,
  /// The id of the check.
  pub id: i64,
  /// The name of the check run.
  pub name: String,
  pub node_id: String,
  pub started_at: String,
  /// The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
  pub status: WebhookDeploymentStatusCreatedCheckRunStatus,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentStatusCreatedCheckRun {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreatedDeploymentStatus {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<User>,
  pub deployment_url: String,
  /// The optional human-readable description added to the status.
  pub description: String,
  pub environment: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub environment_url: Option<String>,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub log_url: Option<String>,
  pub node_id: String,
  /// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<App>,
  pub repository_url: String,
  /// The new state. Can be `pending`, `success`, `failure`, or `error`.
  pub state: String,
  /// The optional link added to the status.
  pub target_url: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentStatusCreatedDeploymentStatus {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDeploymentStatusCreated {
  pub action: WebhookDeploymentStatusCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run: Option<WebhookDeploymentStatusCreatedCheckRun>,
  /// The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
  pub deployment: Deployment,
  /// The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).
  pub deployment_status: WebhookDeploymentStatusCreatedDeploymentStatus,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_run: Option<DeploymentWorkflowRun>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDeploymentStatusCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionAnsweredEventAnswer {
  /// How the author is associated with the repository.
  pub author_association: DiscussionAnsweredEventAnswerAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub parent_id: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionAnsweredEventAnswer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategory {
  pub created_at: String,
  pub description: String,
  pub emoji: String,
  pub id: i64,
  pub is_answerable: bool,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  pub repository_id: i64,
  pub slug: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCategory {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// A Discussion in a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Discussion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_chosen_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_chosen_by: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_html_url: Option<String>,
  /// How the author is associated with the repository.
  pub author_association: DiscussionAuthorAssociation,
  pub body: String,
  pub category: DiscussionCategory,
  pub comments: i64,
  pub created_at: String,
  pub html_url: String,
  pub id: i64,
  pub locked: bool,
  pub node_id: String,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  /// The current state of the discussion.
  /// `converting` means that the discussion is being converted from an issue.
  /// `transferring` means that the discussion is being transferred from another repository.
  pub state: DiscussionState,
  /// The reason for the current state
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state_reason: Option<DiscussionStateReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  pub title: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl Discussion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionAnsweredEvent {
  pub action: DiscussionAnsweredEventAction,
  pub answer: DiscussionAnsweredEventAnswer,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionAnsweredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategoryChangedEventChangesCategoryFrom {
  pub created_at: String,
  pub description: String,
  pub emoji: String,
  pub id: i64,
  pub is_answerable: bool,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  pub repository_id: i64,
  pub slug: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCategoryChangedEventChangesCategoryFrom {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategoryChangedEventChangesCategory {
  pub from: DiscussionCategoryChangedEventChangesCategoryFrom,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCategoryChangedEventChangesCategory {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategoryChangedEventChanges {
  pub category: DiscussionCategoryChangedEventChangesCategory,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCategoryChangedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCategoryChangedEvent {
  pub action: DiscussionCategoryChangedEventAction,
  pub changes: DiscussionCategoryChangedEventChanges,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCategoryChangedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionClosedEvent {
  pub action: DiscussionClosedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionClosedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentCreatedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentCreatedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentCreatedComment {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentCreated {
  pub action: WebhookDiscussionCommentCreatedAction,
  pub comment: WebhookDiscussionCommentCreatedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentDeletedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentDeletedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentDeletedComment {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentDeleted {
  pub action: WebhookDiscussionCommentDeletedAction,
  pub comment: WebhookDiscussionCommentDeletedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedChangesBody {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentEditedChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedChanges {
  pub body: WebhookDiscussionCommentEditedChangesBody,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEditedComment {
  /// How the author is associated with the repository.
  pub author_association: WebhookDiscussionCommentEditedCommentAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub parent_id: Option<i64>,
  pub reactions: Reactions,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentEditedComment {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookDiscussionCommentEdited {
  pub action: WebhookDiscussionCommentEditedAction,
  pub changes: WebhookDiscussionCommentEditedChanges,
  pub comment: WebhookDiscussionCommentEditedComment,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookDiscussionCommentEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCreatedEventDiscussionItem2Category {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub emoji: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_answerable: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCreatedEventDiscussionItem2Category {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCreatedEventDiscussionItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCreatedEventDiscussionItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCreatedEventDiscussionItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCreatedEventDiscussionItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCreatedEventDiscussionItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<serde_json::Value>,
  pub answer_chosen_at: serde_json::Value,
  pub answer_chosen_by: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub answer_html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub category: Option<DiscussionCreatedEventDiscussionItem2Category>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub locked: DiscussionCreatedEventDiscussionItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<DiscussionCreatedEventDiscussionItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: DiscussionCreatedEventDiscussionItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<DiscussionCreatedEventDiscussionItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCreatedEventDiscussionItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionCreatedEvent {
  pub action: DiscussionCreatedEventAction,
  pub discussion: DiscussionCreatedEventDiscussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionDeletedEvent {
  pub action: DiscussionDeletedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionEditedEventChangesBody {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionEditedEventChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionEditedEventChangesTitle {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionEditedEventChangesTitle {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<DiscussionEditedEventChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<DiscussionEditedEventChangesTitle>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionEditedEvent {
  pub action: DiscussionEditedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<DiscussionEditedEventChanges>,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionLabeledEvent {
  pub action: DiscussionLabeledEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionLabeledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionLockedEvent {
  pub action: DiscussionLockedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionLockedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionPinnedEvent {
  pub action: DiscussionPinnedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionPinnedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionReopenedEvent {
  pub action: DiscussionReopenedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionTransferredEventChanges {
  pub new_discussion: Discussion,
  pub new_repository: Repository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionTransferredEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionTransferredEvent {
  pub action: DiscussionTransferredEventAction,
  pub changes: DiscussionTransferredEventChanges,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionTransferredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionUnansweredEventOldAnswer {
  /// How the author is associated with the repository.
  pub author_association: DiscussionUnansweredEventOldAnswerAuthorAssociation,
  pub body: String,
  pub child_comment_count: i64,
  pub created_at: String,
  pub discussion_id: i64,
  pub html_url: String,
  pub id: i64,
  pub node_id: String,
  pub parent_id: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<Reactions>,
  pub repository_url: String,
  pub updated_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionUnansweredEventOldAnswer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionUnansweredEvent {
  pub action: DiscussionUnansweredEventAction,
  pub discussion: Discussion,
  pub old_answer: DiscussionUnansweredEventOldAnswer,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionUnansweredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionUnlabeledEvent {
  pub action: DiscussionUnlabeledEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionUnlabeledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionUnlockedEvent {
  pub action: DiscussionUnlockedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionUnlockedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct DiscussionUnpinnedEvent {
  pub action: DiscussionUnpinnedEventAction,
  pub discussion: Discussion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl DiscussionUnpinnedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ForkEventForkeeItem2Owner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ForkEventForkeeItem2Owner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ForkEventForkeeItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_forking: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub clone_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub disabled: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<ForkEventForkeeItem2Fork>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_downloads: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_issues: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_pages: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_wiki: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_template: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub language: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub mirror_url: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub open_issues_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<ForkEventForkeeItem2Owner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pushed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ssh_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub svn_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub visibility: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub watchers_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ForkEventForkeeItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// A user forks a repository.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ForkEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  /// The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.
  pub forkee: ForkEventForkee,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ForkEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookGithubAppAuthorizationRevoked {
  pub action: WebhookGithubAppAuthorizationRevokedAction,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookGithubAppAuthorizationRevoked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct GollumEventPages {
  /// The action that was performed on the page. Can be `created` or `edited`.
  pub action: GollumEventPagesAction,
  /// Points to the HTML wiki page.
  pub html_url: String,
  /// The name of the page.
  pub page_name: String,
  /// The latest commit SHA of the page.
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub summary: Option<String>,
  /// The current page title.
  pub title: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl GollumEventPages {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct GollumEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The pages that were updated.
  pub pages: Vec<GollumEventPages>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl GollumEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationCreatedEventRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationCreatedEventRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationCreatedEvent {
  pub action: InstallationCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<InstallationCreatedEventRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationDeletedEventRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationDeletedEventRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationDeletedEvent {
  pub action: InstallationDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<InstallationDeletedEventRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationNewPermissionsAcceptedRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationNewPermissionsAcceptedRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationNewPermissionsAccepted {
  pub action: WebhookInstallationNewPermissionsAcceptedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<WebhookInstallationNewPermissionsAcceptedRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationNewPermissionsAccepted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAddedRepositoriesAdded {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesAddedRepositoriesAdded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAddedRepositoriesRemoved {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  /// Unique identifier of the repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  /// The name of the repository.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  /// Whether the repository is private or public.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesAddedRepositoriesRemoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesAdded {
  pub action: WebhookInstallationRepositoriesAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects, which were added to the installation.
  pub repositories_added: Vec<WebhookInstallationRepositoriesAddedRepositoriesAdded>,
  /// An array of repository objects, which were removed from the installation.
  pub repositories_removed: Vec<WebhookInstallationRepositoriesAddedRepositoriesRemoved>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// Describe whether all repositories have been selected or there's a selection involved
  pub repository_selection: WebhookInstallationRepositoriesAddedRepositorySelection,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesAdded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemovedRepositoriesAdded {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesRemovedRepositoriesAdded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemovedRepositoriesRemoved {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesRemovedRepositoriesRemoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationRepositoriesRemoved {
  pub action: WebhookInstallationRepositoriesRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects, which were added to the installation.
  pub repositories_added: Vec<WebhookInstallationRepositoriesRemovedRepositoriesAdded>,
  /// An array of repository objects, which were removed from the installation.
  pub repositories_removed: Vec<WebhookInstallationRepositoriesRemovedRepositoriesRemoved>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// Describe whether all repositories have been selected or there's a selection involved
  pub repository_selection: WebhookInstallationRepositoriesRemovedRepositorySelection,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<User>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationRepositoriesRemoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationSuspendEventRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationSuspendEventRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationSuspendEvent {
  pub action: InstallationSuspendEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<InstallationSuspendEventRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationSuspendEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedAccount {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<String>,
  pub avatar_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_organization_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_repository_projects: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_verified: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub members_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_gists: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_members_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public_repos: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub website_url: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationTargetRenamedAccount {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChangesLogin {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationTargetRenamedChangesLogin {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChangesSlug {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationTargetRenamedChangesSlug {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<WebhookInstallationTargetRenamedChangesLogin>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub slug: Option<WebhookInstallationTargetRenamedChangesSlug>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationTargetRenamedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookInstallationTargetRenamed {
  pub account: WebhookInstallationTargetRenamedAccount,
  pub action: WebhookInstallationTargetRenamedAction,
  pub changes: WebhookInstallationTargetRenamedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: SimpleInstallation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  pub target_type: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookInstallationTargetRenamed {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationUnsuspendEventRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationUnsuspendEventRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct InstallationUnsuspendEvent {
  pub action: InstallationUnsuspendEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: Installation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// An array of repository objects that the installation can access.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<InstallationUnsuspendEventRepositories>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requester: Option<serde_json::Value>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl InstallationUnsuspendEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentCreatedIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentCreatedIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreatedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentCreatedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentCreatedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentCreatedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentCreatedIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentCreated {
  pub action: WebhookIssueCommentCreatedAction,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentCreatedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentDeletedIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentDeletedIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeletedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentDeletedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentDeletedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentDeletedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentDeletedIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentDeleted {
  pub action: WebhookIssueCommentDeletedAction,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentDeletedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEditedChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the comment.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookIssueCommentEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEditedIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEditedIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEditedIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  pub labels: Vec<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<WebhookIssueCommentEditedIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  /// State of the issue; either 'open' or 'closed'
  pub state: WebhookIssueCommentEditedIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<WebhookIssueCommentEditedIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEditedIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookIssueCommentEdited {
  pub action: WebhookIssueCommentEditedAction,
  /// The changes to the comment.
  pub changes: WebhookIssueCommentEditedChanges,
  /// The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
  pub comment: IssueComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
  pub issue: WebhookIssueCommentEditedIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookIssueCommentEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesAssignedEvent {
  /// The action that was performed.
  pub action: IssuesAssignedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesAssignedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesClosedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesClosedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesClosedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesClosedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesClosedEventIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesClosedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: IssuesClosedEventIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesClosedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesClosedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesClosedEvent {
  /// The action that was performed.
  pub action: IssuesClosedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: IssuesClosedEventIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesClosedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesDeletedEvent {
  pub action: IssuesDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesDemilestonedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesDemilestonedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesDemilestonedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesDemilestonedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesDemilestonedEventIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesDemilestonedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesDemilestonedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesDemilestonedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesDemilestonedEvent {
  pub action: IssuesDemilestonedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: IssuesDemilestonedEventIssue,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesDemilestonedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesEditedEventChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesEditedEventChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesEditedEventChangesTitle {
  /// The previous version of the title.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesEditedEventChangesTitle {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the issue.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<IssuesEditedEventChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<IssuesEditedEventChangesTitle>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesEditedEvent {
  pub action: IssuesEditedEventAction,
  /// The changes to the issue.
  pub changes: IssuesEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesLabeledEvent {
  pub action: IssuesLabeledEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesLabeledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesLockedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesLockedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesLockedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesLockedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesLockedEventIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<IssuesLockedEventIssueItem2ActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: IssuesLockedEventIssueItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesLockedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesLockedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesLockedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesLockedEvent {
  pub action: IssuesLockedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: IssuesLockedEventIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesLockedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesMilestonedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesMilestonedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesMilestonedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesMilestonedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesMilestonedEventIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesMilestonedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesMilestonedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesMilestonedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesMilestonedEvent {
  pub action: IssuesMilestonedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: IssuesMilestonedEventIssue,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesMilestonedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesOpenedEventChanges {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub old_issue: Option<Issue>,
  /// A git repository
  pub old_repository: Repository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesOpenedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesOpenedEvent {
  pub action: IssuesOpenedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<IssuesOpenedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesOpenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesPinnedEvent {
  pub action: IssuesPinnedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesPinnedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesReopenedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesReopenedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesReopenedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesReopenedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesReopenedEventIssueItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locked: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesReopenedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  pub state: IssuesReopenedEventIssueItem2State,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesReopenedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesReopenedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesReopenedEvent {
  pub action: IssuesReopenedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: IssuesReopenedEventIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesTransferredEventChanges {
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub new_issue: Issue,
  /// A git repository
  pub new_repository: Repository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesTransferredEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesTransferredEvent {
  pub action: IssuesTransferredEventAction,
  pub changes: IssuesTransferredEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesTransferredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnassignedEvent {
  /// The action that was performed.
  pub action: IssuesUnassignedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnassignedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnlabeledEvent {
  pub action: IssuesUnlabeledEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnlabeledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnlockedEventIssueItem2Reactions {
  #[serde(rename = "+1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plus_one: Option<i64>,
  #[serde(rename = "-1")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub minus_one: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub confused: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub eyes: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub heart: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooray: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub laugh: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rocket: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub total_count: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnlockedEventIssueItem2Reactions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnlockedEventIssueItem2User {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnlockedEventIssueItem2User {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnlockedEventIssueItem2 {
  pub active_lock_reason: serde_json::Value,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author_association: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  pub locked: IssuesUnlockedEventIssueItem2Locked,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub performed_via_github_app: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reactions: Option<IssuesUnlockedEventIssueItem2Reactions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timeline_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<IssuesUnlockedEventIssueItem2User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnlockedEventIssueItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnlockedEvent {
  pub action: IssuesUnlockedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub issue: IssuesUnlockedEventIssue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnlockedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct IssuesUnpinnedEvent {
  pub action: IssuesUnpinnedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
  pub issue: Issue,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl IssuesUnpinnedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelCreatedEvent {
  pub action: LabelCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelDeletedEvent {
  pub action: LabelDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelEditedEventChangesColor {
  /// The previous version of the color if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelEditedEventChangesColor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelEditedEventChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelEditedEventChangesDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelEditedEventChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelEditedEventChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the label if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub color: Option<LabelEditedEventChangesColor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<LabelEditedEventChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<LabelEditedEventChangesName>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct LabelEditedEvent {
  pub action: LabelEditedEventAction,
  /// The changes to the label if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<LabelEditedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub label: Label,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl LabelEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MarketplacePurchaseAccount {
  pub id: i64,
  pub login: String,
  pub node_id: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  pub type_: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MarketplacePurchaseAccount {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MarketplacePurchasePlan {
  pub bullets: Vec<String>,
  pub description: String,
  pub has_free_trial: bool,
  pub id: i64,
  pub monthly_price_in_cents: i64,
  pub name: String,
  pub price_model: MarketplacePurchasePlanPriceModel,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  pub yearly_price_in_cents: i64,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MarketplacePurchasePlan {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Account {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Plan {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseCancelledMarketplacePurchaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseCancelled {
  pub action: WebhookMarketplacePurchaseCancelledAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchaseCancelledMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseCancelled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Account {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Plan {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseChangedMarketplacePurchaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchaseChanged {
  pub action: WebhookMarketplacePurchaseChangedAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchaseChangedMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchaseChanged {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Account {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Plan {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChangeMarketplacePurchaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChange {
  pub action: WebhookMarketplacePurchasePendingChangeAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePendingChangeMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChange {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2 {
  pub next_billing_date: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePendingChangeCancelled {
  pub action: WebhookMarketplacePurchasePendingChangeCancelledAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePendingChangeCancelled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Account {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization_billing_email: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Account {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Plan {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bullets: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub monthly_price_in_cents: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub price_model:
    Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2PlanPriceModel>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub yearly_price_in_cents: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Plan {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub account: Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Account>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub billing_cycle: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub free_trial_ends_on: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub next_billing_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub on_free_trial: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub plan: Option<WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2Plan>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub unit_count: Option<i64>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePurchasedMarketplacePurchaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMarketplacePurchasePurchased {
  pub action: WebhookMarketplacePurchasePurchasedAction,
  pub effective_date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub marketplace_purchase: WebhookMarketplacePurchasePurchasedMarketplacePurchase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_marketplace_purchase: Option<MarketplacePurchase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMarketplacePurchasePurchased {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
/// role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
/// assigned to the collaborator, use the `role_name` field instead, which will provide the full
/// role name, including custom roles.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberAddedEventChangesPermission {
  pub to: MemberAddedEventChangesPermissionTo,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberAddedEventChangesPermission {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The role assigned to the collaborator.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberAddedEventChangesRoleName {
  pub to: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberAddedEventChangesRoleName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberAddedEventChanges {
  /// This field is included for legacy purposes; use the `role_name` field instead. The `maintain`
  /// role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role
  /// assigned to the collaborator, use the `role_name` field instead, which will provide the full
  /// role name, including custom roles.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permission: Option<MemberAddedEventChangesPermission>,
  /// The role assigned to the collaborator.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub role_name: Option<MemberAddedEventChangesRoleName>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberAddedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberAddedEvent {
  pub action: MemberAddedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<MemberAddedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberAddedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberEditedEventChangesOldPermission {
  /// The previous permissions of the collaborator if the action was edited.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberEditedEventChangesOldPermission {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberEditedEventChangesPermission {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberEditedEventChangesPermission {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the collaborator permissions
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub old_permission: Option<MemberEditedEventChangesOldPermission>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub permission: Option<MemberEditedEventChangesPermission>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberEditedEvent {
  pub action: MemberEditedEventAction,
  /// The changes to the collaborator permissions
  pub changes: MemberEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MemberRemovedEvent {
  pub action: MemberRemovedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MemberRemovedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MembershipAddedEvent {
  pub action: MembershipAddedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// The scope of the membership. Currently, can only be `team`.
  pub scope: MembershipAddedEventScope,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<User>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MembershipAddedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MembershipRemovedEvent {
  pub action: MembershipRemovedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub member: Option<User>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// The scope of the membership. Currently, can only be `team`.
  pub scope: MembershipRemovedEventScope,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<User>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MembershipRemovedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// A group of pull requests that the merge queue has grouped together to be merged.
///
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MergeGroup {
  /// The full ref of the branch the merge group will be merged into.
  pub base_ref: String,
  /// The SHA of the merge group's parent commit.
  pub base_sha: String,
  pub head_commit: SimpleCommit,
  /// The full ref of the merge group.
  pub head_ref: String,
  /// The SHA of the merge group.
  pub head_sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MergeGroup {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMergeGroupChecksRequested {
  pub action: WebhookMergeGroupChecksRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub merge_group: MergeGroup,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMergeGroupChecksRequested {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookMergeGroupDestroyed {
  pub action: WebhookMergeGroupDestroyedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub merge_group: MergeGroup,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reason: Option<WebhookMergeGroupDestroyedReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookMergeGroupDestroyed {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MetaDeletedEventHookConfig {
  pub content_type: MetaDeletedEventHookConfigContentType,
  pub insecure_ssl: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret: Option<String>,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MetaDeletedEventHookConfig {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MetaDeletedEventHook {
  pub active: bool,
  pub config: MetaDeletedEventHookConfig,
  pub created_at: String,
  pub events: Vec<MetaDeletedEventHookEvents>,
  pub id: i64,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MetaDeletedEventHook {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MetaDeletedEvent {
  pub action: MetaDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  /// The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
  pub hook: MetaDeletedEventHook,
  /// The id of the modified webhook.
  pub hook_id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MetaDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneClosedEvent {
  pub action: MilestoneClosedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneClosedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneCreatedEvent {
  pub action: MilestoneCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneDeletedEvent {
  pub action: MilestoneDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneEditedEventChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneEditedEventChangesDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneEditedEventChangesDueOn {
  /// The previous version of the due date if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneEditedEventChangesDueOn {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneEditedEventChangesTitle {
  /// The previous version of the title if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneEditedEventChangesTitle {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the milestone if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<MilestoneEditedEventChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub due_on: Option<MilestoneEditedEventChangesDueOn>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<MilestoneEditedEventChangesTitle>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneEditedEvent {
  pub action: MilestoneEditedEventAction,
  /// The changes to the milestone if the action was `edited`.
  pub changes: MilestoneEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct MilestoneOpenedEvent {
  pub action: MilestoneOpenedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// A collection of related issues and pull requests.
  pub milestone: Milestone,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl MilestoneOpenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrgBlockBlocked {
  pub action: WebhookOrgBlockBlockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blocked_user: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrgBlockBlocked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrgBlockUnblocked {
  pub action: WebhookOrgBlockUnblockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blocked_user: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrgBlockUnblocked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The membership between the user and the organization. Not present when the action is `member_invited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Membership {
  pub organization_url: String,
  pub role: String,
  pub state: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl Membership {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrganizationDeletedEvent {
  pub action: OrganizationDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub membership: Option<Membership>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl OrganizationDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberAdded {
  pub action: WebhookOrganizationMemberAddedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  pub membership: Membership,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrganizationMemberAdded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The invitation for the user or email if the action is `member_invited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberInvitedInvitation {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub failed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub failed_reason: Option<String>,
  pub id: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub invitation_source: Option<String>,
  pub invitation_teams_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub inviter: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  pub node_id: String,
  pub role: String,
  pub team_count: f64,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrganizationMemberInvitedInvitation {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberInvited {
  pub action: WebhookOrganizationMemberInvitedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The invitation for the user or email if the action is `member_invited`.
  pub invitation: WebhookOrganizationMemberInvitedInvitation,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrganizationMemberInvited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookOrganizationMemberRemoved {
  pub action: WebhookOrganizationMemberRemovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  pub membership: Membership,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookOrganizationMemberRemoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrganizationRenamedEventChangesLogin {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl OrganizationRenamedEventChangesLogin {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrganizationRenamedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<OrganizationRenamedEventChangesLogin>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl OrganizationRenamedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct OrganizationRenamedEvent {
  pub action: OrganizationRenamedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<OrganizationRenamedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The membership between the user and the organization. Not present when the action is `member_invited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub membership: Option<Membership>,
  pub organization: OrganizationSimple,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl OrganizationRenamedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionContainerMetadataTag {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub digest: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionContainerMetadataTag {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionContainerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag: Option<PackagePublishedEventPackagePackageVersionContainerMetadataTag>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionContainerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionDockerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionNpmMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bin: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bugs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cpu: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dev_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub directories: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dist: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub engines: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub files: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_head: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_shrinkwrap: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation_command: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keywords: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub main: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainers: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub man: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_user: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub optional_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub os: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub peer_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_via_actions: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub scripts: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionNpmMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionNugetMetadataValueItem4 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionNugetMetadataValueItem4 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionNugetMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<StringOrInteger>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub value: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionNugetMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  pub size: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionPackageFiles {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersionRelease {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RubyGemsMetadataVersionInfo {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RubyGemsMetadataVersionInfo {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RubyGemsMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<Vec<serde_json::Value>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub metadata: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub platform: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version_info: Option<RubyGemsMetadataVersionInfo>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RubyGemsMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body_html: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub container_metadata: Option<PackagePublishedEventPackagePackageVersionContainerMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata: Option<Vec<PackagePublishedEventPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_metadata: Option<PackagePublishedEventPackagePackageVersionNpmMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub nuget_metadata: Option<Vec<PackagePublishedEventPackagePackageVersionNugetMetadata>>,
  pub package_files: Vec<PackagePublishedEventPackagePackageVersionPackageFiles>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<PackagePublishedEventPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<RubyGemsMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source_url: Option<String>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackagePackageVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackageRegistry {
  pub about_url: String,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
  pub vendor: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackageRegistry {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Information about the package.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEventPackage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  pub package_type: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_version: Option<PackagePublishedEventPackagePackageVersion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<PackagePublishedEventPackageRegistry>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEventPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackagePublishedEvent {
  pub action: PackagePublishedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// Information about the package.
  pub package: PackagePublishedEventPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackagePublishedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackagePackageVersionDockerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  pub sha256: String,
  pub size: i64,
  pub state: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackagePackageVersionPackageFiles {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackagePackageVersionRelease {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub body: String,
  pub body_html: String,
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata: Option<Vec<PackageUpdatedEventPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  pub package_files: Vec<PackageUpdatedEventPackagePackageVersionPackageFiles>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<PackageUpdatedEventPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<RubyGemsMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub source_url: Option<String>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  pub target_commitish: String,
  pub target_oid: String,
  pub updated_at: String,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackagePackageVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackageRegistry {
  pub about_url: String,
  pub name: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
  pub vendor: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackageRegistry {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Information about the package.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEventPackage {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  pub package_type: String,
  pub package_version: PackageUpdatedEventPackagePackageVersion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<PackageUpdatedEventPackageRegistry>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEventPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PackageUpdatedEvent {
  pub action: PackageUpdatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// Information about the package.
  pub package: PackageUpdatedEventPackage,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PackageUpdatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuildBuildError {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPageBuildBuildError {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuildBuild {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  pub created_at: String,
  pub duration: i64,
  pub error: WebhookPageBuildBuildError,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pusher: Option<User>,
  pub status: String,
  pub updated_at: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPageBuildBuild {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPageBuild {
  /// The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.
  #[serde(rename = "build")]
  pub build_: WebhookPageBuildBuild,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPageBuild {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// New requested permissions, categorized by type of permission.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsAdded {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PersonalAccessTokenRequestPermissionsAdded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsResult {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PersonalAccessTokenRequestPermissionsResult {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestPermissionsUpgraded {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub other: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PersonalAccessTokenRequestPermissionsUpgraded {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequestRepositories {
  pub full_name: String,
  /// Unique identifier of the repository
  pub id: i64,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  /// Whether the repository is private or public.
  pub private: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PersonalAccessTokenRequestRepositories {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Details of a Personal Access Token Request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PersonalAccessTokenRequest {
  /// Date and time when the request for access was created.
  pub created_at: String,
  /// Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls.
  pub id: i64,
  pub owner: SimpleUser,
  /// New requested permissions, categorized by type of permission.
  pub permissions_added: PersonalAccessTokenRequestPermissionsAdded,
  /// Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.
  pub permissions_result: PersonalAccessTokenRequestPermissionsResult,
  /// Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.
  pub permissions_upgraded: PersonalAccessTokenRequestPermissionsUpgraded,
  /// An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repositories: Option<Vec<PersonalAccessTokenRequestRepositories>>,
  /// The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository_count: Option<i64>,
  /// Type of repository selection requested.
  pub repository_selection: PersonalAccessTokenRequestRepositorySelection,
  /// Whether the associated fine-grained personal access token has expired.
  pub token_expired: bool,
  /// Date and time when the associated fine-grained personal access token expires.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub token_expires_at: Option<String>,
  /// Date and time when the associated fine-grained personal access token was last used for authentication.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub token_last_used_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PersonalAccessTokenRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestApproved {
  pub action: WebhookPersonalAccessTokenRequestApprovedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimple,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPersonalAccessTokenRequestApproved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestCancelled {
  pub action: WebhookPersonalAccessTokenRequestCancelledAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimple,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPersonalAccessTokenRequestCancelled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestCreated {
  pub action: WebhookPersonalAccessTokenRequestCreatedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimple,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPersonalAccessTokenRequestCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPersonalAccessTokenRequestDenied {
  pub action: WebhookPersonalAccessTokenRequestDeniedAction,
  pub installation: SimpleInstallation,
  pub organization: OrganizationSimple,
  pub personal_access_token_request: PersonalAccessTokenRequest,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPersonalAccessTokenRequestDenied {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPing {
  /// The webhook that is being pinged
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hook: Option<Webhook>,
  /// The ID of the webhook that triggered the ping.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hook_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  /// Random string of GitHub zen.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zen: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPing {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConvertedChangesNote {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardConvertedChangesNote {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConvertedChanges {
  pub note: WebhookProjectCardConvertedChangesNote,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardConvertedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardConverted {
  pub action: WebhookProjectCardConvertedAction,
  pub changes: WebhookProjectCardConvertedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardConverted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardCreated {
  pub action: WebhookProjectCardCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardDeleted {
  pub action: WebhookProjectCardDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEditedChangesNote {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardEditedChangesNote {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEditedChanges {
  pub note: WebhookProjectCardEditedChangesNote,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardEdited {
  pub action: WebhookProjectCardEditedAction,
  pub changes: WebhookProjectCardEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_card: ProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedChangesColumnId {
  pub from: i64,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardMovedChangesColumnId {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedChanges {
  pub column_id: WebhookProjectCardMovedChangesColumnId,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardMovedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedProjectCardItem2Creator {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardMovedProjectCardItem2Creator {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMovedProjectCardItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub after_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub column_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub column_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<WebhookProjectCardMovedProjectCardItem2Creator>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub note: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub project_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardMovedProjectCardItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectCardMoved {
  pub action: WebhookProjectCardMovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<WebhookProjectCardMovedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_card: WebhookProjectCardMovedProjectCard,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectCardMoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectClosedEvent {
  pub action: ProjectClosedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectClosedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnCreated {
  pub action: WebhookProjectColumnCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnDeleted {
  pub action: WebhookProjectColumnDeletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEditedChangesName {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnEditedChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<WebhookProjectColumnEditedChangesName>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnEdited {
  pub action: WebhookProjectColumnEditedAction,
  pub changes: WebhookProjectColumnEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectColumnMoved {
  pub action: WebhookProjectColumnMovedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project_column: ProjectColumn,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectColumnMoved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectCreatedEvent {
  pub action: ProjectCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectDeletedEvent {
  pub action: ProjectDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectEditedEventChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectEditedEventChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectEditedEventChangesName {
  /// The changes to the project if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectEditedEventChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the project if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<ProjectEditedEventChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<ProjectEditedEventChangesName>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectEditedEvent {
  pub action: ProjectEditedEventAction,
  /// The changes to the project if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<ProjectEditedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectReopenedEvent {
  pub action: ProjectReopenedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub project: Project,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// A projects v2 project
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2Project {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub created_at: String,
  pub creator: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub id: f64,
  pub node_id: String,
  pub number: i64,
  pub owner: SimpleUser,
  pub public: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub short_description: Option<String>,
  pub title: String,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2Project {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectClosedEvent {
  pub action: ProjectsV2ProjectClosedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2: ProjectsV2Project,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectClosedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// A project was created
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookProjectsV2ProjectCreated {
  pub action: WebhookProjectsV2ProjectCreatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2: ProjectsV2Project,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookProjectsV2ProjectCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectDeletedEvent {
  pub action: ProjectsV2ProjectDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2: ProjectsV2Project,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEventChangesDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEventChangesDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEventChangesPublic {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEventChangesPublic {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEventChangesShortDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEventChangesShortDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEventChangesTitle {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEventChangesTitle {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<ProjectsV2ProjectEditedEventChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub public: Option<ProjectsV2ProjectEditedEventChangesPublic>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub short_description: Option<ProjectsV2ProjectEditedEventChangesShortDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<ProjectsV2ProjectEditedEventChangesTitle>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectEditedEvent {
  pub action: ProjectsV2ProjectEditedEventAction,
  pub changes: ProjectsV2ProjectEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2: ProjectsV2Project,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemArchivedEventChangesArchivedAt {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemArchivedEventChangesArchivedAt {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemArchivedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<ProjectsV2ItemArchivedEventChangesArchivedAt>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemArchivedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// An item belonging to a project
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2Item {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<String>,
  pub content_node_id: String,
  pub content_type: ProjectsV2ItemContentType,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub creator: Option<SimpleUser>,
  pub id: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub project_node_id: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2Item {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemArchivedEvent {
  pub action: ProjectsV2ItemArchivedEventAction,
  pub changes: ProjectsV2ItemArchivedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemArchivedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemConvertedEventChangesContentType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemConvertedEventChangesContentType {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemConvertedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_type: Option<ProjectsV2ItemConvertedEventChangesContentType>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemConvertedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemConvertedEvent {
  pub action: ProjectsV2ItemConvertedEventAction,
  pub changes: ProjectsV2ItemConvertedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemConvertedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemCreatedEvent {
  pub action: ProjectsV2ItemCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemDeletedEvent {
  pub action: ProjectsV2ItemDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemEditedEventChangesItem1FieldValue {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub field_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub field_type: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemEditedEventChangesItem1FieldValue {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemEditedEventChangesItem1 {
  pub field_value: ProjectsV2ItemEditedEventChangesItem1FieldValue,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemEditedEventChangesItem1 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemEditedEventChangesItem2Body {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemEditedEventChangesItem2Body {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemEditedEventChangesItem2 {
  pub body: ProjectsV2ItemEditedEventChangesItem2Body,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemEditedEventChangesItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemEditedEvent {
  pub action: ProjectsV2ItemEditedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<ProjectsV2ItemEditedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemReorderedEventChangesPreviousProjectsV2ItemNodeId {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemReorderedEventChangesPreviousProjectsV2ItemNodeId {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemReorderedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_projects_v2_item_node_id:
    Option<ProjectsV2ItemReorderedEventChangesPreviousProjectsV2ItemNodeId>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemReorderedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemReorderedEvent {
  pub action: ProjectsV2ItemReorderedEventAction,
  pub changes: ProjectsV2ItemReorderedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemReorderedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemRestoredEventChangesArchivedAt {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub to: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemRestoredEventChangesArchivedAt {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemRestoredEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archived_at: Option<ProjectsV2ItemRestoredEventChangesArchivedAt>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemRestoredEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ItemRestoredEvent {
  pub action: ProjectsV2ItemRestoredEventAction,
  pub changes: ProjectsV2ItemRestoredEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2_item: ProjectsV2Item,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ItemRestoredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ProjectsV2ProjectReopenedEvent {
  pub action: ProjectsV2ProjectReopenedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  pub projects_v2: ProjectsV2Project,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ProjectsV2ProjectReopenedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PublicEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PublicEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The status of auto merging a pull request.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PullRequestAutoMerge {
  /// Commit message for the merge commit.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_message: Option<String>,
  /// Title for the merge commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_title: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enabled_by: Option<User>,
  /// The merge method to use.
  pub merge_method: PullRequestAutoMergeMergeMethod,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PullRequestAutoMerge {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAssigned {
  pub action: WebhookPullRequestAssignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestAssigned {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAutoMergeDisabled {
  pub action: WebhookPullRequestAutoMergeDisabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub reason: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestAutoMergeDisabled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestAutoMergeEnabled {
  pub action: WebhookPullRequestAutoMergeEnabledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub reason: Option<String>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestAutoMergeEnabled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestClosedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<WebhookPullRequestClosedPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<WebhookPullRequestClosedPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestClosedPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestClosedPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestClosedPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestClosed {
  pub action: WebhookPullRequestClosedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestClosedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestClosed {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestConvertedToDraftPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message:
    Option<WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title:
    Option<WebhookPullRequestConvertedToDraftPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestConvertedToDraftPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestConvertedToDraftPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestConvertedToDraft {
  pub action: WebhookPullRequestConvertedToDraftAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestConvertedToDraftPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestConvertedToDraft {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestDemilestoned {
  pub action: WebhookPullRequestDemilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestDemilestoned {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestDequeued {
  pub action: WebhookPullRequestDequeuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub reason: String,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestDequeued {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBaseRef {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChangesBaseRef {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBaseSha {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChangesBaseSha {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBase {
  #[serde(rename = "ref")]
  pub ref_: WebhookPullRequestEditedChangesBaseRef,
  pub sha: WebhookPullRequestEditedChangesBaseSha,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChangesBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChangesTitle {
  /// The previous version of the title if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChangesTitle {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the comment if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub base: Option<WebhookPullRequestEditedChangesBase>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestEditedChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub title: Option<WebhookPullRequestEditedChangesTitle>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEditedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<WebhookPullRequestEditedPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<WebhookPullRequestEditedPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestEditedPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestEditedPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEditedPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEdited {
  pub action: WebhookPullRequestEditedAction,
  /// The changes to the comment if the action was `edited`.
  pub changes: WebhookPullRequestEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestEditedPullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestEnqueued {
  pub action: WebhookPullRequestEnqueuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestEnqueued {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestLabeled {
  pub action: WebhookPullRequestLabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestLabeled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestLocked {
  pub action: WebhookPullRequestLockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestLocked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestMilestoned {
  pub action: WebhookPullRequestMilestonedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestMilestoned {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestOpenedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<WebhookPullRequestOpenedPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<WebhookPullRequestOpenedPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestOpenedPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestOpenedPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestOpened {
  pub action: WebhookPullRequestOpenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestOpenedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestOpened {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReadyForReviewPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message:
    Option<WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<WebhookPullRequestReadyForReviewPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestReadyForReviewPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReadyForReviewPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReadyForReview {
  pub action: WebhookPullRequestReadyForReviewAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestReadyForReviewPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReadyForReview {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReopenedPullRequestItem2 {
  /// Whether to allow auto-merge for pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_auto_merge: Option<bool>,
  /// Whether to allow updating the pull request's branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub allow_update_branch: Option<bool>,
  /// Whether to delete head branches when pull requests are merged.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub delete_branch_on_merge: Option<bool>,
  /// The default value for a merge commit message.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `PR_BODY` - default to the pull request's body.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_message: Option<WebhookPullRequestReopenedPullRequestItem2MergeCommitMessage>,
  /// The default value for a merge commit title.
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_title: Option<WebhookPullRequestReopenedPullRequestItem2MergeCommitTitle>,
  /// The default value for a squash merge commit message:
  /// - `PR_BODY` - default to the pull request's body.
  /// - `COMMIT_MESSAGES` - default to the branch's commit messages.
  /// - `BLANK` - default to a blank commit message.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_message:
    Option<WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitMessage>,
  /// The default value for a squash merge commit title:
  /// - `PR_TITLE` - default to the pull request's title.
  /// - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub squash_merge_commit_title:
    Option<WebhookPullRequestReopenedPullRequestItem2SquashMergeCommitTitle>,
  /// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub use_squash_pr_title_as_default: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReopenedPullRequestItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReopened {
  pub action: WebhookPullRequestReopenedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestReopenedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReopened {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentCreatedPullRequestLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentCreatedPullRequestBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentCreatedPullRequestHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreatedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentCreatedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentCreatedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentCreatedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentCreatedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentCreatedPullRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentCreated {
  pub action: WebhookPullRequestReviewCommentCreatedAction,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestReviewCommentCreatedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentDeletedPullRequestLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentDeletedPullRequestBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentDeletedPullRequestHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeletedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentDeletedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentDeletedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentDeletedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentDeletedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentDeletedPullRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentDeleted {
  pub action: WebhookPullRequestReviewCommentDeletedAction,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestReviewCommentDeletedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentDeleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedChangesBody {
  /// The previous version of the body.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the comment.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestReviewCommentEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedPullRequestLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedPullRequestBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedPullRequestHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEditedPullRequest {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewCommentEditedPullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: WebhookPullRequestReviewCommentEditedPullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub head: WebhookPullRequestReviewCommentEditedPullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: WebhookPullRequestReviewCommentEditedPullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEditedPullRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewCommentEdited {
  pub action: WebhookPullRequestReviewCommentEditedAction,
  /// The changes to the comment.
  pub changes: WebhookPullRequestReviewCommentEditedChanges,
  /// The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
  pub comment: PullRequestReviewComment,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: WebhookPullRequestReviewCommentEditedPullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewCommentEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestLinks {
  pub comments: Link,
  pub commits: Link,
  pub html: Link,
  pub issue: Link,
  pub review_comment: Link,
  pub review_comments: Link,
  #[serde(rename = "self")]
  pub self_: Link,
  pub statuses: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SimplePullRequestLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestBase {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repo: Repository,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SimplePullRequestBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequestHead {
  pub label: String,
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repo: Option<Repository>,
  pub sha: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SimplePullRequestHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SimplePullRequest {
  #[serde(rename = "_links")]
  pub links: SimplePullRequestLinks,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub active_lock_reason: Option<SimplePullRequestActiveLockReason>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  pub assignees: Vec<Option<User>>,
  /// How the author is associated with the repository.
  pub author_association: SimplePullRequestAuthorAssociation,
  /// The status of auto merging a pull request.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub auto_merge: Option<PullRequestAutoMerge>,
  pub base: SimplePullRequestBase,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub closed_at: Option<String>,
  pub comments_url: String,
  pub commits_url: String,
  pub created_at: String,
  pub diff_url: String,
  pub draft: bool,
  pub head: SimplePullRequestHead,
  pub html_url: String,
  pub id: i64,
  pub issue_url: String,
  pub labels: Vec<Label>,
  pub locked: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merge_commit_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merged_at: Option<String>,
  /// A collection of related issues and pull requests.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestone: Option<Milestone>,
  pub node_id: String,
  pub number: i64,
  pub patch_url: String,
  pub requested_reviewers: Vec<Option<Team>>,
  pub requested_teams: Vec<Team>,
  pub review_comment_url: String,
  pub review_comments_url: String,
  pub state: SimplePullRequestState,
  pub statuses_url: String,
  pub title: String,
  pub updated_at: String,
  pub url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SimplePullRequest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewDismissedReviewLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewDismissedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewDismissedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: WebhookPullRequestReviewDismissedReviewState,
  pub submitted_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewDismissedReview {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewDismissed {
  pub action: WebhookPullRequestReviewDismissedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: SimplePullRequest,
  pub repository: Repository,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewDismissedReview,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewDismissed {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewEditedChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<WebhookPullRequestReviewEditedChangesBody>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewEditedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewEditedReviewLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEditedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewEditedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewEditedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub submitted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewEditedReview {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewEdited {
  pub action: WebhookPullRequestReviewEditedAction,
  pub changes: WebhookPullRequestReviewEditedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: SimplePullRequest,
  pub repository: Repository,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewEditedReview,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewEdited {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestRemovedItem1 {
  pub action: WebhookPullRequestReviewRequestRemovedItem1Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_reviewer: Option<User>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewRequestRemovedItem1 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestRemovedItem2 {
  pub action: WebhookPullRequestReviewRequestRemovedItem2Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  /// Groups of organization members that gives permissions on specified repositories.
  pub requested_team: Team,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewRequestRemovedItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestedItem1 {
  pub action: WebhookPullRequestReviewRequestedItem1Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub requested_reviewer: Option<User>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewRequestedItem1 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewRequestedItem2 {
  pub action: WebhookPullRequestReviewRequestedItem2Action,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  /// Groups of organization members that gives permissions on specified repositories.
  pub requested_team: Team,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewRequestedItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmittedReviewLinks {
  pub html: Link,
  pub pull_request: Link,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewSubmittedReviewLinks {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The review that was affected.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmittedReview {
  #[serde(rename = "_links")]
  pub links: WebhookPullRequestReviewSubmittedReviewLinks,
  /// How the author is associated with the repository.
  pub author_association: WebhookPullRequestReviewSubmittedReviewAuthorAssociation,
  /// The text of the review.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  /// A commit SHA for the review.
  pub commit_id: String,
  pub html_url: String,
  /// Unique identifier of the review
  pub id: i64,
  pub node_id: String,
  pub pull_request_url: String,
  pub state: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub submitted_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewSubmittedReview {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewSubmitted {
  pub action: WebhookPullRequestReviewSubmittedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: SimplePullRequest,
  pub repository: Repository,
  /// The review that was affected.
  pub review: WebhookPullRequestReviewSubmittedReview,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewSubmitted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadResolvedThread {
  pub comments: Vec<PullRequestReviewComment>,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewThreadResolvedThread {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadResolved {
  pub action: WebhookPullRequestReviewThreadResolvedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: SimplePullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  pub thread: WebhookPullRequestReviewThreadResolvedThread,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewThreadResolved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadUnresolvedThread {
  pub comments: Vec<PullRequestReviewComment>,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewThreadUnresolvedThread {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestReviewThreadUnresolved {
  pub action: WebhookPullRequestReviewThreadUnresolvedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: SimplePullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  pub thread: WebhookPullRequestReviewThreadUnresolvedThread,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestReviewThreadUnresolved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestSynchronize {
  pub action: WebhookPullRequestSynchronizeAction,
  pub after: String,
  pub before: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestSynchronize {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnassigned {
  pub action: WebhookPullRequestUnassignedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignee: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestUnassigned {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnlabeled {
  pub action: WebhookPullRequestUnlabeledAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub label: Option<Label>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestUnlabeled {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookPullRequestUnlocked {
  pub action: WebhookPullRequestUnlockedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  /// The pull request number.
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub pull_request: PullRequest,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookPullRequestUnlocked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// Metaproperties for Git author/committer information.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct Committer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  /// The git author's name.
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub username: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl Committer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct PushEvent {
  /// The SHA of the most recent commit on `ref` after the push.
  pub after: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub base_ref: Option<String>,
  /// The SHA of the most recent commit on `ref` before the push.
  pub before: String,
  /// An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
  pub commits: Vec<Commit>,
  /// URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
  pub compare: String,
  /// Whether this push created the `ref`.
  pub created: bool,
  /// Whether this push deleted the `ref`.
  pub deleted: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  /// Whether this push was a force push of the `ref`.
  pub forced: bool,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<Commit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// Metaproperties for Git author/committer information.
  pub pusher: Committer,
  /// The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
  #[serde(rename = "ref")]
  pub ref_: String,
  /// A git repository
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl PushEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackageOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackageOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadataTag {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub digest: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadataTag {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadataTag>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bin: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub bugs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cpu: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted_by_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dev_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub directories: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dist: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub engines: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub files: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_head: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub has_shrinkwrap: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation_command: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keywords: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub license: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub main: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainers: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub man: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_user: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_version: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub optional_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub os: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub peer_dependencies: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_via_actions: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub readme: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub scripts: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub version: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValueItem4 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commit: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadataValueItem4 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub value: Option<serde_json::Value>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles {
  pub content_type: String,
  pub created_at: String,
  pub download_url: String,
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  pub size: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionReleaseAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionReleaseAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersionRelease {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionReleaseAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersionRelease {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackagePackageVersion {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body_html: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub container_metadata:
    Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionContainerMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata:
    Option<Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionDockerMetadata>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub npm_metadata: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionNpmMetadata>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub nuget_metadata:
    Option<Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionNugetMetadata>>,
  pub package_files: Vec<WebhookRegistryPackagePublishedRegistryPackagePackageVersionPackageFiles>,
  pub package_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<RubyGemsMetadata>>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_oid: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackagePackageVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackageRegistry {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub about_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vendor: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackageRegistry {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublishedRegistryPackage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  pub owner: WebhookRegistryPackagePublishedRegistryPackageOwner,
  pub package_type: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub package_version: Option<WebhookRegistryPackagePublishedRegistryPackagePackageVersion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<WebhookRegistryPackagePublishedRegistryPackageRegistry>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublishedRegistryPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackagePublished {
  pub action: WebhookRegistryPackagePublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub registry_package: WebhookRegistryPackagePublishedRegistryPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackagePublished {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackageOwner {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackageOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersionAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub content_type: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub download_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub md5: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha1: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha256: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub size: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub state: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionReleaseAuthor {
  pub avatar_url: String,
  pub events_url: String,
  pub followers_url: String,
  pub following_url: String,
  pub gists_url: String,
  pub gravatar_id: String,
  pub html_url: String,
  pub id: i64,
  pub login: String,
  pub node_id: String,
  pub organizations_url: String,
  pub received_events_url: String,
  pub repos_url: String,
  pub site_admin: bool,
  pub starred_url: String,
  pub subscriptions_url: String,
  #[serde(rename = "type")]
  pub type_: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersionReleaseAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersionRelease {
  pub author: WebhookRegistryPackageUpdatedRegistryPackagePackageVersionReleaseAuthor,
  pub created_at: String,
  pub draft: bool,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub prerelease: bool,
  pub published_at: String,
  pub tag_name: String,
  pub target_commitish: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersionRelease {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackagePackageVersion {
  pub author: WebhookRegistryPackageUpdatedRegistryPackagePackageVersionAuthor,
  pub body: String,
  pub body_html: String,
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub docker_metadata:
    Option<Vec<Option<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionDockerMetadata>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  pub html_url: String,
  pub id: i64,
  pub installation_command: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub manifest: Option<String>,
  pub metadata: Vec<serde_json::Value>,
  pub name: String,
  pub package_files: Vec<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionPackageFiles>,
  pub package_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub release: Option<WebhookRegistryPackageUpdatedRegistryPackagePackageVersionRelease>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rubygems_metadata: Option<Vec<RubyGemsMetadata>>,
  pub summary: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  pub target_commitish: String,
  pub target_oid: String,
  pub updated_at: String,
  pub version: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackagePackageVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdatedRegistryPackage {
  pub created_at: String,
  pub description: serde_json::Value,
  pub ecosystem: String,
  pub html_url: String,
  pub id: i64,
  pub name: String,
  pub namespace: String,
  pub owner: WebhookRegistryPackageUpdatedRegistryPackageOwner,
  pub package_type: String,
  pub package_version: WebhookRegistryPackageUpdatedRegistryPackagePackageVersion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub registry: Option<serde_json::Value>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdatedRegistryPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRegistryPackageUpdated {
  pub action: WebhookRegistryPackageUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub registry_package: WebhookRegistryPackageUpdatedRegistryPackage,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRegistryPackageUpdated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseCreatedEvent {
  pub action: ReleaseCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseDeletedEvent {
  pub action: ReleaseDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseEditedEventChangesBody {
  /// The previous version of the body if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseEditedEventChangesBody {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseEditedEventChangesMakeLatest {
  /// Whether this release was explicitly `edited` to be the latest.
  pub to: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseEditedEventChangesMakeLatest {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseEditedEventChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseEditedEventChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<ReleaseEditedEventChangesBody>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub make_latest: Option<ReleaseEditedEventChangesMakeLatest>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<ReleaseEditedEventChangesName>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseEditedEvent {
  pub action: ReleaseEditedEventAction,
  pub changes: ReleaseEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePrereleasedEventReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePrereleasedEventReleaseItem2Author {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePrereleasedEventReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<ReleasePrereleasedEventReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  /// Whether the release is identified as a prerelease or a full release.
  pub prerelease: ReleasePrereleasedEventReleaseItem2Prerelease,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePrereleasedEventReleaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePrereleasedEvent {
  pub action: ReleasePrereleasedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub release: ReleasePrereleasedEventRelease,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePrereleasedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePublishedEventReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePublishedEventReleaseItem2Author {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePublishedEventReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<ReleasePublishedEventReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePublishedEventReleaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleasePublishedEvent {
  pub action: ReleasePublishedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub release: ReleasePublishedEventRelease,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleasePublishedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseReleasedEvent {
  pub action: ReleaseReleasedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  /// The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
  pub release: Release,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseReleasedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseUnpublishedEventReleaseItem2Author {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseUnpublishedEventReleaseItem2Author {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseUnpublishedEventReleaseItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assets_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<ReleaseUnpublishedEventReleaseItem2Author>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub body: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub draft: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub prerelease: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub published_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tag_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tarball_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_commitish: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub upload_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub zipball_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseUnpublishedEventReleaseItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct ReleaseUnpublishedEvent {
  pub action: ReleaseUnpublishedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub release: ReleaseUnpublishedEventRelease,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl ReleaseUnpublishedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryPublishedEvent {
  pub action: RepositoryAdvisoryPublishedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub repository_advisory: RepositoryAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryAdvisoryPublishedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryAdvisoryReportedEvent {
  pub action: RepositoryAdvisoryReportedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub repository_advisory: RepositoryAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryAdvisoryReportedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryArchivedEvent {
  pub action: RepositoryArchivedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryArchivedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryCreatedEvent {
  pub action: RepositoryCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryDeletedEvent {
  pub action: RepositoryDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryDispatchSample {
  /// The `event_type` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
  pub action: String,
  pub branch: String,
  /// The `client_payload` that was specified in the `POST /repos/{owner}/{repo}/dispatches` request body.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub client_payload: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  pub installation: SimpleInstallation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryDispatchSample {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEventChangesDefaultBranch {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEventChangesDefaultBranch {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEventChangesDescription {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEventChangesDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEventChangesHomepage {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEventChangesHomepage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEventChangesTopics {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEventChangesTopics {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub default_branch: Option<RepositoryEditedEventChangesDefaultBranch>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<RepositoryEditedEventChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub homepage: Option<RepositoryEditedEventChangesHomepage>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub topics: Option<RepositoryEditedEventChangesTopics>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryEditedEvent {
  pub action: RepositoryEditedEventAction,
  pub changes: RepositoryEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryImport {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub status: WebhookRepositoryImportStatus,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryImport {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryPrivatizedEvent {
  pub action: RepositoryPrivatizedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryPrivatizedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryPublicizedEvent {
  pub action: RepositoryPublicizedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryPublicizedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRenamedEventChangesRepositoryName {
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRenamedEventChangesRepositoryName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRenamedEventChangesRepository {
  pub name: RepositoryRenamedEventChangesRepositoryName,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRenamedEventChangesRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRenamedEventChanges {
  pub repository: RepositoryRenamedEventChangesRepository,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRenamedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRenamedEvent {
  pub action: RepositoryRenamedEventAction,
  pub changes: RepositoryRenamedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRenamedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetCreatedEvent {
  pub action: RepositoryRulesetCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetDeletedEvent {
  pub action: RepositoryRulesetDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdatedChangesConditionType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdatedChangesConditionType {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdatedChangesExclude {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdatedChangesExclude {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdatedChangesInclude {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<Vec<String>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdatedChangesInclude {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdatedChangesTarget {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdatedChangesTarget {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdatedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub condition_type:
    Option<RepositoryRulesetEditedEventChangesConditionsUpdatedChangesConditionType>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub exclude: Option<RepositoryRulesetEditedEventChangesConditionsUpdatedChangesExclude>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub include: Option<RepositoryRulesetEditedEventChangesConditionsUpdatedChangesInclude>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target: Option<RepositoryRulesetEditedEventChangesConditionsUpdatedChangesTarget>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdatedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditionsUpdated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<RepositoryRulesetEditedEventChangesConditionsUpdatedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub condition: Option<RepositoryRulesetConditionsForRefNames>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditionsUpdated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesConditions {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added: Option<Vec<RepositoryRulesetConditionsForRefNames>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<Vec<RepositoryRulesetConditionsForRefNames>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated: Option<Vec<RepositoryRulesetEditedEventChangesConditionsUpdated>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesConditions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesEnforcement {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesEnforcement {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesName {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRulesUpdatedChangesConfiguration {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRulesUpdatedChangesConfiguration {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRulesUpdatedChangesPattern {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRulesUpdatedChangesPattern {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRulesUpdatedChangesRuleType {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRulesUpdatedChangesRuleType {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRulesUpdatedChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub configuration: Option<RepositoryRulesetEditedEventChangesRulesUpdatedChangesConfiguration>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pattern: Option<RepositoryRulesetEditedEventChangesRulesUpdatedChangesPattern>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rule_type: Option<RepositoryRulesetEditedEventChangesRulesUpdatedChangesRuleType>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRulesUpdatedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRulesUpdated {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<RepositoryRulesetEditedEventChangesRulesUpdatedChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rule: Option<RepositoryRule>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRulesUpdated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChangesRules {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub added: Option<Vec<RepositoryRule>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deleted: Option<Vec<RepositoryRule>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated: Option<Vec<RepositoryRulesetEditedEventChangesRulesUpdated>>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChangesRules {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conditions: Option<RepositoryRulesetEditedEventChangesConditions>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enforcement: Option<RepositoryRulesetEditedEventChangesEnforcement>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<RepositoryRulesetEditedEventChangesName>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rules: Option<RepositoryRulesetEditedEventChangesRules>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryRulesetEditedEvent {
  pub action: RepositoryRulesetEditedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub changes: Option<RepositoryRulesetEditedEventChanges>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub repository_ruleset: RepositoryRuleset,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryRulesetEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryTransferredEventChangesOwnerFrom {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<Organization>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub user: Option<User>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryTransferredEventChangesOwnerFrom {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryTransferredEventChangesOwner {
  pub from: RepositoryTransferredEventChangesOwnerFrom,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryTransferredEventChangesOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryTransferredEventChanges {
  pub owner: RepositoryTransferredEventChangesOwner,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryTransferredEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryTransferredEvent {
  pub action: RepositoryTransferredEventAction,
  pub changes: RepositoryTransferredEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryTransferredEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryUnarchivedEvent {
  pub action: RepositoryUnarchivedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryUnarchivedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The security alert of the vulnerable dependency.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryVulnerabilityAlertAlert {
  pub affected_package_name: String,
  pub affected_range: String,
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismiss_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismissed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismisser: Option<User>,
  pub external_identifier: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fix_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  pub ghsa_id: String,
  pub id: i64,
  pub node_id: String,
  pub number: i64,
  pub severity: String,
  pub state: RepositoryVulnerabilityAlertAlertState,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryVulnerabilityAlertAlert {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertCreateAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertCreateAlertItem2State,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertCreateAlertItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertCreate {
  pub action: WebhookRepositoryVulnerabilityAlertCreateAction,
  pub alert: WebhookRepositoryVulnerabilityAlertCreateAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertCreate {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertDismissAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismiss_comment: Option<String>,
  pub dismiss_reason: String,
  pub dismissed_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub dismisser: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertDismissAlertItem2State,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertDismissAlertItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertDismiss {
  pub action: WebhookRepositoryVulnerabilityAlertDismissAction,
  pub alert: WebhookRepositoryVulnerabilityAlertDismissAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertDismiss {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertReopenAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertReopenAlertItem2State,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertReopenAlertItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertReopen {
  pub action: WebhookRepositoryVulnerabilityAlertReopenAction,
  pub alert: WebhookRepositoryVulnerabilityAlertReopenAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertReopen {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertResolveAlertItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_package_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub affected_range: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_identifier: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub external_reference: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fix_reason: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fixed_in: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ghsa_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub severity: Option<String>,
  pub state: WebhookRepositoryVulnerabilityAlertResolveAlertItem2State,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertResolveAlertItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookRepositoryVulnerabilityAlertResolve {
  pub action: WebhookRepositoryVulnerabilityAlertResolveAction,
  pub alert: WebhookRepositoryVulnerabilityAlertResolveAlert,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookRepositoryVulnerabilityAlertResolve {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningAlertWebhook {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  /// The REST API URL of the code locations for this alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub locations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub number: Option<i64>,
  /// Whether push protection was bypassed for the detected secret.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed: Option<bool>,
  /// The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push_protection_bypassed_by: Option<SimpleUser>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolution: Option<SecretScanningAlertResolutionWebhook>,
  /// An optional comment to resolve an alert.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolution_comment: Option<String>,
  /// The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolved_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub resolved_by: Option<SimpleUser>,
  /// The type of secret that secret scanning detected.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub secret_type: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The token status as of the latest validity check.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub validity: Option<SecretScanningAlertWebhookValidity>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SecretScanningAlertWebhook {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertCreated {
  pub action: WebhookSecretScanningAlertCreatedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecretScanningAlertCreated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SecretScanningAlertLocationCreatedEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub action: Option<SecretScanningAlertLocationCreatedEventAction>,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub location: SecretScanningLocation,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SecretScanningAlertLocationCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertReopened {
  pub action: WebhookSecretScanningAlertReopenedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecretScanningAlertReopened {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertResolved {
  pub action: WebhookSecretScanningAlertResolvedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecretScanningAlertResolved {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertRevoked {
  pub action: WebhookSecretScanningAlertRevokedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecretScanningAlertRevoked {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecretScanningAlertValidated {
  pub action: WebhookSecretScanningAlertValidatedAction,
  pub alert: SecretScanningAlertWebhook,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecretScanningAlertValidated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublishedSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilities>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublishedSecurityAdvisory {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryPublished {
  pub action: WebhookSecurityAdvisoryPublishedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryPublishedSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryPublished {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdatedSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilities>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub withdrawn_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdatedSecurityAdvisory {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryUpdated {
  pub action: WebhookSecurityAdvisoryUpdatedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryUpdatedSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryUpdated {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss {
  pub score: f64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub vector_string: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes {
  pub cwe_id: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers {
  #[serde(rename = "type")]
  pub type_: String,
  pub value: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences {
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  pub identifier: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesFirstPatchedVersion {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesPackage {
  pub ecosystem: String,
  pub name: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesPackage {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub first_patched_version:
    Option<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesFirstPatchedVersion>,
  pub package: WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesPackage,
  pub severity: String,
  pub vulnerable_version_range: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The details of the security advisory, including summary, description, and severity.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawnSecurityAdvisory {
  pub cvss: WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss,
  pub cwes: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwes>,
  pub description: String,
  pub ghsa_id: String,
  pub identifiers: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiers>,
  pub published_at: String,
  pub references: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferences>,
  pub severity: String,
  pub summary: String,
  pub updated_at: String,
  pub vulnerabilities: Vec<WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilities>,
  pub withdrawn_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawnSecurityAdvisory {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAdvisoryWithdrawn {
  pub action: WebhookSecurityAdvisoryWithdrawnAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  /// The details of the security advisory, including summary, description, and severity.
  pub security_advisory: WebhookSecurityAdvisoryWithdrawnSecurityAdvisory,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAdvisoryWithdrawn {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysisChangesFrom {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub security_and_analysis: Option<SecurityAndAnalysis>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAndAnalysisChangesFrom {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysisChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub from: Option<WebhookSecurityAndAnalysisChangesFrom>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAndAnalysisChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSecurityAndAnalysis {
  pub changes: WebhookSecurityAndAnalysisChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: FullRepository,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSecurityAndAnalysis {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCancelledEventSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCancelledEventSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipTier {
  pub created_at: String,
  pub description: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_custom_ammount: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub is_custom_amount: Option<bool>,
  pub is_one_time: bool,
  pub monthly_price_in_cents: i64,
  pub monthly_price_in_dollars: i64,
  pub name: String,
  pub node_id: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipTier {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCancelledEventSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<SponsorshipCancelledEventSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCancelledEventSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCancelledEvent {
  pub action: SponsorshipCancelledEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: SponsorshipCancelledEventSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCancelledEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCreatedEventSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCreatedEventSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCreatedEventSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<SponsorshipCreatedEventSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCreatedEventSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipCreatedEvent {
  pub action: SponsorshipCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: SponsorshipCreatedEventSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipEditedEventChangesPrivacyLevel {
  /// The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipEditedEventChangesPrivacyLevel {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy_level: Option<SponsorshipEditedEventChangesPrivacyLevel>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipEditedEventSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipEditedEventSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipEditedEventSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<SponsorshipEditedEventSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipEditedEventSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct SponsorshipEditedEvent {
  pub action: SponsorshipEditedEventAction,
  pub changes: SponsorshipEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: SponsorshipEditedEventSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl SponsorshipEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellationSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingCancellationSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellationSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipPendingCancellationSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingCancellationSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingCancellation {
  pub action: WebhookSponsorshipPendingCancellationAction,
  /// The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub effective_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: WebhookSponsorshipPendingCancellationSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingCancellation {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeChangesTier {
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub from: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingTierChangeChangesTier {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeChanges {
  pub tier: WebhookSponsorshipPendingTierChangeChangesTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingTierChangeChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingTierChangeSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChangeSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipPendingTierChangeSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingTierChangeSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipPendingTierChange {
  pub action: WebhookSponsorshipPendingTierChangeAction,
  pub changes: WebhookSponsorshipPendingTierChangeChanges,
  /// The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub effective_date: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: WebhookSponsorshipPendingTierChangeSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipPendingTierChange {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedChangesTier {
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub from: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipTierChangedChangesTier {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedChanges {
  pub tier: WebhookSponsorshipTierChangedChangesTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipTierChangedChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedSponsorshipMaintainer {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipTierChangedSponsorshipMaintainer {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChangedSponsorship {
  pub created_at: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub maintainer: Option<WebhookSponsorshipTierChangedSponsorshipMaintainer>,
  pub node_id: String,
  pub privacy_level: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsor: Option<User>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sponsorable: Option<User>,
  /// The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
  pub tier: SponsorshipTier,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipTierChangedSponsorship {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookSponsorshipTierChanged {
  pub action: WebhookSponsorshipTierChangedAction,
  pub changes: WebhookSponsorshipTierChangedChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  pub sponsorship: WebhookSponsorshipTierChangedSponsorship,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookSponsorshipTierChanged {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StarCreatedEvent {
  pub action: StarCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  /// The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_at: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StarCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StarDeletedEvent {
  pub action: StarDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  /// The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
  pub starred_at: serde_json::Value,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StarDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventBranchesCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventBranchesCommit {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventBranches {
  pub commit: StatusEventBranchesCommit,
  pub name: String,
  pub protected: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventBranches {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitCommitAuthorItem2 {
  pub date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitCommitAuthorItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitCommitCommitterItem2 {
  pub date: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitCommitCommitterItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitCommitTree {
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitCommitTree {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitCommitVerification {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub payload: Option<String>,
  pub reason: StatusEventCommitCommitVerificationReason,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub signature: Option<String>,
  pub verified: bool,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitCommitVerification {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitCommit {
  pub author: StatusEventCommitCommitAuthor,
  pub comment_count: i64,
  pub committer: StatusEventCommitCommitCommitter,
  pub message: String,
  pub tree: StatusEventCommitCommitTree,
  pub url: String,
  pub verification: StatusEventCommitCommitVerification,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitCommit {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommitParents {
  pub html_url: String,
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommitParents {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEventCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<User>,
  pub comments_url: String,
  pub commit: StatusEventCommitCommit,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<User>,
  pub html_url: String,
  pub node_id: String,
  pub parents: Vec<StatusEventCommitParents>,
  pub sha: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEventCommit {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct StatusEvent {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  /// An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
  pub branches: Vec<StatusEventBranches>,
  pub commit: StatusEventCommit,
  pub context: String,
  pub created_at: String,
  /// The optional human-readable description added to the status.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  /// The unique identifier of the status.
  pub id: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub name: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  /// The Commit SHA.
  pub sha: String,
  /// The new state. Can be `pending`, `success`, `failure`, or `error`.
  pub state: StatusEventState,
  /// The optional link added to the status.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub target_url: Option<String>,
  pub updated_at: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl StatusEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamAdd {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookTeamAdd {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamAddedToRepository {
  pub action: WebhookTeamAddedToRepositoryAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookTeamAddedToRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamCreatedEvent {
  pub action: TeamCreatedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamCreatedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamDeletedEvent {
  pub action: TeamDeletedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub sender: Option<SimpleUser>,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamDeletedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesDescription {
  /// The previous version of the description if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesDescription {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesName {
  /// The previous version of the name if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesName {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesNotificationSetting {
  /// The previous version of the team's notification setting if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesNotificationSetting {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesPrivacy {
  /// The previous version of the team's privacy if the action was `edited`.
  pub from: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesPrivacy {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesRepositoryPermissionsFrom {
  /// The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub admin: Option<bool>,
  /// The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull: Option<bool>,
  /// The previous version of the team member's `push` permission on a repository, if the action was `edited`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub push: Option<bool>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesRepositoryPermissionsFrom {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesRepositoryPermissions {
  pub from: TeamEditedEventChangesRepositoryPermissionsFrom,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesRepositoryPermissions {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChangesRepository {
  pub permissions: TeamEditedEventChangesRepositoryPermissions,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChangesRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The changes to the team if the action was `edited`.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEventChanges {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<TeamEditedEventChangesDescription>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<TeamEditedEventChangesName>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notification_setting: Option<TeamEditedEventChangesNotificationSetting>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub privacy: Option<TeamEditedEventChangesPrivacy>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<TeamEditedEventChangesRepository>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEventChanges {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct TeamEditedEvent {
  pub action: TeamEditedEventAction,
  /// The changes to the team if the action was `edited`.
  pub changes: TeamEditedEventChanges,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl TeamEditedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookTeamRemovedFromRepository {
  pub action: WebhookTeamRemovedFromRepositoryAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  pub organization: OrganizationSimple,
  /// A git repository
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<Repository>,
  pub sender: SimpleUser,
  /// Groups of organization members that gives permissions on specified repositories.
  pub team: Team,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookTeamRemovedFromRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WatchStartedEvent {
  pub action: WatchStartedEventAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WatchStartedEvent {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowDispatch {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub inputs: Option<serde_json::Value>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub workflow: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowDispatch {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowStep {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WorkflowStepConclusion>,
  pub name: String,
  pub number: i64,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  pub status: WorkflowStepStatus,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowStep {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
/// The workflow job. Many `workflow_job` keys, such as `head_sha`, `conclusion`, and `started_at` are the same as those in a [`check_run`](#check_run) object.
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WorkflowJobConclusion>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  /// Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  /// The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  /// The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  /// The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  /// The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  /// The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
  pub status: WorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowJob {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobCompletedWorkflowJobItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  pub conclusion: WebhookWorkflowJobCompletedWorkflowJobItem2Conclusion,
  /// The time that the job created.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<Option<String>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub steps: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobCompletedWorkflowJobItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobCompleted {
  pub action: WebhookWorkflowJobCompletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub workflow_job: WebhookWorkflowJobCompletedWorkflowJob,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobCompleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobInProgressWorkflowJobItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels: Option<Vec<String>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<f64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub started_at: Option<String>,
  pub status: WebhookWorkflowJobInProgressWorkflowJobItem2Status,
  pub steps: Vec<WorkflowStep>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobInProgressWorkflowJobItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobInProgress {
  pub action: WebhookWorkflowJobInProgressAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub workflow_job: WebhookWorkflowJobInProgressWorkflowJob,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobInProgress {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobQueuedWorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  pub status: WebhookWorkflowJobQueuedWorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobQueuedWorkflowJob {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobQueued {
  pub action: WebhookWorkflowJobQueuedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub workflow_job: WebhookWorkflowJobQueuedWorkflowJob,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobQueued {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobWaitingWorkflowJob {
  pub check_run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub completed_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<String>,
  /// The time that the job created.
  pub created_at: String,
  /// The name of the current branch.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  pub head_sha: String,
  pub html_url: String,
  pub id: i64,
  pub labels: Vec<String>,
  pub name: String,
  pub node_id: String,
  pub run_attempt: i64,
  pub run_id: f64,
  pub run_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_group_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub runner_name: Option<String>,
  pub started_at: String,
  pub status: WebhookWorkflowJobWaitingWorkflowJobStatus,
  pub steps: Vec<WorkflowStep>,
  pub url: String,
  /// The name of the workflow.
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobWaitingWorkflowJob {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowJobWaiting {
  pub action: WebhookWorkflowJobWaitingAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployment: Option<Deployment>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  pub workflow_job: WebhookWorkflowJobWaitingWorkflowJob,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowJobWaiting {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct RepositoryLite {
  pub archive_url: String,
  pub assignees_url: String,
  pub blobs_url: String,
  pub branches_url: String,
  pub collaborators_url: String,
  pub comments_url: String,
  pub commits_url: String,
  pub compare_url: String,
  pub contents_url: String,
  pub contributors_url: String,
  pub deployments_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  pub downloads_url: String,
  pub events_url: String,
  pub fork: bool,
  pub forks_url: String,
  pub full_name: String,
  pub git_commits_url: String,
  pub git_refs_url: String,
  pub git_tags_url: String,
  pub hooks_url: String,
  pub html_url: String,
  /// Unique identifier of the repository
  pub id: i64,
  pub issue_comment_url: String,
  pub issue_events_url: String,
  pub issues_url: String,
  pub keys_url: String,
  pub labels_url: String,
  pub languages_url: String,
  pub merges_url: String,
  pub milestones_url: String,
  /// The name of the repository.
  pub name: String,
  pub node_id: String,
  pub notifications_url: String,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<User>,
  /// Whether the repository is private or public.
  pub private: bool,
  pub pulls_url: String,
  pub releases_url: String,
  pub stargazers_url: String,
  pub statuses_url: String,
  pub subscribers_url: String,
  pub subscription_url: String,
  pub tags_url: String,
  pub teams_url: String,
  pub trees_url: String,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl RepositoryLite {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequestsBase {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowRunPullRequestsBase {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequestsHead {
  #[serde(rename = "ref")]
  pub ref_: String,
  pub repo: RepoRef,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowRunPullRequestsHead {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunPullRequests {
  pub base: WorkflowRunPullRequestsBase,
  pub head: WorkflowRunPullRequestsHead,
  pub id: f64,
  pub number: f64,
  pub url: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowRunPullRequests {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WorkflowRunReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WorkflowRunReferencedWorkflows {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2Actor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2Actor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitCommitter {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitCommitter {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommitCommitter>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timestamp: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tree_id: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommit {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2ReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2ReferencedWorkflows {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2RepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2RepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2Repository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunCompletedWorkflowRunItem2RepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2Repository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2TriggeringActor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2TriggeringActor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompletedWorkflowRunItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<WebhookWorkflowRunCompletedWorkflowRunItem2Actor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  pub conclusion: WebhookWorkflowRunCompletedWorkflowRunItem2Conclusion,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadCommit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<WebhookWorkflowRunCompletedWorkflowRunItem2HeadRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows:
    Option<Vec<WebhookWorkflowRunCompletedWorkflowRunItem2ReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<WebhookWorkflowRunCompletedWorkflowRunItem2Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<WebhookWorkflowRunCompletedWorkflowRunItem2TriggeringActor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompletedWorkflowRunItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunCompleted {
  pub action: WebhookWorkflowRunCompletedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WebhookWorkflowRunCompletedWorkflowRun,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunCompleted {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2Actor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2Actor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitAuthor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitAuthor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitCommitter {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub email: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitCommitter {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommit {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub author: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitAuthor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub committer: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommitCommitter>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub message: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub timestamp: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tree_id: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommit {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2ReferencedWorkflows {
  pub path: String,
  #[serde(rename = "ref")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub ref_: Option<String>,
  pub sha: String,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2ReferencedWorkflows {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2RepositoryOwner {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2RepositoryOwner {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2Repository {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub archive_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub assignees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub blobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub branches_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub collaborators_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub comments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub compare_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contents_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub contributors_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub deployments_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub description: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub downloads_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub fork: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub forks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub full_name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_commits_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_refs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub git_tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub hooks_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_comment_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issue_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub issues_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub keys_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub labels_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub languages_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub merges_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub milestones_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub notifications_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub owner: Option<WebhookWorkflowRunInProgressWorkflowRunItem2RepositoryOwner>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub private: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pulls_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub releases_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub stargazers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub statuses_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscribers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscription_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub tags_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub teams_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub trees_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2Repository {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2TriggeringActor {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub avatar_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub followers_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub following_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gists_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub gravatar_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub login: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organizations_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub received_events_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repos_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub site_admin: Option<bool>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub starred_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub subscriptions_url: Option<String>,
  #[serde(rename = "type")]
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub type_: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2TriggeringActor {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgressWorkflowRunItem2 {
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub actor: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Actor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub artifacts_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub cancel_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub check_suite_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub conclusion: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Conclusion>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub created_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub event: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_branch: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_commit: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadCommit>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_repository: Option<WebhookWorkflowRunInProgressWorkflowRunItem2HeadRepository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub head_sha: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub html_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub jobs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub logs_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub name: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub node_id: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub path: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub previous_attempt_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub pull_requests: Option<Vec<Option<serde_json::Value>>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub referenced_workflows:
    Option<Vec<WebhookWorkflowRunInProgressWorkflowRunItem2ReferencedWorkflows>>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub repository: Option<WebhookWorkflowRunInProgressWorkflowRunItem2Repository>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub rerun_url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_attempt: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_number: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub run_started_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub status: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub triggering_actor: Option<WebhookWorkflowRunInProgressWorkflowRunItem2TriggeringActor>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub updated_at: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub url: Option<String>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_id: Option<i64>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow_url: Option<String>,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgressWorkflowRunItem2 {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunInProgress {
  pub action: WebhookWorkflowRunInProgressAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WebhookWorkflowRunInProgressWorkflowRun,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunInProgress {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
#[cfg(any(feature = "full", feature = "webhook",))]
#[derive(Debug, Clone, Serialize, Deserialize, TypedBuilder)]
#[builder(field_defaults(setter(into)))]
pub struct WebhookWorkflowRunRequested {
  pub action: WebhookWorkflowRunRequestedAction,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub enterprise: Option<Enterprise>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub installation: Option<SimpleInstallation>,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub organization: Option<OrganizationSimple>,
  pub repository: Repository,
  pub sender: SimpleUser,
  #[serde(skip_serializing_if = "Option::is_none")]
  #[builder(default, setter(strip_option))]
  pub workflow: Option<Workflow>,
  pub workflow_run: WorkflowRun,
}

#[cfg(any(feature = "full", feature = "webhook",))]
impl WebhookWorkflowRunRequested {
  #[deprecated(note = "This is no longer required due to the use of [`TypedBuilder`]")]
  pub fn unwrap(self) -> Self {
    self
  }
}
